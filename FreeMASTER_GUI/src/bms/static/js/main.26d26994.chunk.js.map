{"version":3,"sources":["components/contents/helpers/ContentContainer.jsx","components/header/HeaderButton.jsx","components/contents/helpers/CardBoxContainer.jsx","components/contents/Battery/Battery.jsx","components/contents/Battery/Graph.jsx","components/contents/helpers/LabelWithValue.jsx","components/contents/MainDashboard.jsx","components/contents/helpers/CardBoxBatteryContainer.jsx","components/contents/Battery/BatteryWithGraph.jsx","components/contents/Battery/BatteryPack.jsx","components/contents/RawData/TableRowFromVariable.jsx","components/contents/RawData/RawDataTable.jsx","components/contents/RawData/RawData.jsx","components/contents/helpers/ConnectionSettingsWidget.jsx","components/contents/helpers/DataRecorderSettingsWidget.jsx","components/contents/helpers/ChartSettingsWidget.jsx","components/contents/SystemConfiguration.jsx","components/helper-functions/conversions.js","freemaster-libs/simple-jsonrpc-js.js","freemaster-libs/freemaster-client.js","App.js","serviceWorker.js","index.js"],"names":["ContentContainer","props","state","active","Fragment","id","this","className","data-parent","dataParent","children","React","Component","HeaderButton","ref","buttonRef","disabled","href","controls","aria-controls","role","data-toggle","aria-expanded","icon","text","CardBoxContainer","width","onClick","theme","Battery","battery","createRef","liquid","liquidSvgAnimation","batteryText","batteryTextPercentage","batteryTextUnits","updateBattery","bind","batterySoc","level","Math","trunc","current","style","fill","backgroundImage","backgroundPosition","top","backgroundColor","innerText","toFixed","soc","position","positionStyle","sizeStyle","version","xmlns","x","y","height","viewBox","enableBackground","d","isCharging","Graph","data","labels","datasets","borderColor","pointRadius","borderWidth","options","animation","duration","easing","tooltips","enabled","legend","display","scales","xAxes","gridLines","color","ticks","fontColor","beginAtZero","yAxes","zeroLineColor","maintainAspectRatio","chartReference","numberOfPoints","length","chartInstance","min","max","values","graphSettings","graphAutoscaling","undefined","setScales","graphAnimations","update","BatteryPack","paddingRight","paddingLeft","label","value","units","MainDashboard","currentPackStatus","currentPackSoc","packSoC","currentPackVoltage","packVoltage","currentPackCurrent","packCurrent","currentPackTemperature","packTemperature","currentPackPower","boardConnected","clickCellsPackTab","marginBottom","marginTop","left","LabelWithValue","systemSocUnits","systemVoltageUnits","systemCurrentUnits","systemTempUnits","systemPowerUnits","minHeight","title","fontSize","padding","axis","voltage","cellsNumber","CardBoxBatteryContainer","paddingBottom","paddingTop","BatteryWithGraph","dropdownContextMenu","voltageOption","curentOption","tempOption","selectedOption","voltageChartContainer","currentChartContainer","temperatureChartContainer","visible","selectedToShow","contextMenuOpen","menuOptionChange","adjustToSystemUnits","visibilityChange","document","body","addEventListener","classList","remove","e","clientY","clientX","add","preventDefault","target","setState","nextProps","nextState","isVisible","onChange","onContextMenu","data-target","cellData","temp","tabIndex","aria-labelledby","aria-hidden","maxWidth","type","data-dismiss","aria-label","Array","keys","map","element","key","cellsData","demoModeActive","TableRowFromVariable","scope","RawDataTable","name","RawData","partialVisibility","fontWeight","lineHeight","minWidth","ConnectionSettingsWidget","freemasterVersion","liteServerUrlInput","connStringInput","elfPathInput","onInputChange","onelfPathInputChange","defaultValue","liteConnection","liteServerUrl","connString","elfPath","changeLiteConnection","changeElfPath","defaultChecked","onSelectedFreemasterVersion","htmlFor","placeholder","aria-describedby","DataRecorderSettingsWidget","onSelectedRecordParamsToggle","ChartSettingsWidget","onToggleAutoScaling","onToggleAnimations","SystemConfiguration","cellsNr","selectedRecordParam","temperature","recordedData","cellsNumberSelect","onChangeCellsNumber","onChangeUnits","formatRecordedData","changeUnit","Number","changeCellsNumber","push","cellIndex","dataLength","dataIndex","toast","info","autoClose","param","prevState","filename","triggerDemoMode","background","changeApplicationTheme","pcm","loading","microToMili","microToNormal","miliToMicro","miliToNormal","normalToMicro","normalToMili","celsiusToFahrenheit","celsiusToKelvin","_Promise","Promise","root","isUndefined","isArray","isObject","isFunction","isString","isEmpty","idx","hasOwnProperty","forEach","callback","_key","ERRORS","ServerError","code","message","Boolean","prototype","Error","simple_jsonrpc","self","waitingframe","dispatcher","setError","jsonrpcError","exception","error","JSON","parse","stringify","resolver","isError","reject","console","log","isResponse","result","resolve","method","isRequest","request","METHOD_NOT_FOUND","params","fn","call","apply","INVALID_PARAMS","argsValues","arg","Object","toString","thing","then","res","catch","INTERNAL_ERROR","handleRemoteRequest","INVALID_REQUEST","notification","promise","toStream","a","arguments","dispatch","functionName","paramsNameFn","on","off","_call","batch","requests","promises","req","err","all","messageHandler","rawMessage","msg","r","beforeResolve","PARSE_ERROR","customException","WebSocket","PCM","url","onSocketOpen","onSocketClose","onSocketError","jrpc","socket","SendRequest","args","response","success","OnServerError","OnSocketOpen","OnSocketClose","OnSocketError","_msg","send","onopen","event","onclose","onerror","onmessage","GetAppVersion","EnumCommPorts","index","GetCommPortInfo","StartComm","StopComm","IsCommPortOpen","IsBoardDetected","GetDetectedBoardInfo","GetConfigParamU8","GetConfigParamULEB","GetConfigParamString","len","ReadIntVariable","addr","size","ReadUIntVariable","ReadFloatVariable","ReadDoubleVariable","WriteIntVariable","WriteUIntVariable","WriteFloatVariable","WriteDoubleVariable","ReadIntArray","elSize","ReadUIntArray","ReadFloatArray","ReadDoubleArray","WriteIntArray","WriteUIntArray","WriteFloatArray","WriteDoubleArray","ReadELF","elfFile","ReadTSA","EnumSymbols","GetSymbolInfo","EnumVariables","GetVariableInfo","DefineVariable","variable","DeleteVariable","DeleteAllScriptVariables","ReadVariable","WriteVariable","SetupOscilloscope","vars","GetOscilloscopeData","GetRecorderLimits","SetupRecorder","config","recVars","trgVars","StartRecorder","StopRecorder","GetRecorderStatus","GetRecorderData","PipeOpen","port","txBufferSize","rxBufferSize","PipeClose","PipeFlush","timeout","PipeSetDefaultRxMode","rxAllOrNothing","rxTimeout_ms","PipeSetDefaultStringMode","unicode","PipeGetRxBytes","PipeGetTxBytes","PipeGetTxFree","PipeGetRxBufferSize","PipeGetTxBufferSize","PipeWriteString","str","allOrNothing","PipeWriteIntArray","PipeWriteUIntArray","PipeWriteFloatArray","PipeWriteDoubleArray","PipeReadString","charsToRead","PipeReadIntArray","PipeReadUIntArray","PipeReadFloatArray","PipeReadDoubleArray","LocalFileOpen","file","mode","LocalFileClose","handle","LocalFileReadString","LocalFileWriteString","LogEnable","LogDisable","LogSetPattern","pattern","LogSetVerbosity","verbosity","LogSetServices","mask","services","EnableExtraFeatures","enable","OnBoardDetected","OnCommPortStateChanged","OnVariableChanged","OnRecorderDone","params_array","StartStopComm","start","EnableEvents","SubscribeVariable","interval","UnSubscribeVariable","name_or_id","DefineSymbol","address","GetStructMemberInfo","member","DeleteAllScriptSymbols","RunStimulators","StopStimulators","Exit","ActivateWindow","SelectItem","tab","OpenProject","IsBoardWithActiveContent","EnumHrefLinks","EnumProjectFiles","SetPageReloadOnPortOpen","GetPageReloadOnPortOpen","PipeSetDefaultTxMode","txAllOrNothing","GetAddressInfo","DefineOscilloscope","defStr","DefineRecorder","SendCommand","wait","GetCurrentRecorderState","GetCurrentRecorderData","GetCurrentRecorderSeries","App","maxOnGraphDataPoints","passedSeconds","updateRate","maxSavedGraphDataPoints","variables","PackVoltage","PackCurrent","PackTemp","PackSoC","CellVoltage","CellCurrent","CellTemp","CellSOC","numberOfCellVariables","cellsPackButton","onClickConnect","onClickDisconnect","defineVariables","readVariables","readDEMOvars","defineDEMOVars","charAt","defines","readings","initialDataArray","slice","voltageSeries","currentSeries","tempSeries","socSeries","splice","readVarsTimeout","setTimeout","clearTimeout","newCellsNumber","cellVoltage","random","cellCurrent","cellTemp","cellSOC","floor","readDEMOVarsTimeout","liteServer","right","click","selectedVerion","newPath","onChangeMaxOnGraphDataPoints","newMaxOnGraphDataPoints","selectedTheme","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26d26994.chunk.js","sourcesContent":["/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           ContentContainer.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass ContentContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        active: this.props.active || false\r\n    };\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div id={this.props.id} className={\"row collapse\" + (this.state.active == \"true\" ? \" show\" : \"\")} \r\n                 data-parent={this.props.dataParent}>\r\n                <div className=\"col-lg-12 mt-1\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ContentContainer;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           HeaderButton.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport \"../../css/buttons.css\"\r\n\r\nclass HeaderButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        active: this.props.active || false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <a ref={this.props.buttonRef} className={\"btn btn-large ml-3 white-text-button\" + (this.state.active == \"true\" ? \" btn-primary\" : \" btn-primary\") + (this.props.disabled === true ? \" disabled\" : \"\")} \r\n                href={this.props.controls} aria-controls={this.props.controls}\r\n                role=\"button\" data-toggle=\"collapse\" aria-expanded={this.state.active}>\r\n            <i className={this.props.icon}></i> {this.props.text}</a>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default HeaderButton;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           CardBoxContainer.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass CardBoxContainer extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className={this.props.width + \" mx-auto\"} onClick={this.props.onClick}>\r\n                <div className={\"box shadow mt-3\" + (this.props.theme === \"light\" ? \" light-background\" : \"\")}>\r\n                        {this.props.children}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default CardBoxContainer;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           Battery.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport \"../../../css/styled-battery.css\"\r\n\r\nclass Battery extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //refs for the battery animation state\r\n    this.battery = React.createRef();\r\n    this.liquid = React.createRef();\r\n    this.liquidSvgAnimation = React.createRef();\r\n    this.batteryText = React.createRef();\r\n    this.batteryTextPercentage = React.createRef();\r\n    this.batteryTextUnits = React.createRef();\r\n\r\n    this.updateBattery = this.updateBattery.bind(this);\r\n  }\r\n\r\n  updateBattery(batterySoc) {\r\n    let level = Math.trunc(batterySoc * 100)\r\n    if(level < 20) {\r\n        this.liquidSvgAnimation.current.style.fill = \"red\"\r\n        this.battery.current.style.backgroundImage = \"linear-gradient(red 50%, #444 0%)\"\r\n    } else if(level < 50) {\r\n        this.liquidSvgAnimation.current.style.fill = \"yellow\"\r\n        this.battery.current.style.backgroundImage = \"linear-gradient(yellow 50%, #444 0%)\"\r\n    } else if(level < 75) {\r\n        this.liquidSvgAnimation.current.style.fill = \"chartreuse\"\r\n        this.battery.current.style.backgroundImage = \"linear-gradient(chartreuse 50%, #444 0%)\"\r\n    } else {\r\n        this.liquidSvgAnimation.current.style.fill = \"green\"\r\n        this.battery.current.style.backgroundImage = \"linear-gradient(green 50%, #444 0%)\"\r\n    }\r\n\r\n    this.battery.current.style.backgroundPosition = '0 -' + (100 - level) + '%';\r\n    this.batteryText.current.style.backgroundPosition = '0 -' + (100 - level) + '%';\r\n    this.liquid.current.style.top = (100 - level) + '%';\r\n    if(level === 100) {\r\n        this.liquid.current.style.backgroundColor = 'green';\r\n    } else {\r\n        this.liquid.current.style.backgroundColor = '#444';\r\n    }\r\n    this.batteryTextPercentage.current.innerText = (batterySoc * 100).toFixed(1);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n      if(this.props.soc) {\r\n        this.updateBattery(this.props.soc)\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n                \r\n            <div id={this.props.id || \"\"} style={{position: \"absolute\", ...this.props.positionStyle}}>\r\n                <div ref={this.battery} className=\"battery onscreen\" style={{...this.props.sizeStyle}}>\r\n                    <div ref={this.liquid} className=\"liquid liquid-bg-color\">\r\n                        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"300px\" height=\"5px\" viewBox=\"0 0 300 5\" enableBackground=\"new 0 0 300 5\">\r\n                            <path ref={this.liquidSvgAnimation} className=\"wave\" d=\"M300,300V2.5c0,0-0.6-0.1-1.1-0.1c0,0-25.5-2.3-40.5-2.4c-15,0-40.6,2.4-40.6,2.4\r\n                            c-12.3,1.1-30.3,1.8-31.9,1.9c-2-0.1-19.7-0.8-32-1.9c0,0-25.8-2.3-40.8-2.4c-15,0-40.8,2.4-40.8,2.4c-12.3,1.1-30.4,1.8-32,1.9\r\n                            c-2-0.1-20-0.8-32.2-1.9c0,0-3.1-0.3-8.1-0.7V300H300z\" />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div ref={this.batteryText} className=\"battery-text onscreen\">\r\n                    { this.props.isCharging && <span className=\"isChargingIndicator\"><i className=\"fa fa-bolt\"></i></span>}\r\n                    <span ref={this.batteryTextPercentage} className=\"percentage\"></span><small ref={this.batteryTextUnits} className=\"units\">%</small>\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Battery;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           Graph.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nclass Graph extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    }\r\n    this.data = {\r\n        labels: [],\r\n        datasets: [{\r\n            data: [],\r\n            borderColor: \"#008FFB\",\r\n            pointRadius: 0,\r\n            fill: false,\r\n            borderWidth: 4\r\n        }]\r\n    }\r\n    this.options = {\r\n        animation: {\r\n            duration: 1500,\r\n            easing: \"linear\"\r\n        },\r\n        tooltips: {\r\n            enabled: false\r\n        },\r\n        legend: {\r\n            display: false\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                gridLines: {\r\n                    color: \"#90A4AE\",\r\n                },\r\n                ticks: {\r\n                    fontColor: \"white\",\r\n                    beginAtZero: true\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                gridLines: {\r\n                    color: \"#90A4AE\",\r\n                    zeroLineColor: \"#90A4AE\"\r\n                },\r\n                ticks: {\r\n                    fontColor: \"white\"\r\n                }   \r\n            }]\r\n        },\r\n        maintainAspectRatio: false\r\n    }\r\n    this.chartReference = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let numberOfPoints = this.props.data.labels?.length\r\n    if(numberOfPoints >= 12) {\r\n        this.chartReference.current.chartInstance.options.scales.xAxes[0].ticks.min = this.props.data.labels[numberOfPoints - 1] - 9\r\n        this.chartReference.current.chartInstance.options.scales.xAxes[0].ticks.max = this.props.data.labels[numberOfPoints - 1] - 1\r\n    }\r\n    this.chartReference.current.chartInstance.data.labels = this.props.data.labels;\r\n    this.chartReference.current.chartInstance.data.datasets[0].data = this.props.data.values;\r\n\r\n    if(this.props.graphSettings?.graphAutoscaling === true) {\r\n        this.chartReference.current.chartInstance.options.scales.yAxes[0].ticks.min = undefined\r\n        this.chartReference.current.chartInstance.options.scales.yAxes[0].ticks.max = undefined\r\n    } else {\r\n        this.chartReference.current.chartInstance.options.scales.yAxes[0].ticks.min = this.props.setScales?.yAxes.min\r\n        this.chartReference.current.chartInstance.options.scales.yAxes[0].ticks.max = this.props.setScales?.yAxes.max\r\n    }\r\n\r\n    if(this.props.graphSettings?.graphAnimations === false) {\r\n        this.chartReference.current.chartInstance.update(0);\r\n    } else {\r\n        this.chartReference.current.chartInstance.update();\r\n    }\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <Line ref={this.chartReference} data={this.data} options={{...this.options, ...this.props.options}}></Line>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           LabelWithValue.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass BatteryPack extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"col-lg-6 text-right\" style={{paddingRight: \"0px\", paddingLeft: \"0px\"}}>\r\n                <span className={\"custom-font mr-2 custom-light-weight\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>{this.props.label} </span>\r\n            </div>\r\n\r\n            <div className=\"col-lg-5 text-left align-self-center\" style={{paddingRight: \"0px\", paddingLeft: \"10px\"}}>\r\n                <span className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>{this.props.value}</span>\r\n                <span className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>{this.props.units}</span>\r\n            </div>\r\n            \r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default BatteryPack;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           MainDashboard.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport CardBoxContainer from \"./helpers/CardBoxContainer.jsx\"\r\nimport Battery from \"./Battery/Battery.jsx\"\r\nimport Graph from \"./Battery/Graph.jsx\"\r\nimport LabelWithValue from \"./helpers/LabelWithValue.jsx\"\r\n\r\nclass MainDashboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    }\r\n    \r\n  }\r\n\r\n//   componentDidUpdate() {\r\n//       console.log(this.props.data)\r\n//   }\r\n\r\n  render() {\r\n    let currentPackSoc = this.props.data.packSoC.length > 0 ? this.props.data.packSoC[this.props.data.packSoC.length - 1] : undefined\r\n    let currentPackVoltage = this.props.data.packVoltage.length > 0 ? this.props.data.packVoltage[this.props.data.packVoltage.length - 1].toFixed(2) : \"0\" \r\n    let currentPackCurrent = this.props.data.packCurrent.length > 0 ? this.props.data.packCurrent[this.props.data.packCurrent.length - 1].toFixed(2) : \"0\" \r\n    let currentPackTemperature = this.props.data.packTemperature.length > 0 ? this.props.data.packTemperature[this.props.data.packTemperature.length - 1].toFixed(2) : \"0\" \r\n    let currentPackPower = (currentPackVoltage * currentPackCurrent).toFixed(2)\r\n    let currentPackStatus\r\n    if(this.props.boardConnected) {\r\n        currentPackStatus = currentPackCurrent === 0 ? \"Idle\" : (currentPackCurrent > 0 ? \"Charging\" : \"Discharging\")\r\n    } else {\r\n        currentPackStatus = \"Disconected\"\r\n    }\r\n\r\n    let scales = {\r\n        xAxes: [{\r\n            gridLines: {\r\n                color: \"#90A4AE\",\r\n            },\r\n            ticks: {\r\n                beginAtZero: true,\r\n                fontColor: this.props.theme === \"light\" ? \"black\" : \"white\"\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            ticks: {\r\n                fontColor: this.props.theme === \"light\" ? \"black\" : \"white\"\r\n            },\r\n            gridLines: {\r\n                color: \"#90A4AE\",\r\n                zeroLineColor: \"#90A4AE\"\r\n            }   \r\n        }]\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"row\">\r\n\r\n                <CardBoxContainer width=\"col-md-4\" onClick={this.props.clickCellsPackTab} theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12 text-center\">\r\n                            <p className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 0 + \"px\"}}>Summary</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\" style={{marginTop: \"15px\", marginBottom: \"27px\"}}>\r\n                        <div className=\"col-md-3\">\r\n                            <Battery id=\"dashboardBattery\" positionStyle={{top: \"190px\", left: \"60px\"}} sizeStyle={{width: \"95px\", height: \"195px\"}}\r\n                                isCharging={currentPackCurrent > 0 ? true : false}\r\n                                soc={currentPackSoc} />\r\n                        </div>\r\n                        <div className=\"col-md-7 offset-md-1\">\r\n                            <div className=\"row mt-4\">\r\n                                <LabelWithValue label=\"State of charge (SoC)\"\r\n                                    value={(currentPackSoc * 100).toFixed(2) || 0}\r\n                                    units={this.props.units.systemSocUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Voltage\"\r\n                                    value={currentPackVoltage}\r\n                                    units={this.props.units.systemVoltageUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Current\"\r\n                                    value={currentPackCurrent}\r\n                                    units={this.props.units.systemCurrentUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Temperature\"\r\n                                    value={currentPackTemperature}\r\n                                    units={this.props.units.systemTempUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Power\"\r\n                                    value={currentPackPower}\r\n                                    units={this.props.units.systemPowerUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Status\"\r\n                                    value={currentPackStatus}\r\n                                    units={\"\"}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </CardBoxContainer>\r\n\r\n                <CardBoxContainer width=\"col-md-8\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\" style={{minHeight: \"295px\"}}>\r\n                            <Graph data={{labels: this.props.data.labels, values: this.props.data.packVoltage}} \r\n                                options={{\r\n                                    title: {display: true, text: \"BMS Voltage \" + `(${this.props.units.systemVoltageUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: 14, padding: 5},\r\n                                    scales: scales\r\n                                }}\r\n                                setScales={{\r\n                                    yAxes: {\r\n                                        min: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].min * this.props.cellsNumber,\r\n                                        max: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].max * this.props.cellsNumber,\r\n                                    }\r\n                                }}\r\n                                graphSettings={this.props.graphSettings} />\r\n                        </div>\r\n                        <div className=\"col-md-6\" style={{minHeight: \"295px\"}}>\r\n                            <Graph data={{labels: this.props.data.labels, values: this.props.data.packCurrent}} \r\n                                options={{\r\n                                    title: {display: true, text: \"BMS Current \" + `(${this.props.units.systemCurrentUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: 14, padding: 5},\r\n                                    scales: scales\r\n                                }}\r\n                                setScales={{\r\n                                    yAxes: {\r\n                                        min: this.props.units.axis.current[this.props.units.systemCurrentUnits].min * this.props.cellsNumber,\r\n                                        max: this.props.units.axis.current[this.props.units.systemCurrentUnits].max * this.props.cellsNumber,\r\n                                    }\r\n                                }}\r\n                                graphSettings={this.props.graphSettings} />\r\n                        </div>\r\n                    </div>\r\n                </CardBoxContainer>\r\n\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default MainDashboard;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           CardBoxBatteryContainer.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass CardBoxBatteryContainer extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className={this.props.width + \" mx-auto\"}>\r\n                <div className={\"box shadow mt-3\" + (this.props.theme === \"light\" ? \" light-background\" : \"\")}\r\n                    style={{paddingLeft: \"0px\", paddingRight: \"10px\", paddingBottom: \"0px\", paddingTop: \"10px\"}} >\r\n                        {this.props.children}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default CardBoxBatteryContainer;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           BatteryWithGraph.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport VisibilitySensor from 'react-visibility-sensor'\r\n\r\nimport Battery from \"./Battery.jsx\"\r\nimport Graph from \"./Graph.jsx\"\r\n\r\nclass BatteryWithGraph extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.dropdownContextMenu = React.createRef();\r\n    this.voltageOption = React.createRef();\r\n    this.curentOption = React.createRef();\r\n    this.tempOption = React.createRef();\r\n    this.selectedOption = React.createRef();\r\n\r\n    this.voltageChartContainer = React.createRef();\r\n    this.currentChartContainer = React.createRef();\r\n    this.temperatureChartContainer = React.createRef();\r\n\r\n    this.state = {\r\n        visible: false,\r\n        selectedToShow: \"Voltage\",\r\n        units: this.props.units.systemVoltageUnits\r\n    }\r\n    this.chartReference = React.createRef();\r\n\r\n    this.contextMenuOpen = this.contextMenuOpen.bind(this);\r\n    this.menuOptionChange = this.menuOptionChange.bind(this);\r\n    this.adjustToSystemUnits = this.adjustToSystemUnits.bind(this);\r\n    this.visibilityChange = this.visibilityChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.body.addEventListener('click', () => {\r\n        if(this.dropdownContextMenu.current) {\r\n            this.dropdownContextMenu.current.classList.remove('show');\r\n            this.dropdownContextMenu.current.style.display = \"none\";\r\n        }\r\n    });\r\n    document.body.addEventListener('contextmenu', () => {\r\n        if(this.dropdownContextMenu.current) {\r\n            this.dropdownContextMenu.current.classList.remove('show');\r\n            this.dropdownContextMenu.current.style.display = \"none\";\r\n        }\r\n    });\r\n  }\r\n\r\n  contextMenuOpen(e) {\r\n    let top = e.clientY;\r\n    let left = e.clientX;\r\n    this.dropdownContextMenu.current.style.top = top + \"px\";\r\n    this.dropdownContextMenu.current.style.left = left + \"px\";\r\n    this.dropdownContextMenu.current.style.display = \"block\";\r\n    this.dropdownContextMenu.current.classList.add('show');\r\n    e.preventDefault();\r\n  }\r\n\r\n  menuOptionChange(e) {\r\n    this.voltageOption.current.classList.remove('active');\r\n    this.curentOption.current.classList.remove('active');\r\n    this.tempOption.current.classList.remove('active');\r\n    e.target.classList.add('active');\r\n    switch(e.target.innerText) {\r\n        case \"Voltage\":\r\n            this.voltageChartContainer.current.style.display = \"block\"\r\n            this.currentChartContainer.current.style.display = \"none\"\r\n            this.temperatureChartContainer.current.style.display = \"none\"\r\n            this.setState(() => ({selectedToShow: \"Voltage\"}))\r\n            break;\r\n        case \"Current\":\r\n            this.voltageChartContainer.current.style.display = \"none\"\r\n            this.currentChartContainer.current.style.display = \"block\"\r\n            this.temperatureChartContainer.current.style.display = \"none\"\r\n            this.setState(() => ({selectedToShow: \"Current\"}))\r\n            break;\r\n        case \"Temp\":\r\n            this.voltageChartContainer.current.style.display = \"none\"\r\n            this.currentChartContainer.current.style.display = \"none\"\r\n            this.temperatureChartContainer.current.style.display = \"block\"\r\n            this.setState(() => ({selectedToShow: \"Temp\"}))\r\n            break;\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if(this.props.theme !== nextProps.theme || this.props.cellsNumber <= 6) {\r\n        return true\r\n    } else {\r\n        return this.state.visible\r\n    }\r\n  }\r\n\r\n//   componentDidUpdate() {\r\n//       console.log(this.props.id + \" updated\")\r\n//   }\r\n\r\n  adjustToSystemUnits() {\r\n    // for text units\r\n    switch(this.state.selectedToShow) {\r\n        case \"Voltage\":\r\n            this.state.units =  this.props.units.systemVoltageUnits\r\n            break;\r\n        case \"Current\":\r\n            this.state.units = this.props.units.systemCurrentUnits\r\n            break;\r\n        case \"Temp\":\r\n            this.state.units = this.props.units.systemTempUnits\r\n            break;\r\n    }\r\n  }\r\n\r\n  visibilityChange(isVisible) {\r\n      this.setState(() => ({visible: isVisible}))\r\n  }\r\n\r\n  render() {\r\n    let options = {\r\n        scales: {\r\n            xAxes: [{\r\n                gridLines: {\r\n                    color: \"#90A4AE\",\r\n                },\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: this.props.theme === \"light\" ? \"black\" : \"white\"\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                ticks: {\r\n                    fontColor: this.props.theme === \"light\" ? \"black\" : \"white\"\r\n                },\r\n                gridLines: {\r\n                    color: \"#90A4AE\",\r\n                    zeroLineColor: \"#90A4AE\"\r\n                }   \r\n            }]\r\n        }\r\n    }\r\n    this.adjustToSystemUnits()\r\n    return (\r\n        <VisibilitySensor onChange={this.visibilityChange}>\r\n        <React.Fragment>\r\n            \r\n            <div onContextMenu={this.contextMenuOpen} className=\"row\" data-toggle=\"modal\" data-target={\"#bateryModal\" + this.props.id}>\r\n                <div className=\"col-md-12 text-center\">\r\n                    <p className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>\r\n                        Cell {this.props.id + 1} <span ref={this.selectedOption}>{this.state.selectedToShow} (</span>\r\n                        <span>{this.state.units})</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <div onContextMenu={this.contextMenuOpen} className=\"row\" data-toggle=\"modal\" data-target={\"#bateryModal\" + this.props.id}>\r\n                <div className=\"col-md-3\">\r\n                    <Battery positionStyle={{top: \"190px\", left: \"75px\"}}\r\n                        isCharging={this.props.cellData?.current[this.props.cellData?.current.length - 1] > 0 ? true : false}\r\n                        soc={this.props.cellData?.soc[this.props.cellData?.soc.length - 1]} />\r\n                </div>\r\n                <div className=\"col-md-9 text-center\">\r\n                    <div ref={this.voltageChartContainer} style={{minHeight: \"230px\"}}>\r\n                        <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.voltage}}\r\n                            options={options}\r\n                            setScales={{\r\n                                yAxes: {\r\n                                    min: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].min,\r\n                                    max: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].max,\r\n                                }\r\n                            }}\r\n                            graphSettings={this.props.graphSettings} />\r\n                    </div>\r\n                    <div ref={this.currentChartContainer} style={{display: \"none\", minHeight: \"230px\"}}>\r\n                        <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.current}}\r\n                            options={options}\r\n                            setScales={{\r\n                                yAxes: {\r\n                                    min: this.props.units.axis.current[this.props.units.systemCurrentUnits].min,\r\n                                    max: this.props.units.axis.current[this.props.units.systemCurrentUnits].max,\r\n                                }\r\n                            }}\r\n                            graphSettings={this.props.graphSettings} />\r\n                    </div>\r\n                    <div ref={this.temperatureChartContainer} style={{display: \"none\", minHeight: \"230px\"}}>\r\n                        <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.temp}}\r\n                            options={options}\r\n                            setScales={{\r\n                                yAxes: {\r\n                                    min: this.props.units.axis.temp[this.props.units.systemTempUnits].min,\r\n                                    max: this.props.units.axis.temp[this.props.units.systemTempUnits].max, \r\n                                }\r\n                            }}\r\n                            graphSettings={this.props.graphSettings} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div ref={this.dropdownContextMenu} className=\"dropdown-menu dropdown-menu-sm custom-context-menu\">\r\n                <a className=\"dropdown-item active\" ref={this.voltageOption} onClick={this.menuOptionChange}>Voltage</a>\r\n                <a className=\"dropdown-item\" ref={this.curentOption} onClick={this.menuOptionChange}>Current</a>\r\n                <a className=\"dropdown-item\" ref={this.tempOption} onClick={this.menuOptionChange}>Temp</a>\r\n            </div>\r\n\r\n            {/* Modal */}\r\n            <div className=\"modal fade\" id={\"bateryModal\" + this.props.id} tabIndex=\"-1\" role=\"dialog\" aria-labelledby={\"bateryModalLabel\" + this.props.id} aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\" style={{maxWidth: \"1100px\"}}>\r\n                    <div className={\"modal-content\" + (this.props.theme === \"light\" ? \" light-background\" : \"\")}>\r\n                    <div className=\"modal-header\">\r\n                        <h5 className={\"modal-title\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")} id={\"bateryModalLabel\" + this.props.id}>Cell {this.props.id + 1} details</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                        {/* <span aria-hidden=\"true\">&times;</span> */}\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-4\" style={{minHeight: \"400px\"}}>\r\n                                <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.voltage}} \r\n                                    options={{...options, \r\n                                        title: {display: true, text: \"Cell Voltage \" + `(${this.props.units.systemVoltageUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: \"14\"},\r\n                                    }}\r\n                                    setScales={{\r\n                                        yAxes: {\r\n                                            min: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].min,\r\n                                            max: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].max,\r\n                                        }\r\n                                    }}\r\n                                    graphSettings={this.props.graphSettings} />\r\n                            </div>\r\n                            <div className=\"col-lg-4\" style={{minHeight: \"400px\"}}>\r\n                                <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.current}}\r\n                                    options={{...options, \r\n                                        title: {display: true, text: \"Cell Current \" + `(${this.props.units.systemCurrentUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: \"14\"},\r\n                                    }}\r\n                                    setScales={{\r\n                                        yAxes: {\r\n                                            min: this.props.units.axis.current[this.props.units.systemCurrentUnits].min,\r\n                                            max: this.props.units.axis.current[this.props.units.systemCurrentUnits].max,\r\n                                        }\r\n                                    }}\r\n                                    graphSettings={this.props.graphSettings} />\r\n                            </div>\r\n                            <div className=\"col-lg-4\" style={{minHeight: \"400px\"}}>\r\n                                <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.temp}}\r\n                                options={{...options, \r\n                                    title: {display: true, text: \"Cell Temperature \" + `(${this.props.units.systemTempUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: \"14\"},\r\n                                }}\r\n                                setScales={{\r\n                                    yAxes: {\r\n                                        min: this.props.units.axis.temp[this.props.units.systemTempUnits].min,\r\n                                        max: this.props.units.axis.temp[this.props.units.systemTempUnits].max,\r\n                                    }\r\n                                }}\r\n                                graphSettings={this.props.graphSettings} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        <button type=\"button\" className=\"btn btn-primary\">Save changes</button>\r\n                    </div> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </React.Fragment>\r\n        </VisibilitySensor>\r\n      );\r\n  }\r\n}\r\n\r\nexport default BatteryWithGraph;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           BatteryPack.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport CardBoxBatteryContainer from \"../helpers/CardBoxBatteryContainer.jsx\"\r\nimport BatteryWithGraph from \"./BatteryWithGraph.jsx\"\r\n\r\nclass BatteryPack extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"row\">\r\n                {\r\n                    [...Array(this.props.cellsNumber).keys()].map((element) => {\r\n                        return (\r\n                            <CardBoxBatteryContainer key={element} width=\"col-md-4\" theme={this.props.theme}>\r\n                                <BatteryWithGraph id={element}\r\n                                    cellsNumber={this.props.cellsNumber}\r\n                                    cellData={this.props.cellsData[element]}\r\n                                    units={this.props.units}\r\n                                    theme={this.props.theme}\r\n                                    boardConnected={this.props.boardConnected}\r\n                                    demoModeActive={this.props.demoModeActive}\r\n                                    graphSettings={this.props.graphSettings} />\r\n                            </CardBoxBatteryContainer>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default BatteryPack;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           TableRowFromVariable.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass TableRowFromVariable extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <tr>\r\n                <td scope=\"row\">Cell {this.props.id + 1}</td>\r\n                \r\n                    {\r\n                        this.props.values && this.props.values.length > 0 ?\r\n                            <td>{this.props.values[this.props.values.length - 1].toFixed(2)}</td> : \"0\"\r\n                    }\r\n                    \r\n                <td>{this.props.units}</td>\r\n            </tr>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default TableRowFromVariable;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           RawDataTable.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport TableRowFromVariable from \"./TableRowFromVariable.jsx\"\r\n\r\nclass RawDataTable extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <table className={\"table table-striped table-sm text-center\" + (this.props.theme === \"light\" ? \"\" : \" table-dark\")}>\r\n                <thead>\r\n                    <tr>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Value</th>\r\n                    <th scope=\"col\">Units</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        [...Array(this.props.cellsNumber).keys()].map((element) => (\r\n                            <TableRowFromVariable id={element} key={element}\r\n                                name={this.props.name}\r\n                                values={this.props.cellsData[element]}\r\n                                units={this.props.units} />\r\n                        ))\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default RawDataTable;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           RawData.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport VisibilitySensor from 'react-visibility-sensor'\r\n\r\nimport RawDataTable from \"./RawDataTable.jsx\"\r\nimport CardBoxContainer from \"../helpers/CardBoxContainer.jsx\"\r\n\r\nclass RawData extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        visible: false\r\n    }\r\n\r\n    this.visibilityChange = this.visibilityChange.bind(this);\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if(this.props.theme !== nextProps.theme) {\r\n        return true\r\n    } else {\r\n        return this.state.visible\r\n    }\r\n  }\r\n\r\n  visibilityChange(isVisible) {\r\n    this.setState(() => ({visible: isVisible}))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <VisibilitySensor onChange={this.visibilityChange} partialVisibility={true}>\r\n        <React.Fragment>\r\n            <div className=\"row\">\r\n                <CardBoxContainer width=\"col-md-4\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <span className=\"badge badge-primary ml-2 mb-2\" style={{fontSize: 22 + 'px'}}>\r\n                            <i className=\"fa fa-bolt mr-2\"></i>\r\n                            Voltage\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <RawDataTable cellsNumber={this.props.cellsNumber} cellsData={this.props.cellsData.map(element => element.voltage)}\r\n                            name=\"Voltage\" units={this.props.units.systemVoltageUnits} theme={this.props.theme} />\r\n                    </div>\r\n                </CardBoxContainer>\r\n                <CardBoxContainer width=\"col-md-4\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <span className=\"badge badge-primary ml-2 mb-2\" style={{fontSize: 22 + 'px'}}>\r\n                            {/* <i className=\"fa fa-bar-chart mr-2\"></i> */}\r\n                            <span style={{fontSize: 52 + 'px', fontWeight: \"400\", lineHeight: \"0.0\", position: \"absolute\", top: \"55px\"}}>\r\n                                &#9107;\r\n                            </span>\r\n                            <span style={{minWidth: \"100px\"}}>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n                            <span className=\"ml-2\">Current</span>\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <RawDataTable cellsNumber={this.props.cellsNumber} cellsData={this.props.cellsData.map(element => element.current)}\r\n                            name=\"Current\" units={this.props.units.systemCurrentUnits} theme={this.props.theme} />\r\n                    </div>\r\n                </CardBoxContainer>\r\n                <CardBoxContainer width=\"col-md-4\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <span className=\"badge badge-primary ml-2 mb-2\" style={{fontSize: 22 + 'px'}}>\r\n                            <i className=\"fa fa-thermometer-half mr-2\"></i>\r\n                            Temperature\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <RawDataTable cellsNumber={this.props.cellsNumber} cellsData={this.props.cellsData.map(element => element.temp)}\r\n                            name=\"Temperature\" units={this.props.units.systemTempUnits} theme={this.props.theme} />\r\n                    </div>\r\n                </CardBoxContainer>\r\n            </div>\r\n        </React.Fragment>\r\n        </VisibilitySensor>\r\n      );\r\n  }\r\n}\r\n\r\nexport default RawData;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           ConnectionSettingsWidget.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport \"../../../css/buttons.css\"\r\n\r\nclass ConnectionSettingsWidget extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        freemasterVersion: \"desktop\"\r\n    }\r\n\r\n    this.liteServerUrlInput = React.createRef();\r\n    this.connStringInput = React.createRef();\r\n    this.elfPathInput = React.createRef();\r\n\r\n    this.onInputChange = this.onInputChange.bind(this);\r\n    this.onelfPathInputChange = this.onelfPathInputChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.liteServerUrlInput.current.defaultValue = this.props.liteConnection.liteServerUrl\r\n    this.connStringInput.current.defaultValue = this.props.liteConnection.connString\r\n\r\n    this.elfPathInput.current.defaultValue = this.props.elfPath\r\n  }\r\n\r\n  componentDidUpdate() {\r\n      if(this.state.freemasterVersion === \"desktop\") {\r\n        this.liteServerUrlInput.current.defaultValue = \"localhost:41000\"\r\n        this.connStringInput.current.defaultValue = \"Managed from Desktop Application\"\r\n        this.elfPathInput.current.defaultValue = \"Managed from Desktop Application\"\r\n      }\r\n      if(this.state.freemasterVersion === \"lite\") {\r\n        this.liteServerUrlInput.current.defaultValue = \"localhost:8090\"\r\n        this.connStringInput.current.defaultValue = \"RS232;port=COM3;speed=115200;\"\r\n        this.elfPathInput.current.defaultValue = \"bms\\\\bms_s32k_mc33772b_spi.elf\"\r\n      }\r\n  }\r\n\r\n  onInputChange() {\r\n    this.props.changeLiteConnection({\r\n        liteServerUrl: this.liteServerUrlInput.current.value,\r\n        connString: this.connStringInput.current.value\r\n    })\r\n  }\r\n\r\n  onelfPathInputChange() {\r\n      this.props.changeElfPath(this.elfPathInput.current.value)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <form>\r\n                <label>Freemaster Version</label>\r\n                <div className=\"form-row mb-2\">\r\n                    <div className=\"col text-center mx-auto\">\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"radio\" name=\"freemasterVersion\" id=\"desktopRadio\" value=\"desktop\" defaultChecked\r\n                                onClick={() => {\r\n                                    this.setState({freemasterVersion: \"desktop\"})\r\n                                    this.props.onSelectedFreemasterVersion(\"desktop\")\r\n                                }} />\r\n                            <label className=\"form-check-label\" htmlFor=\"desktopRadio\">\r\n                                Desktop\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"radio\" name=\"freemasterVersion\" id=\"liteRadio\" value=\"lite\"\r\n                                onClick={() => {\r\n                                    this.setState({freemasterVersion: \"lite\"})\r\n                                    this.props.onSelectedFreemasterVersion(\"lite\")\r\n                                    this.props.changeLiteConnection({\r\n                                        liteServerUrl: \"localhost:8090\",\r\n                                        connString: \"RS232;port=COM3;speed=115200;\"\r\n                                    })\r\n                                    this.props.changeElfPath(\"bms\\\\bms_s32k_mc33772b_spi.elf\")\r\n                                }} />\r\n                            <label className=\"form-check-label\" htmlFor=\"liteRadio\">\r\n                                Lite\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <label>Freemaster Server URL</label>\r\n                <div className=\"form-row\">\r\n                    <div className=\"input-group mb-1\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"server-addon\">\r\n                                <i className=\"fa fa-server\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <input ref={this.liteServerUrlInput} type=\"text\"\r\n                            disabled={this.state.freemasterVersion === \"desktop\"}\r\n                            onChange={this.onInputChange}\r\n                            className=\"form-control\"\r\n                            placeholder=\"Freemaster Server URL (ex:localhost:8090)\"\r\n                            aria-label=\"Server\" aria-describedby=\"server-addon\" />\r\n                    </div>\r\n                </div>\r\n                <label>Connection String</label>\r\n                <div className=\"form-row\">\r\n                    <div className=\"input-group mb-1\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"connstring-addon\">\r\n                                <i className=\"fa fa-plug\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <input ref={this.connStringInput} type=\"text\"\r\n                            disabled={this.state.freemasterVersion === \"desktop\"}\r\n                            onChange={this.onInputChange}\r\n                            className=\"form-control\"\r\n                            placeholder=\"Connection String (ex:RS232;port=COM3;speed=115200;)\"\r\n                            aria-label=\"ConnectionString\" aria-describedby=\"connstring-addon\" />\r\n                    </div>\r\n                </div>\r\n                <label>ELF File</label>\r\n                <div className=\"form-row\">\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"elfpath-addon\">\r\n                                <i className=\"fa fa-file\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <input ref={this.elfPathInput} type=\"text\"\r\n                            disabled={this.state.freemasterVersion === \"desktop\"}\r\n                            onChange={this.onelfPathInputChange}\r\n                            className=\"form-control\"\r\n                            placeholder=\"ex: bms_s32k.elf\"\r\n                            aria-label=\"ElfPath\" aria-describedby=\"elfpath-addon\" />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ConnectionSettingsWidget;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           DataRecorderSettingsWidget.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport \"../../../css/buttons.css\"\r\n\r\nclass DataRecorderSettingsWidget extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n\r\n//   }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <form>\r\n                <label>Recorded Parameters</label>\r\n                <div className=\"form-row\">\r\n                    <div className=\"col text-center mx-auto\">\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name=\"recordedParams\" id=\"voltageCheckbox\" value=\"voltage\" defaultChecked\r\n                                onClick={() => this.props.onSelectedRecordParamsToggle(\"voltage\")} />\r\n                            <label className=\"form-check-label\" htmlFor=\"voltageCheckbox\">\r\n                                Voltage\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name=\"recordedParams\" id=\"currentCheckbox\" value=\"current\" defaultChecked\r\n                                onClick={() => this.props.onSelectedRecordParamsToggle(\"current\")} />\r\n                            <label className=\"form-check-label\" htmlFor=\"currentCheckbox\">\r\n                                Current\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name=\"recordedParams\" id=\"temperatureCheckbox\" value=\"temperature\" defaultChecked\r\n                                onClick={() => this.props.onSelectedRecordParamsToggle(\"temperature\")} />\r\n                            <label className=\"form-check-label\" htmlFor=\"temperatureCheckbox\">\r\n                                Temperature\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name=\"recordedParams\" id=\"socCheckbox\" value=\"soc\" defaultChecked\r\n                                onClick={() => this.props.onSelectedRecordParamsToggle(\"soc\")} />\r\n                            <label className=\"form-check-label\" htmlFor=\"socCheckbox\">\r\n                                SoC\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default DataRecorderSettingsWidget;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           ChartSettingsWidget.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\n\r\nclass ChartSettingsWidget extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className=\"form-row\">\r\n                <div className=\"col text-center mx-auto\">\r\n                    <div className=\"form-check-inline\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" name=\"chartParams\" id=\"autoScalingCheckbox\" value=\"autoScaling\" defaultChecked\r\n                            onClick={() => this.props.onToggleAutoScaling()} />\r\n                        <label className=\"form-check-label\" htmlFor=\"autoScalingCheckbox\">\r\n                            Auto scaling axes\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"form-check-inline\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" name=\"chartParams\" id=\"animationsCheckbox\" value=\"animations\" defaultChecked\r\n                            onClick={() => this.props.onToggleAnimations()} />\r\n                        <label className=\"form-check-label\" htmlFor=\"animationsCheckbox\">\r\n                            Animations\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ChartSettingsWidget;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           SystemConfiguration.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport { CSVLink } from \"react-csv\";\r\nimport { toast } from 'react-toastify';\r\n\r\nimport ConnectionSettingsWidget from \"./helpers/ConnectionSettingsWidget.jsx\"\r\nimport DataRecorderSettingsWidget from \"./helpers/DataRecorderSettingsWidget.jsx\"\r\nimport CardBoxContainer from \"./helpers/CardBoxContainer.jsx\"\r\nimport ChartSettingsWidget from './helpers/ChartSettingsWidget.jsx';\r\n\r\n\r\nclass SystemConfiguration extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        cellsNr: 6,\r\n        selectedRecordParam: {\r\n            voltage: true,\r\n            current: true,\r\n            temperature: true,\r\n            soc: true\r\n        },\r\n        recordedData: [\r\n            [\"voltage\", \"current\", \"temperature\", \"soc\"]\r\n        ]\r\n    }\r\n\r\n    this.cellsNumberSelect = React.createRef();\r\n\r\n    this.onChangeCellsNumber = this.onChangeCellsNumber.bind(this);\r\n    this.onChangeUnits = this.onChangeUnits.bind(this);\r\n    this.formatRecordedData = this.formatRecordedData.bind(this);\r\n  }\r\n\r\n  onChangeUnits(e) {\r\n      this.props.changeUnit(e.target.value)\r\n  }\r\n\r\n  onChangeCellsNumber(e) {\r\n    if(Number(this.cellsNumberSelect.current.value) && Number(this.cellsNumberSelect.current.value) != this.state.cellsNr) {\r\n        this.state.cellsNr = Number(this.cellsNumberSelect.current.value)\r\n        this.props.changeCellsNumber(Number(this.cellsNumberSelect.current.value))\r\n    }\r\n    e.preventDefault();\r\n  }\r\n\r\n  formatRecordedData() {\r\n    let recordedData = [[]]\r\n    recordedData[0].push(\"Time\")\r\n\r\n    if(this.state.selectedRecordParam.voltage) {\r\n        recordedData[0].push(\"BMS voltage (\" + this.props.units.systemVoltageUnits + \")\")\r\n    }\r\n    if(this.state.selectedRecordParam.current) {\r\n        recordedData[0].push(\"BMS current (\" + this.props.units.systemCurrentUnits + \")\")\r\n    }\r\n    if(this.state.selectedRecordParam.temperature) {\r\n        recordedData[0].push(\"BMS temperature (\" + this.props.units.systemTempUnits + \")\")\r\n    }\r\n    if(this.state.selectedRecordParam.soc) {\r\n        recordedData[0].push(\"BMS SoC (\" + this.props.units.systemSocUnits + \")\")\r\n    }\r\n\r\n    for(let cellIndex = 1; cellIndex <= this.props.cellsNumber; cellIndex++) {\r\n        if(this.state.selectedRecordParam.voltage) {\r\n            recordedData[0].push(\"Cell \" + cellIndex + \" voltage (\" + this.props.units.systemVoltageUnits + \")\")\r\n        }\r\n        if(this.state.selectedRecordParam.current) {\r\n            recordedData[0].push(\"Cell \" + cellIndex + \" current (\" + this.props.units.systemCurrentUnits + \")\")\r\n        }\r\n        if(this.state.selectedRecordParam.temperature) {\r\n            recordedData[0].push(\"Cell \" + cellIndex + \" temperature (\" + this.props.units.systemTempUnits + \")\")\r\n        }\r\n        if(this.state.selectedRecordParam.soc) {\r\n            recordedData[0].push(\"Cell \" + cellIndex + \" SoC (\" + this.props.units.systemSocUnits + \")\")\r\n        }\r\n    }\r\n\r\n    // console.log(this.props.data)\r\n    // console.log(this.props.cellData)\r\n    let cellData = this.props.cellsData\r\n    let dataLength = cellData[0]?.labels.length || 0\r\n    for(let dataIndex = 0; dataIndex < dataLength; dataIndex++) {\r\n        recordedData.push([])\r\n        //header is on the first line in csv\r\n        recordedData[dataIndex + 1].push(cellData[0].labels[dataIndex])\r\n        if(this.state.selectedRecordParam.voltage) {\r\n            recordedData[dataIndex + 1].push(this.props.data.packVoltage[dataIndex])\r\n        }\r\n        if(this.state.selectedRecordParam.current) {\r\n            recordedData[dataIndex + 1].push(this.props.data.packCurrent[dataIndex])\r\n        }\r\n        if(this.state.selectedRecordParam.temperature) {\r\n            recordedData[dataIndex + 1].push(this.props.data.packTemperature[dataIndex])\r\n        }\r\n        if(this.state.selectedRecordParam.soc) {\r\n            recordedData[dataIndex + 1].push(this.props.data.packSoC[dataIndex])\r\n        }\r\n        for(let cellIndex = 0; cellIndex < this.props.cellsNumber; cellIndex++) {\r\n            if(this.state.selectedRecordParam.voltage) {\r\n                recordedData[dataIndex + 1].push(cellData[cellIndex].voltage[dataIndex])\r\n            }\r\n            if(this.state.selectedRecordParam.current) {\r\n                recordedData[dataIndex + 1].push(cellData[cellIndex].current[dataIndex])\r\n            }\r\n            if(this.state.selectedRecordParam.temperature) {\r\n                recordedData[dataIndex + 1].push(cellData[cellIndex].temp[dataIndex])\r\n            }\r\n            if(this.state.selectedRecordParam.soc) {\r\n                recordedData[dataIndex + 1].push(cellData[cellIndex].soc[dataIndex])\r\n            }\r\n        }\r\n    }\r\n\r\n    this.setState(() => ({\r\n        recordedData: recordedData\r\n    }))\r\n    toast.info(\" Data exported.\", {autoClose: 3000})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-4\">\r\n                    <div className=\"row\">\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>BMS Parameters</p>\r\n                            <form>\r\n                                <label>Filter used to determine SOC</label>\r\n                                <div className=\"form-row\">\r\n                                    <select className=\"form-control mx-auto\">\r\n                                        <option defaultValue>Select the filter used to determine SOC</option>\r\n                                        <option value=\"1\">Coloumb Counting</option>\r\n                                        <option value=\"2\">UKF</option>\r\n                                        <option value=\"3\">EKF</option>\r\n                                    </select>\r\n                                </div>\r\n                                <label className=\"mt-3\">Number of Cells</label>\r\n                                <div className=\"form-row\">\r\n                                    <select ref={this.cellsNumberSelect} onClick={this.onChangeCellsNumber} className=\"form-control mx-auto\">\r\n                                        <option defaultValue value=\"0\">Select the number of cells</option>\r\n                                        {\r\n                                            [...Array(16).keys()].map((element) => (\r\n                                                <option value={element + 1} key={element}>{element + 1}</option>\r\n                                            ))\r\n                                        }\r\n                                    </select>\r\n                                </div>\r\n                            </form>\r\n                        </CardBoxContainer>\r\n\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>Data recording options</p>\r\n                            <DataRecorderSettingsWidget\r\n                                onSelectedRecordParamsToggle={(param) => {\r\n                                    switch(param) {\r\n                                        case \"voltage\":\r\n                                            this.setState((prevState) => ({\r\n                                                selectedRecordParam: {\r\n                                                    ...prevState.selectedRecordParam,\r\n                                                    voltage: !prevState.selectedRecordParam.voltage\r\n                                                }\r\n                                            }))\r\n                                            break;\r\n                                        case \"current\":\r\n                                            this.setState((prevState) => ({\r\n                                                selectedRecordParam: {\r\n                                                    ...prevState.selectedRecordParam,\r\n                                                    current: !prevState.selectedRecordParam.current\r\n                                                }\r\n                                            }))\r\n                                            break;\r\n                                        case \"temperature\":\r\n                                            this.setState((prevState) => ({\r\n                                                selectedRecordParam: {\r\n                                                    ...prevState.selectedRecordParam,\r\n                                                    temperature: !prevState.selectedRecordParam.temperature\r\n                                                }\r\n                                            }))\r\n                                            break;\r\n                                        case \"soc\":\r\n                                            this.setState((prevState) => ({\r\n                                                selectedRecordParam: {\r\n                                                    ...prevState.selectedRecordParam,\r\n                                                    soc: !prevState.selectedRecordParam.soc\r\n                                                }\r\n                                            }))\r\n                                        break;\r\n                                    }\r\n                                }} />\r\n                            <div className=\"row\">\r\n                                <div className=\"col text-center\">\r\n                                <CSVLink data={this.state.recordedData} filename={\"BMS_recorded_parameters.csv\"}\r\n                                    onClick={this.formatRecordedData}\r\n                                    className=\"btn btn-primary mt-4\">\r\n                                    Get recorded data\r\n                                </CSVLink>\r\n                                </div>\r\n                            </div>\r\n                        </CardBoxContainer>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                    <div className=\"row\">\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>BMS Measurement Units</p>\r\n                            <label>Voltage Units of Measure</label>\r\n                            <div className=\"form-row\">\r\n                                <select onClick={this.onChangeUnits} className=\"form-control mx-auto\">\r\n                                    <option defaultValue>Select the Voltage Units of Measure</option>\r\n                                    <option value=\"uV\">&micro;V</option>\r\n                                    <option value=\"mV\">mV</option>\r\n                                    <option value=\"V\">V</option>\r\n                                </select>\r\n                            </div>\r\n                            <label className=\"mt-3\">Current Units of Measure</label>\r\n                            <div className=\"form-row\">\r\n                                <select onClick={this.onChangeUnits} className=\"form-control mx-auto\">\r\n                                    <option defaultValue>Select the Current Units of Measure</option>\r\n                                    <option value=\"uA\">&micro;A</option>\r\n                                    <option value=\"mA\">mA</option>\r\n                                    <option value=\"A\">A</option>\r\n                                </select>\r\n                            </div>\r\n                            <label className=\"mt-3\">Temperature Units of Measure</label>\r\n                            <div className=\"form-row\">\r\n                                <select onClick={this.onChangeUnits} className=\"form-control mx-auto\">\r\n                                    <option defaultValue>Select the Temperature Units of Measure</option>\r\n                                    <option value=\"C\">&deg;C</option>\r\n                                    <option value=\"F\">&deg;F</option>\r\n                                    <option value=\"K\">K</option>\r\n                                </select>\r\n                            </div>\r\n                        </CardBoxContainer>\r\n\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>Application Settings</p>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"col text-center mx-auto mt-3\">\r\n                                    <div className=\"form-check\">\r\n                                        <input onClick={this.props.triggerDemoMode} disabled={this.props.boardConnected} id=\"demoModeCheckbox\"\r\n                                            className=\"form-check-input\" type=\"checkbox\"  />\r\n                                        <label className=\"form-check-label\" htmlFor=\"demoModeCheckbox\">\r\n                                            Demo Mode { this.props.demoModeActive ? \" (active)\" : \" (disabled)\" }\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-row\">\r\n                                <div className=\"col text-center mx-auto mt-4\">\r\n                                    <div className=\"form-check\">\r\n                                    <input className=\"form-check-input\" type=\"radio\" name=\"themeRadios\" id=\"darkThemeRadio\" value=\"darkTheme\" defaultChecked\r\n                                        onClick={() => {\r\n                                            document.body.style.background = \"#343E59\"\r\n                                            this.props.changeApplicationTheme(\"dark\")\r\n                                        }} />\r\n                                    <label className=\"form-check-label\" htmlFor=\"darkThemeRadio\">\r\n                                        Dark Theme\r\n                                    </label>\r\n                                </div>\r\n\r\n                                <div className=\"form-check\">\r\n                                    <input className=\"form-check-input\" type=\"radio\" name=\"themeRadios\" id=\"lightThemeRadio\" value=\"lightTheme\"\r\n                                        onClick={() => {\r\n                                            document.body.style.background = \"#e7eff6\"\r\n                                            this.props.changeApplicationTheme(\"light\")\r\n                                        }} />\r\n                                    <label className=\"form-check-label\" htmlFor=\"lightThemeRadio\">\r\n                                        Light Theme\r\n                                    </label>\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                        </CardBoxContainer>\r\n                        \r\n                    </div>\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                    <div className=\"row\">\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")} style={{marginBottom: 10 + \"px\"}}>Connection Parameters</p>\r\n                            <ConnectionSettingsWidget pcm={this.state.pcm}\r\n                                boardConnected={this.props.boardConnected}\r\n                                demoModeActive={this.props.demoModeActive}\r\n                                loading={this.props.loading}\r\n                                liteConnection={this.props.liteConnection}\r\n                                elfPath={this.props.elfPath}\r\n                                onSelectedFreemasterVersion={this.props.onSelectedFreemasterVersion}\r\n                                changeElfPath={this.props.changeElfPath}\r\n                                changeLiteConnection={this.props.changeLiteConnection} />\r\n                        </CardBoxContainer>\r\n\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>Charts Settings</p>\r\n                            <ChartSettingsWidget\r\n                                onToggleAutoScaling={this.props.onToggleAutoScaling}\r\n                                onToggleAnimations={this.props.onToggleAnimations} />\r\n                        </CardBoxContainer>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SystemConfiguration;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           conversions.js\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nexport const microToMili = (value) => value / 1000;\r\nexport const microToNormal = (value) => value / 1000000;\r\n\r\nexport const miliToMicro = (value) => value * 1000;\r\nexport const miliToNormal = (value) => value / 1000;\r\n\r\nexport const normalToMicro = (value) => value * 1000000;\r\nexport const normalToMili = (value) => value * 1000;\r\n\r\nexport const celsiusToFahrenheit = (value) => value * 9/5 + 32;\r\nexport const celsiusToKelvin = (value) => value + 273.15;","// The MIT License (MIT)\r\n\r\n// Copyright (c) 2014 Artem Prigoda\r\n\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n// SOFTWARE.\r\n/* eslint-disable */\r\nvar _Promise = Promise;\r\n\r\nif (typeof _Promise === 'undefined') {\r\n    _Promise = root.Promise;\r\n}\r\n\r\nif (_Promise === undefined) {\r\n    throw 'Promise is not supported! Use latest version node/browser or promise-polyfill';\r\n}\r\n\r\nvar isUndefined = function (value) {\r\n    return value === undefined;\r\n};\r\n\r\nvar isArray = Array.isArray;\r\n\r\nvar isObject = function (value) {\r\n    var type = typeof value;\r\n    return value != null && (type == 'object' || type == 'function');\r\n};\r\n\r\nvar isFunction = function (target) {\r\n    return typeof target === 'function'\r\n};\r\n\r\nvar isString = function (value) {\r\n    return typeof value === 'string';\r\n};\r\n\r\nvar isEmpty = function (value) {\r\n    if (isObject(value)) {\r\n        for (var idx in value) {\r\n            if (value.hasOwnProperty(idx)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    if (isArray(value)) {\r\n        return !value.length;\r\n    }\r\n    return !value;\r\n};\r\n\r\nvar forEach = function (target, callback) {\r\n    if (isArray(target)) {\r\n        return target.map(callback);\r\n    }\r\n    else {\r\n        for (var _key in target) {\r\n            if (target.hasOwnProperty(_key)) {\r\n                callback(target[_key]);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nvar clone = function (value) {\r\n    return JSON.parse(JSON.stringify(value));\r\n};\r\n\r\nvar ERRORS = {\r\n    \"PARSE_ERROR\": {\r\n        \"code\": -32700,\r\n        \"message\": \"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\"\r\n    },\r\n    \"INVALID_REQUEST\": {\r\n        \"code\": -32600,\r\n        \"message\": \"Invalid Request. The JSON sent is not a valid Request object.\"\r\n    },\r\n    \"METHOD_NOT_FOUND\": {\r\n        \"code\": -32601,\r\n        \"message\": \"Method not found. The method does not exist / is not available.\"\r\n    },\r\n    \"INVALID_PARAMS\": {\r\n        \"code\": -32602,\r\n        \"message\": \"Invalid params. Invalid method parameter(s).\"\r\n    },\r\n    \"INTERNAL_ERROR\": {\r\n        \"code\": -32603,\r\n        \"message\": \"Internal error. Internal JSON-RPC error.\"\r\n    }\r\n};\r\n\r\nfunction ServerError(code, message, data) {\r\n    this.message = message || \"\";\r\n    this.code = code || -32000;\r\n\r\n    if (Boolean(data)) {\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nServerError.prototype = new Error();\r\n\r\nvar simple_jsonrpc = function () {\r\n\r\n    var self = this,\r\n        waitingframe = {},\r\n        id = 0,\r\n        dispatcher = {};\r\n\r\n\r\n    function setError(jsonrpcError, exception) {\r\n        var error = clone(jsonrpcError);\r\n        if (!!exception) {\r\n            if (isObject(exception) && exception.hasOwnProperty(\"message\")) {\r\n                error.data = exception.message;\r\n            }\r\n            else if (isString(exception)) {\r\n                error.data = exception;\r\n            }\r\n\r\n            if (exception instanceof ServerError) {\r\n                error = {\r\n                    message: exception.message,\r\n                    code: exception.code\r\n                };\r\n                if (exception.hasOwnProperty('data')) {\r\n                    error.data = exception.data;\r\n                }\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n\r\n    function isPromise(thing) {\r\n        return !!thing && 'function' === typeof thing.then;\r\n    }\r\n\r\n    function isError(message) {\r\n        return !!message.error;\r\n    }\r\n\r\n    function isRequest(message) {\r\n        return !!message.method;\r\n    }\r\n\r\n    function isResponse(message) {\r\n        return message.hasOwnProperty('result') && message.hasOwnProperty('id');\r\n    }\r\n\r\n    function beforeResolve(message) {\r\n        var promises = [];\r\n        if (isArray(message)) {\r\n            forEach(message, function (msg) {\r\n                promises.push(resolver(msg));\r\n            });\r\n        }\r\n        else if (isObject(message)) {\r\n            promises.push(resolver(message));\r\n        }\r\n\r\n        return _Promise.all(promises)\r\n            .then(function (result) {\r\n\r\n                var toStream = [];\r\n                forEach(result, function (r) {\r\n                    if (!isUndefined(r)) {\r\n                        toStream.push(r);\r\n                    }\r\n                });\r\n\r\n                if (toStream.length === 1) {\r\n                    self.toStream(JSON.stringify(toStream[0]));\r\n                }\r\n                else if (toStream.length > 1) {\r\n                    self.toStream(JSON.stringify(toStream));\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    function resolver(message) {\r\n        try {\r\n            if (isError(message)) {\r\n                return rejectRequest(message);\r\n            }\r\n            else if (isResponse(message)) {\r\n                return resolveRequest(message);\r\n            }\r\n            else if (isRequest(message)) {\r\n                return handleRemoteRequest(message);\r\n            }\r\n            else {\r\n                return _Promise.resolve({\r\n                    \"id\": null,\r\n                    \"jsonrpc\": \"2.0\",\r\n                    \"error\": setError(ERRORS.INVALID_REQUEST)\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error('Resolver error:' + e.message, e);\r\n            return _Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    function rejectRequest(error) {\r\n        if (waitingframe.hasOwnProperty(error.id)) {\r\n            waitingframe[error.id].reject(error.error);\r\n        }\r\n        else {\r\n            console.log('Unknown request', error);\r\n        }\r\n    }\r\n\r\n    function resolveRequest(result) {\r\n        if (waitingframe.hasOwnProperty(result.id)) {\r\n            waitingframe[result.id].resolve(result.result);\r\n            delete waitingframe[result.id];\r\n        }\r\n        else {\r\n            console.log('unknown request', result);\r\n        }\r\n    }\r\n\r\n    function handleRemoteRequest(request) {\r\n        console.log(\"handleRemoteRequest -- simple jrpc js\")\r\n        if (dispatcher.hasOwnProperty(request.method)) {\r\n            try {\r\n                var result;\r\n\r\n                if (request.hasOwnProperty('params')) {\r\n                    if (dispatcher[request.method].params == \"pass\") {\r\n                        result = dispatcher[request.method].fn.call(dispatcher, request.params);\r\n                    }\r\n                    else if (isArray(request.params)) {\r\n                        result = dispatcher[request.method].fn.apply(dispatcher, request.params);\r\n                    }\r\n                    else if (isObject(request.params)) {\r\n                        if (dispatcher[request.method].params instanceof Array) {\r\n                            var argsValues = [];\r\n                            dispatcher[request.method].params.forEach(function (arg) {\r\n\r\n                                if (request.params.hasOwnProperty(arg)) {\r\n                                    argsValues.push(request.params[arg]);\r\n                                    delete request.params[arg];\r\n                                }\r\n                                else {\r\n                                    argsValues.push(undefined);\r\n                                }\r\n                            });\r\n\r\n                            if (Object.keys(request.params).length > 0) {\r\n                                return _Promise.resolve({\r\n                                    \"jsonrpc\": \"2.0\",\r\n                                    \"id\": request.id,\r\n                                    \"error\": setError(ERRORS.INVALID_PARAMS, {\r\n                                        message: \"Params: \" + Object.keys(request.params).toString() + \" not used\"\r\n                                    })\r\n                                });\r\n                            }\r\n                            else {\r\n                                result = dispatcher[request.method].fn.apply(dispatcher, argsValues);\r\n                            }\r\n                        }\r\n                        else {\r\n                            return _Promise.resolve({\r\n                                \"jsonrpc\": \"2.0\",\r\n                                \"id\": request.id,\r\n                                \"error\": setError(ERRORS.INVALID_PARAMS, \"Undeclared arguments of the method \" + request.method)\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    result = dispatcher[request.method].fn();\r\n                }\r\n\r\n                if (request.hasOwnProperty('id')) {\r\n                    if (isPromise(result)) {\r\n                        return result.then(function (res) {\r\n                            if (isUndefined(res)) {\r\n                                res = true;\r\n                            }\r\n                            return {\r\n                                \"jsonrpc\": \"2.0\",\r\n                                \"id\": request.id,\r\n                                \"result\": res\r\n                            };\r\n                        })\r\n                            .catch(function (e) {\r\n                                return {\r\n                                    \"jsonrpc\": \"2.0\",\r\n                                    \"id\": request.id,\r\n                                    \"error\": setError(ERRORS.INTERNAL_ERROR, e)\r\n                                };\r\n                            });\r\n                    }\r\n                    else {\r\n\r\n                        if (isUndefined(result)) {\r\n                            result = true;\r\n                        }\r\n\r\n                        return _Promise.resolve({\r\n                            \"jsonrpc\": \"2.0\",\r\n                            \"id\": request.id,\r\n                            \"result\": result\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    return _Promise.resolve(); //nothing, it notification\r\n                }\r\n            }\r\n            catch (e) {\r\n                return _Promise.resolve({\r\n                    \"jsonrpc\": \"2.0\",\r\n                    \"id\": request.id,\r\n                    \"error\": setError(ERRORS.INTERNAL_ERROR, e)\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            return _Promise.resolve({\r\n                \"jsonrpc\": \"2.0\",\r\n                \"id\": request.id,\r\n                \"error\": setError(ERRORS.METHOD_NOT_FOUND, {\r\n                    message: request.method\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    function notification(method, params) {\r\n        var message = {\r\n            \"jsonrpc\": \"2.0\",\r\n            \"method\": method,\r\n            \"params\": params\r\n        };\r\n\r\n        if (isObject(params) && !isEmpty(params)) {\r\n            message.params = params;\r\n        }\r\n\r\n        return message;\r\n    }\r\n\r\n    function call(method, params) {\r\n        id += 1;\r\n        var message = {\r\n            \"jsonrpc\": \"2.0\",\r\n            \"method\": method,\r\n            \"id\": id\r\n        };\r\n\r\n        if (isObject(params) && !isEmpty(params)) {\r\n            message.params = params;\r\n        }\r\n\r\n        return {\r\n            promise: new _Promise(function (resolve, reject) {\r\n                waitingframe[id.toString()] = {\r\n                    resolve: resolve,\r\n                    reject: reject\r\n                };\r\n            }),\r\n            message: message\r\n        };\r\n    }\r\n\r\n    self.toStream = function (a) {\r\n        console.log('Need define the toStream method before use');\r\n        console.log(arguments);\r\n    };\r\n\r\n    self.dispatch = function (functionName, paramsNameFn, fn) {\r\n\r\n        if (isString(functionName) && paramsNameFn == \"pass\" && isFunction(fn)) {\r\n            dispatcher[functionName] = {\r\n                fn: fn,\r\n                params: paramsNameFn\r\n            };\r\n        }\r\n        else if (isString(functionName) && isArray(paramsNameFn) && isFunction(fn)) {\r\n            dispatcher[functionName] = {\r\n                fn: fn,\r\n                params: paramsNameFn\r\n            };\r\n        }\r\n        else if (isString(functionName) && isFunction(paramsNameFn) && isUndefined(fn)) {\r\n            dispatcher[functionName] = {\r\n                fn: paramsNameFn,\r\n                params: null\r\n            };\r\n        }\r\n        else {\r\n            throw new Error('Missing required argument: functionName - string, paramsNameFn - string or function');\r\n        }\r\n    };\r\n\r\n    self.on = self.dispatch;\r\n\r\n    self.off = function (functionName) {\r\n      delete dispatcher[functionName];\r\n    };\r\n\r\n    self.call = function (method, params) {\r\n        var _call = call(method, params);\r\n        self.toStream(JSON.stringify(_call.message));\r\n        return _call.promise;\r\n    };\r\n\r\n    self.notification = function (method, params) {\r\n        self.toStream(JSON.stringify(notification(method, params)));\r\n    };\r\n\r\n    self.batch = function (requests) {\r\n        var promises = [];\r\n        var message = [];\r\n\r\n        forEach(requests, function (req) {\r\n            if (req.hasOwnProperty('call')) {\r\n                var _call = call(req.call.method, req.call.params);\r\n                message.push(_call.message);\r\n                //TODO(jershell): batch reject if one promise reject, so catch reject and resolve error as result;\r\n                promises.push(_call.promise.then(function (res) {\r\n                    return res;\r\n                }, function (err) {\r\n                    return err;\r\n                }));\r\n            }\r\n            else if (req.hasOwnProperty('notification')) {\r\n                message.push(notification(req.notification.method, req.notification.params));\r\n            }\r\n        });\r\n\r\n        self.toStream(JSON.stringify(message));\r\n        return _Promise.all(promises);\r\n    };\r\n\r\n    self.messageHandler = function (rawMessage) {\r\n        try {\r\n            var message = JSON.parse(rawMessage);\r\n            return beforeResolve(message);\r\n        }\r\n        catch (e) {\r\n            console.log(\"Error in messageHandler(): \", e);\r\n            self.toStream(JSON.stringify({\r\n                \"id\": null,\r\n                \"jsonrpc\": \"2.0\",\r\n                \"error\": ERRORS.PARSE_ERROR\r\n            }));\r\n            return _Promise.reject(e);\r\n        }\r\n    };\r\n\r\n    self.customException = function (code, message, data) {\r\n        return new ServerError(code, message, data);\r\n    };\r\n};\r\n\r\nexport default simple_jsonrpc;","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2018-2019 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           freemaster-client.js\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\n\r\n/**\r\n * @typedef {Object} CommPortInfo\r\n *\r\n * Communication port information.\r\n *\r\n * @property {string} name              Communication port friendly name\r\n * @property {string} description       Communication port description\r\n * @property {string} connection_string Connection string\r\n * @property {string} elf               Elf file path\r\n */\r\n\r\n/**\r\n * @typedef {Object} BoardInfo\r\n *\r\n * Detected board information.\r\n *\r\n * @property {number} protVer      Protocol version\r\n * @property {number} cfgFlags     Configuration flags\r\n * @property {number} dataBusWdt   Data bus width\r\n * @property {number} globVerMajor Major version\r\n * @property {number} globVerMinor Minor version\r\n * @property {number} cmdBuffSize  Command buffer size\r\n * @property {number} recBuffSize  Receive buffer size\r\n * @property {number} recTimeBase  Recirder time base\r\n * @property {string} descr        Description\r\n */\r\n\r\n/**\r\n * @typedef {Object} SymbolInfo\r\n *\r\n * Symbol information.\r\n *\r\n * @property {string} name Symbol name\r\n * @property {number} addr Symbol address\r\n * @property {number} size Symbol size\r\n * @property {string} type Symbol type\r\n */\r\n\r\n/**\r\n * @typedef {Object} VariableInfo\r\n *\r\n * Variable information.\r\n *\r\n * @property {string} name    Variable name\r\n * @property {number} addr    Variable address\r\n * @property {string} type    Variable type (int, uint, fract, ufract, float, or double)\r\n * @property {number} size    Variable size (1, 2, 4, or 8)\r\n * @property {number} [shift] Number of shift positions (integer variable)\r\n * @property {number} [mask]  And mask applied on integer variable\r\n * @property {number} q_n     Number of bits designating fractional portion of fractional variable\r\n * @property {number} q_m     Number of bits designating integer portion of fractional variable\r\n */\r\n\r\n/**\r\n * @typedef {Object} RecorderLimits\r\n *\r\n * Recorder limits.\r\n *\r\n * @property {number} baseRate_ns   Base time at which recorder operates in nanoseconds (0 when unknown or not deterministic)\r\n * @property {number} buffSize      Total recorder memory size\r\n * @property {number} recStructSize Overhead structure size (protcol version > 4.0)\r\n * @property {number} varStructSize Per-variable overhead structure size (protcol version > 4.0)\r\n */\r\n\r\n/**\r\n * @typedef {Object} RecorderConfig\r\n *\r\n * Recorder configuration.\r\n *\r\n * @property {number} pointsTotal      Total number of recorded points per variable\r\n * @property {number} pointsPreTrigger Number of recorded points before trigger\r\n * @property {number} timeDiv          Time-base multiplier\r\n */\r\n\r\n/**\r\n * @typedef {Object} TriggerVariable\r\n *\r\n * Recorder variable information.\r\n *\r\n * @property {string} name    Variable name\r\n * @property {number} trgType Trigger type\r\n *\r\n * | Mask | Description                            |\r\n * | :--- | :--------------------------------------|\r\n * | 0x04 | trigger-only                           |\r\n * | 0x10 | trigger on rising edge _/              |\r\n * | 0x20 | trigger on falling edge \\_             |\r\n * | 0x40 | 0=normal edge trigger, 1=level trigger |\r\n * | 0x80 | use variable threshold                 |\r\n * @property {number} trgThr Trigger trashold\r\n */\r\n\r\n/* eslint-disable */\r\nimport simple_jsonrpc from \"./simple-jsonrpc-js\"\r\n\r\nvar root = {}\r\nroot.simple_jsonrpc = simple_jsonrpc\r\nroot.WebSocket = WebSocket\r\n\r\n\r\nvar PCM = function(url, onSocketOpen, onSocketClose, onSocketError) {\r\n\r\n    var jrpc = new root.simple_jsonrpc();\r\n    var socket = new root.WebSocket(\"ws://\" + url);\r\n\r\n    this.OnServerError = console.log;\r\n    this.OnSocketOpen = onSocketOpen || console.log;\r\n    this.OnSocketClose = onSocketClose || console.log;\r\n    this.OnSocketError = onSocketError || console.log;\r\n\r\n    jrpc.toStream = function(_msg) {\r\n        socket.send(_msg);\r\n    };\r\n\r\n    socket.onopen = function(event) {\r\n        this.OnSocketOpen(event);\r\n    }.bind(this);\r\n\r\n    socket.onclose = function(event) {\r\n        this.OnSocketClose(event);\r\n    }.bind(this);\r\n\r\n    socket.onerror = function(event) {\r\n        this.OnSocketError(event);\r\n    }.bind(this);\r\n\r\n    socket.onmessage = function(event) {\r\n        jrpc.messageHandler(event.data);\r\n    };\r\n\r\n    function SendRequest(method, args) {\r\n        return new Promise((resolve, reject) => {\r\n            jrpc.call(method, args)\r\n                .then((response) => {\r\n                    if(response.success)\r\n                        resolve(response);\r\n                    else\r\n                        reject(response.error);\r\n                 })\r\n                 .catch((error) => {\r\n                     this.OnServerError(error);\r\n                 });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Requests Freemaster Lite service version.\r\n     *\r\n     * @example\r\n     * pcm.GetAppVersion().then(response => console.log(\"App version \", response.data));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing the version.\r\n     */\r\n    this.GetAppVersion = function() {\r\n        return SendRequest.call(this, 'GetAppVersion');\r\n    };\r\n\r\n    /**\r\n     * Requests communication port name (defined in project file) by index.\r\n     * @see {@link PCM#GetCommPortInfo GetCommPortInfo}\r\n     *\r\n     * @example\r\n     * let index = 0;\r\n     * do {\r\n     *     try {\r\n     *         let response = await pcm.EnumCommPorts(index);\r\n     *         console.log(response.data);\r\n     *         index = index + 1;\r\n     *     } catch (err) {\r\n     *         break;\r\n     *     }\r\n     * } while (true);\r\n     *\r\n     * @param   {number} index Communication port index.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing the connection friendly name.\r\n     */\r\n    this.EnumCommPorts = function(index) {\r\n        return SendRequest.call(this, 'EnumCommPorts', [index]);\r\n    };\r\n\r\n    /**\r\n     * Requests communication port information (defined in project file).\r\n     * @see {@link PCM#EnumCommPorts EnumCommPorts}\r\n     *\r\n     * @example\r\n     * pcm.EnumCommPorts(0).then(response => {\r\n     *     pcm.GetCommPortInfo(response.data).then(response => {\r\n     *         console.log(response.data);\r\n     *     });\r\n     * });\r\n     *\r\n     * @param   {string} name Communiation port friendly name returned by {@link PCM#EnumCommPorts EnumCommPorts}\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link CommPortInfo CommPortInfo}.\r\n     */\r\n    this.GetCommPortInfo = function(name) {\r\n        return SendRequest.call(this, 'GetCommPortInfo', [name]);\r\n    };\r\n\r\n    /**\r\n     * Starts communication using connection friendly name.\r\n     *\r\n     * @example\r\n     * pcm.StartComm(\"PortX\").then(() => console.log(\"Communication port open.\"));\r\n     *\r\n     * @param   {string} name Connection friendly name (defined in project file).\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.StartComm = function(name) {\r\n        return SendRequest.call(this, 'StartComm', [name]);\r\n    };\r\n\r\n    /**\r\n     * Stops communication.\r\n     *\r\n     * @example\r\n     * pcm.StopComm().then(() => console.log(\"Communication port closed.\"));\r\n     *\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.StopComm = function() {\r\n        return SendRequest.call(this, 'StopComm');\r\n    };\r\n\r\n    /**\r\n     * Checks if communication port is open.\r\n     *\r\n     * @example\r\n     * pcm.IsCommPortOpen().then(response => console.log(\"Is port open ? \", response.data));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type bool.\r\n     */\r\n    this.IsCommPortOpen = function() {\r\n        return SendRequest.call(this, 'IsCommPortOpen');\r\n    };\r\n\r\n    /**\r\n     * Checks if the board was detected.\r\n     *\r\n     * @example\r\n     * pcm.IsBoardDetected().then(response => console.log(\"Is board detected ? \", response.data));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type bool.\r\n     */\r\n    this.IsBoardDetected = function() {\r\n        return SendRequest.call(this, 'IsBoardDetected');\r\n    };\r\n\r\n    /**\r\n     * Requests detected board information.\r\n     *\r\n     * @example\r\n     * pcm.GetDetectedBoardInfo().then(response => console.log(\"Board information: \", response.data));\r\n     *\r\n     * @deprecated Since protocol version 4.0\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link BoardInfo BoardInfo} representing board information.\r\n     */\r\n    this.GetDetectedBoardInfo = function() {\r\n        return SendRequest.call(this, 'GetDetectedBoardInfo');\r\n    };\r\n\r\n    /**\r\n     * Requests configuration parameter of type uint8.\r\n     *\r\n     * @example\r\n     * pcm.GetConfigParamU8(\"F1\").then(response => console.log(\"F1: \", response.data));\r\n     *\r\n     * @param   {string} name Parameter name\r\n     *\r\n     * | Name | Description                                   |\r\n     * | :--- | :---------------------------------------------|\r\n     * | F1   | Flags                                         |\r\n     * | RC   | Number of recorders implemented on target     |\r\n     * | SC   | Number of oscilloscopes implemented on target |\r\n     * | PC   | Number of pipes implemented on target         |\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing parameter value.\r\n     */\r\n    this.GetConfigParamU8 = function(name) {\r\n        return SendRequest.call(this, 'GetConfigParamU8', [name]);\r\n    };\r\n\r\n    /**\r\n     * Requests confiugration parameter encoded as ULEB128.\r\n     *\r\n     * @example\r\n     * pcm.GetConfigParamULEB(\"MTU\").then(response => console.log(\"MTU: \", response.data));\r\n     *\r\n     * @param   {string} name Parameter name\r\n     *\r\n     * | Name | Description                                                                       |\r\n     * | :--- | :-------------------------------------------------------------------------------- |\r\n     * | MTU  | Size of an internal communication buffer for handling command and response frames |\r\n     * | BA   | Base address used by optimized memory read/write commands                         |\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing parameter value.\r\n     */\r\n    this.GetConfigParamULEB = function(name) {\r\n        return SendRequest.call(this, 'GetConfigParamULEB', [name]);\r\n    };\r\n\r\n    /**\r\n     * Requests confiugration parameter of type string.\r\n     *\r\n     * | Name | Description             |\r\n     * | :--- | :-----------------------|\r\n     * | VS   | Version string          |\r\n     * | NM   | Application name string |\r\n     * | DS   | Description string      |\r\n     * | BD   | Build date/time string  |\r\n     *\r\n     * @example\r\n     * pcm.GetConfigParamString(\"VS\", 10).then(response => console.log(\"VS: \", response.data));\r\n     *\r\n     * @param   {string} name  Parameter name\r\n     * @param   {number} [len] String byte length, if missing will be set to the service max buffer size (256)\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing parameter value.\r\n     */\r\n    this.GetConfigParamString = function(name, len) {\r\n        return SendRequest.call(this, 'GetConfigParamString', [name, len]);\r\n    };\r\n\r\n    /**\r\n     * Reads a signed integer value from a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadIntVariable(0x20050080, 2).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Integer size, can be 1, 2, 4, or 8.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the read value.\r\n     */\r\n    this.ReadIntVariable = function(addr, size) {\r\n        return SendRequest.call(this, 'ReadIntVariable', [addr, size]);\r\n    };\r\n\r\n    /**\r\n     * Reads an unsigned integer value from a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadUIntVariable('var16', 4).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Integer size, can be 1, 2, 4, or 8.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the read value.\r\n     */\r\n    this.ReadUIntVariable = function(addr, size) {\r\n        return SendRequest.call(this, 'ReadUIntVariable', [addr, size]);\r\n    };\r\n\r\n    /**\r\n     * Reads a float value from a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadFloatVariable('varFLT').then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the read value.\r\n     */\r\n    this.ReadFloatVariable = function(addr) {\r\n        return SendRequest.call(this, 'ReadFloatVariable', [addr]);\r\n    };\r\n\r\n    /**\r\n     * Reads a double value from a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadDoubleVariable('varDBL').then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the read value.\r\n     */\r\n    this.ReadDoubleVariable = function(addr) {\r\n        return SendRequest.call(this, 'ReadDoubleVariable', [addr]);\r\n    };\r\n\r\n    /**\r\n     * Writes a signed integer value to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteIntVariable(0x20050080, 2, 10).then(() => console.log('Value written.'));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Integer size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data   Integer value to be written.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteIntVariable = function(addr, size, data) {\r\n        return SendRequest.call(this, 'WriteIntVariable', [addr, size, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes an unsigned integer value to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteUIntVariable(\"var16\", 2, 100).then(() => console.log('Value written.'));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Integer size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data   Integer value to be written.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteUIntVariable = function(addr, size, data) {\r\n        return SendRequest.call(this, 'WriteUIntVariable', [addr, size, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes a float value to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteFloatVariable(\"varFLT\", 10.0).then(() => console.log('Value written.'));\r\n     *\r\n     * @param   {number|string} addr Address value or symbol name.\r\n     * @param   {Array<number>} data Float value to be written.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteFloatVariable = function(addr, data) {\r\n        return SendRequest.call(this, 'WriteFloatVariable', [addr, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes a double value to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteDoubleVariable(\"varDBL\", 100.0).then(() => console.log('Value written.'));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {Array<number>} data   Double value to be written.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteDoubleVariable = function(addr, data) {\r\n        return SendRequest.call(this, 'WriteDoubleVariable', [addr, data]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of signed integers from a memory location.\r\n     *\r\n     * @example\r\n     * // read 20, 2 byte long, signed integers from address 0x20050080\r\n     * pcm.ReadUIntArray(0x20050080, 20, 2).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Number of elements.\r\n     * @param   {number}        elSize Element size, can be 1, 2, 4, or 8.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.ReadIntArray = function(addr, size, elSize) {\r\n        return SendRequest.call(this, 'ReadIntArray', [addr, size, elSize]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of unsigned integers from a memory location.\r\n     *\r\n     * @example\r\n     * // read 10, 4 byte long, unsigned integers from the address given by the symbol 'arr16'\r\n     * pcm.ReadIntArray('arr16', 10, 4).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Number of elements.\r\n     * @param   {number}        elSize Element size, can be 1, 2, 4, or 8.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.ReadUIntArray = function(addr, size, elSize) {\r\n        return SendRequest.call(this, 'ReadUIntArray', [addr, size, elSize]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of floats from a memory location.\r\n     *\r\n     * @example\r\n     * // read 5 floats from the address given by the symbol 'arrFLT'\r\n     * pcm.ReadFloatArray('arrFLT', 5).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Number of elements.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.ReadFloatArray = function(addr, size) {\r\n        return SendRequest.call(this, 'ReadFloatArray', [addr, size]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of doubles from a memory location.\r\n     *\r\n     * @example\r\n     * // read 5 doubles from the address given by the symbol 'arrDBL'\r\n     * pcm.ReadDoubleArray('arrDBL', 5).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Number of elements.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.ReadDoubleArray = function(addr, size) {\r\n        return SendRequest.call(this, 'ReadDoubleArray', [addr, size]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of signed integers to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteIntArray(0x20050080, 2, [1, 2, 3, 4, 5]).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        elSize Element size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data   Array of integers to be written.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.WriteIntArray = function(addr, elSize, data) {\r\n        return SendRequest.call(this, 'WriteIntArray', [addr, elSize, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of unsigned integers to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteUIntArray('arr16', 4, [100, 1000, 10000, 100000, 1000000]).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        elSize Element size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data   Array of integers to be written.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.WriteUIntArray = function(addr, elSize, data) {\r\n        return SendRequest.call(this, 'WriteUIntArray', [addr, elSize, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of floats to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadFloatArray('arrFLT', [1.0, 2.0, 3.0, 4.0, 5.0]).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        data   Array of floats to be written.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.WriteFloatArray = function(addr, data) {\r\n        return SendRequest.call(this, 'WriteFloatArray', [addr, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of doubles to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteDoubleArray('arrDBL', [1.0, 2.0, 3.0, 4.0, 5.0]).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Array of doubles to be written.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.WriteDoubleArray = function(addr, data) {\r\n        return SendRequest.call(this, 'WriteDoubleArray', [addr, data]);\r\n    };\r\n\r\n    /**\r\n     * Sends the command to read symbols from the elf file associated with the current connection (defined in project file).\r\n     * @see {@link PCM#EnumSymbols EnumSymbols}\r\n     *\r\n     * @example\r\n     * pcm.ReadELF().then(response => console.log(response.data.count + \" symbols extracted from ELF file.\"));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain the number of extracted symbols.\r\n     */\r\n    this.ReadELF = function(elfFile) {\r\n        return SendRequest.call(this, 'ReadELF', [elfFile]);\r\n    };\r\n\r\n    /**\r\n     * Sends the command to read read symbols from the TSA table from the connected target.\r\n     * @see {@link PCM#EnumSymbols EnumSymbols}\r\n     *\r\n     * @example\r\n     * pcm.ReadTSA().then(response => console.log(response.data.count + \" symbols extracted from TSA table.\"));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain the number of extracted symbols.\r\n     */\r\n    this.ReadTSA = function() {\r\n        return SendRequest.call(this, 'ReadTSA');\r\n    };\r\n\r\n    /**\r\n     * Requests symbol (extracted from ELF file or TSA table) name by index.\r\n     * @see {@link PCM#ReadELF ReadELF}\r\n     * @see {@link PCM#ReadTSA ReadTSA}\r\n     * @see {@link PCM#GetSymbolInfo GetSymbolInfo}\r\n     *\r\n     * @example\r\n     * let index = 0;\r\n     * do {\r\n     *     try {\r\n     *         let response = await pcm.EnumSymbols(index);\r\n     *         console.log(response.data);\r\n     *         index = index + 1;\r\n     *     } catch (err) {\r\n     *         break;\r\n     *     }\r\n     * } while (true);\r\n     *\r\n     * @param   {number} index Symbol index.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing the symbol name.\r\n     */\r\n    this.EnumSymbols = function(index) {\r\n        return SendRequest.call(this, 'EnumSymbols', [index]);\r\n    };\r\n\r\n    /**\r\n     * Requests symbol information.\r\n     * @see {@link PCM#EnumSymbols EnumSymbols}\r\n     *\r\n     * @example\r\n     * pcm.EnumSymbols(0).then(response => {\r\n     *     pcm.GetSymbolInfo(response.data).then(response => {\r\n     *         console.log(response.data);\r\n     *     });\r\n     * });\r\n     *\r\n     * @param   {string} name Symbol name returned by {@link PCM#EnumSymbols EnumSymbols}\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link SymbolInfo SymbolInfo}.\r\n     */\r\n    this.GetSymbolInfo = function(name) {\r\n        return SendRequest.call(this, 'GetSymbolInfo', [name]);\r\n    };\r\n\r\n    /**\r\n     * Requests variable name by index.\r\n     * @see {@link PCM#DefineVariable DefineVariable}\r\n     * @see {@link PCM#GetVariableInfo GetVariableInfo}\r\n     *\r\n     * @example\r\n     * let index = 0;\r\n     * do {\r\n     *     try {\r\n     *     let response = await pcm.EnumVariables(index);\r\n     *     console.log(response.data);\r\n     *     index = index + 1;\r\n     *     } catch (err) {\r\n     *         break;\r\n     *     }\r\n     * } while (true);\r\n     *\r\n     * @param   {number} index Variable index.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing the variable name.\r\n     */\r\n    this.EnumVariables = function(index) {\r\n        return SendRequest.call(this, 'EnumVariables', [index]);\r\n    };\r\n\r\n    /**\r\n     * Requests variable information.\r\n     * @see {@link PCM#DefineVariable DefineVariable}\r\n     *\r\n     * @example\r\n     * pcm.EnumVariables(0).then(response => {\r\n     *     pcm.GetVariableInfo(response.data).then(response => {\r\n     *         console.log(response.data);\r\n     *     });\r\n     * });\r\n     *\r\n     * @param   {string} name Variable name.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link VariableInfo VariableInfo}.\r\n     */\r\n    this.GetVariableInfo = function(name) {\r\n        return SendRequest.call(this, 'GetVariableInfo', [name]);\r\n    };\r\n\r\n    /**\r\n     * Defines a variable.\r\n     *\r\n     * @example\r\n     * let variable = { name: \"var16\", addr: 0x20050080, type: \"uint\", size: 4 }\r\n     * pcm.DefineVariable(variable).then(() => console.log(\"Variable successfully defined.\"));\r\n     *\r\n     * @param   {VariableInfo} variable Variable information\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.DefineVariable = function(variable) {\r\n        return SendRequest.call(this, 'DefineVariable', [variable]);\r\n    };\r\n\r\n    /**\r\n     * Delete an user defined variable (except those defined in project file).\r\n     *\r\n     * @example\r\n     * pcm.DeleteVariable(\"var16\").then(() => console.log(\"Variale deleted.\"));\r\n     *\r\n     * @param   {string} name Variable name.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.DeleteVariable = function(name) {\r\n        return SendRequest.call(this, 'DeleteVariable', [name]);\r\n    };\r\n\r\n    /**\r\n     * Deletes all user defined variables (except those defined in project file).\r\n     *\r\n     * @example\r\n     * pcm.DeleteAllScriptVariables().then(() => console.log(\"Script variales deleted.\"));\r\n     *\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.DeleteAllScriptVariables = function() {\r\n        return SendRequest.call(this, 'DeleteAllScriptVariables');\r\n    };\r\n\r\n    /**\r\n     * Reads variable value according to the predefined variable information.\r\n     * @see {@link PCM#DefineVariable DefineVariable}\r\n     *\r\n     * @example\r\n     * pcm.ReadVariable(\"var16\").then(response => console.log(response.data));\r\n     *\r\n     * @param   {string} name Variable name.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing variable value.\r\n     */\r\n    this.ReadVariable = function(name) {\r\n        return SendRequest.call(this, 'ReadVariable', [name]);\r\n    };\r\n\r\n    /**\r\n     * Writes a variable value according to the predefined variable information.\r\n     * @see {@link PCM#DefineVariable DefineVariable}\r\n     *\r\n     * @example\r\n     * pcm.WriteVariable(\"var16\", 255).then(() => console.log(\"Value successfully written.\"));\r\n     *\r\n     * @param   {string} name Variable name.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteVariable = function(name, value) {\r\n        return SendRequest.call(this, 'WriteVariable', [name, value]);\r\n    };\r\n\r\n    /**\r\n     * Setups an oscilloscope with a specific ID.\r\n     *\r\n     * Notes:\r\n     * * Scope ID should be in the target supported range (defined in the embedded application).\r\n     * * All the variables should be defiend prior to scope definition.\r\n     * * Older protocol version (< 4.0) support only one scope instance.\r\n     *\r\n     * @see {@link PCM#GetOscilloscopeData GetOscilloscopeData}\r\n     *\r\n     * @example\r\n     * let id = 0;\r\n     * let vars = ['myVAr1', 'myVar2', 'myVar3'];\r\n     * pcm.SetupOscilloscope(id, vars).then(() => console.log(\"Scope was setup successfully.\"));\r\n     *\r\n     * @param   {number}        id   Oscilloscope ID.\r\n     * @param   {Array<string>} vars Oscilloscope variables names.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.SetupOscilloscope = function(id, vars) {\r\n        return SendRequest.call(this, 'SetupOscilloscope', [id, vars]);\r\n    };\r\n\r\n    /**\r\n     * Requests oscilloscope data.\r\n     *\r\n     * The values will be returned in the format defined by each variable.\r\n     *\r\n     * @see {@link PCM#SetupOscilloscope SetupOscilloscope}\r\n     *\r\n     * @example\r\n     * let id = 0;\r\n     * let vars = ['myVAr1', 'myVar2', 'myVar3'];\r\n     * pcm.SetupOscilloscope(id, vars).then(() => {\r\n     *     pcm.GetOscilloscopeData(id).then(response => console.log(response.data));\r\n     * });\r\n     *\r\n     * @param   {number} id Scope ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type array of numbers (variables corresponding values in the defined order).\r\n     */\r\n    this.GetOscilloscopeData = function(id) {\r\n        return SendRequest.call(this, 'GetOscilloscopeData', [id]);\r\n    };\r\n\r\n    /**\r\n     * Requests recorder limits.\r\n     *\r\n     * @example\r\n     * let id = 0;\r\n     * pcm.GetRecorderLimits(id).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link RecorderLimits RecorderLimits}.\r\n     */\r\n    this.GetRecorderLimits = function(id) {\r\n        return SendRequest.call(this, 'GetRecorderLimits', [id]);\r\n    };\r\n\r\n    /**\r\n     * Setups a recorder with a specific ID.\r\n     *\r\n     * Notes:\r\n     * * Recorder ID should be in the target supported range (defined in the embedded application).\r\n     * * All the variables should be defiend prior to recorder definitions.\r\n     * * Older protocol version (< 4.0) support only one recorder instance.\r\n     *\r\n     * @example\r\n     * let id = 0;\r\n     * let config = {\r\n     *     pointsTotal: 100,\r\n     *     pointsPreTrigger: 50,\r\n     *     timeDiv: 1\r\n     * };\r\n     * let recVars = ['myVAr1', 'myVar2', 'myVar3'];\r\n     * let trgVars = [{ name: 'myVar2', trgType: 0x11, trgThr: 2000 }];\r\n     * pcm.SetupRecorder(id, config, recVars, trgVars).then(() => console.log(\"Recorder was setup successfully.\"));\r\n     *\r\n     * @param   {number}                 id      Recorder ID.\r\n     * @param   {RecorderConfig}         config  Recorder configuartion.\r\n     * @param   {Array<string>}          recVars Recorded variables.\r\n     * @param   {Array<TriggerVariable>} trgVars Trigger variables.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.SetupRecorder = function(id, config, recVars, trgVars) {\r\n        return SendRequest.call(this, 'SetupRecorder', [id, config, recVars, trgVars]);\r\n    };\r\n\r\n    /**\r\n     * Starts a recorder.\r\n     * @see {@link PCM#SetupRecorder SetupRecorder}\r\n     *\r\n     * @example\r\n     * pcm.StartRecorder(id).then(() => console.log(\"Recorder started\"));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.StartRecorder = function(id) {\r\n        return SendRequest.call(this, 'StartRecorder', [id]);\r\n    };\r\n\r\n    /**\r\n     * Stops a recorder.\r\n     * @see {@link PCM#SetupRecorder SetupRecorder}\r\n     * @see {@link PCM#StartRecorder StartRecorder}\r\n     *\r\n     * @example\r\n     * pcm.StopRecorder(id).then(() => console.log(\"Recorder stoped\"));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.StopRecorder = function(id) {\r\n        return SendRequest.call(this, 'StopRecorder', [id]);\r\n    };\r\n\r\n    /**\r\n     * Requests recorder status.\r\n     * @see {@link PCM#SetupRecorder SetupRecorder}\r\n     * @see {@link PCM#StartRecorder StartRecorder}\r\n     *\r\n     * @example\r\n     * pcm.GetRecorderStatus(id).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     *\r\n     * | Code | Status                           |\r\n     * | :--- | :------------------------------- |\r\n     * | 0x00 | not configured                   |\r\n     * | 0x01 | configured, stoped, no data      |\r\n     * | 0x02 | running                          |\r\n     * | 0x04 | stopped, not enough data sampled |\r\n     * | 0x05 | stopped, data ready              |\r\n     */\r\n    this.GetRecorderStatus = function(id) {\r\n        return SendRequest.call(this, 'GetRecorderStatus', [id]);\r\n    };\r\n\r\n    /**\r\n     * Gets recorded data.\r\n     *\r\n     * @example\r\n     * pcm.GetRecorderData(id).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type array of arrays of numbers.\r\n     */\r\n    this.GetRecorderData = function(id) {\r\n        return SendRequest.call(this, 'GetRecorderData', [id]);\r\n    };\r\n\r\n    /**\r\n     * Opens a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeOpen(0, 100, 100).then(() => console.log(\"Pipe open.\"));\r\n     *\r\n     * @param   {number} port         Pipe ID.\r\n     * @param   {number} txBufferSize Send buffer size.\r\n     * @param   {number} rxBufferSize Receive buffer size.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeOpen = function(port, txBufferSize, rxBufferSize) {\r\n        return SendRequest.call(this, 'PipeOpen', [port, txBufferSize, rxBufferSize]);\r\n    };\r\n\r\n    /**\r\n     * Closes a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeClose(0).then(() => console.log(\"Pipe closed.\"));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeClose = function(port) {\r\n        return SendRequest.call(this, 'PipeClose', [port]);\r\n    };\r\n\r\n    /**\r\n     * Flushes a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeFlush(0).then(() => console.log(\"Pipe flushed.\"));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeFlush = function(port, timeout) {\r\n        return SendRequest.call(this, 'PipeFlush', [port, timeout]);\r\n    };\r\n\r\n    /**\r\n     * Sets pipes default receive mode.\r\n     *\r\n     * @example\r\n     * pcm.PipeSetDefaultRxMode(false, 100).then(() => console.log(\"Default RX mode updated.\"));\r\n     *\r\n     * @param   {boolean} rxAllOrNothing Flag specifying whether the data should be read all at once.\r\n     * @param   {number}  rxTimeout_ms   Read timeout in milliseconds.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeSetDefaultRxMode = function(rxAllOrNothing, rxTimeout_ms) {\r\n        return SendRequest.call(this, 'PipeSetDefaultRxMode', [rxAllOrNothing, rxTimeout_ms]);\r\n    };\r\n\r\n    /**\r\n     * Sets pipes default string mode.\r\n     *\r\n     * @example\r\n     * pcm.PipeSetDefaultStringMode(false).then(() => console.log(\"Default string mode updated.\"));\r\n     *\r\n     * @param   {boolean} unicode Flag specifying whether the string are using unicode encoding.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeSetDefaultStringMode = function(unicode) {\r\n        return SendRequest.call(this, 'PipeSetDefaultStringMode', [unicode]);\r\n    };\r\n\r\n    /**\r\n     * Requests the number of bytes pending on the receive buffer.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetRxBytes(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetRxBytes = function(port) {\r\n        return SendRequest.call(this, 'PipeGetRxBytes', [port]);\r\n    };\r\n\r\n    /**\r\n     * Requests the number of bytes pending on the send buffer.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetTxBytes(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetTxBytes = function(port) {\r\n        return SendRequest.call(this, 'PipeGetTxBytes', [port]);\r\n    };\r\n\r\n    /**\r\n     * Requests the number of free bytes from the send buffer.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetTxFree(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Port number that identified the pipe.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetTxFree = function(port) {\r\n        return SendRequest.call(this, 'PipeGetTxFree', [port]);\r\n    };\r\n\r\n    /**\r\n     * Requests the receive buffer size of a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetRxBufferSize(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetRxBufferSize = function(port) {\r\n        return SendRequest.call(this, 'PipeGetRxBufferSize', [port]);\r\n    };\r\n\r\n    /**\r\n     * Requests the send buffer size of a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetTxBufferSize(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetTxBufferSize = function(port) {\r\n        return SendRequest.call(this, 'PipeGetTxBufferSize', [port]);\r\n    };\r\n\r\n    /**\r\n     * Writes a string to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteString(0, \"Hello world!\", false, false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  port         Pipe ID.\r\n     * @param   {string}  str          String to be written to the pipe.\r\n     * @param   {boolean} allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @param   {boolean} unicode      Flag specifying whether the string is unicode encoded.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen characters.\r\n     */\r\n    this.PipeWriteString = function(port, str, allOrNothing, unicode) {\r\n        return SendRequest.call(this, 'PipeWriteString', [port, str, allOrNothing, unicode]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of signed integers to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteIntArray(0, 2, [1, 2, 3, 4, 5], false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}        port         Pipe ID.\r\n     * @param   {number}        elSize       Element size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data         Array of integers to be written.\r\n     * @param   {boolean}       allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.PipeWriteIntArray = function(port, elSize, data, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeWriteIntArray', [port, elSize, data, allOrNothing]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of unsigned integers to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteUIntArray(0, 4, [100, 200, 300, 400, 500], false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}        port         Pipe ID.\r\n     * @param   {number}        elSize       Element size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data         Array of integers to be written.\r\n     * @param   {boolean}       allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.PipeWriteUIntArray = function(port, elSize, data, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeWriteUIntArray', [port, elSize, data, allOrNothing]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of floats to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteFloatArray(0, [1.0, 2.0, 3.0, 4.0, 5.0], false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}        port         Pipe ID.\r\n     * @param   {Array<number>} data         Array of integers to be written.\r\n     * @param   {boolean}       allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.PipeWriteFloatArray = function(port, data, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeWriteFloatArray', [port, data, allOrNothing]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of doubles to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteDoubleArray(0, [10.0, 20.0, 30.0, 40.0, 50.0], false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}        port         Pipe ID.\r\n     * @param   {Array<number>} data         Array of integers to be written.\r\n     * @param   {boolean}       allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.PipeWriteDoubleArray = function(port, data, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeWriteDoubleArray', [port, data, allOrNothing]);\r\n    };\r\n\r\n   /**\r\n    * Reads a string from a pipe.\r\n    *\r\n    * @example\r\n    * pcm.PipeReadString(0, 100, 512, false, false).then(response => console.log(response.data));\r\n    *\r\n    * @param   {number}  port         Pipe ID.\r\n    * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n    * @param   {number}  charsToRead  Number of characters to read.\r\n    * @param   {boolean} allOrNothing Flag specifying whether the string should be read all at once.\r\n    * @param   {boolean} unicode      Flag specifying whether the string is unicode encoded.\r\n    * @returns {Promise} In case of success, resolved promise will contain data property of type number string.\r\n    */\r\n    this.PipeReadString = function(port, rxTimeout_ms, charsToRead, allOrNothing, unicode) {\r\n        return SendRequest.call(this, 'PipeReadString', [port, rxTimeout_ms, charsToRead, allOrNothing, unicode]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of signed integers from a piep.\r\n     *\r\n     * @example\r\n     * pcm.PipeReadIntArray(0, 2, 100, 100, false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  port         Pipe ID.\r\n     * @param   {number}  elSize       Element size, can be 1, 2, 4, or 8.\r\n     * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n     * @param   {number}  size         The size of the array (number of elements).\r\n     * @param   {boolean} allOrNothing Flag specifying whether the array should be read all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.PipeReadIntArray = function(port, elSize, rxTimeout_ms, size, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeReadIntArray', [port, elSize, rxTimeout_ms, size, allOrNothing]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of unsigned integers from a piep.\r\n     *\r\n     * @example\r\n     * pcm.PipeReadUIntArray(0, 4, 100, 100, false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  port         Pipe ID.\r\n     * @param   {number}  elSize       Element size, can be 1, 2, 4, or 8.\r\n     * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n     * @param   {number}  size         The size of the array (number of elements).\r\n     * @param   {boolean} allOrNothing Flag specifying whether the array should be read all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.PipeReadUIntArray = function(port, elSize, rxTimeout_ms, size, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeReadUIntArray', [port, elSize, rxTimeout_ms, size, allOrNothing]);\r\n    };\r\n\r\n   /**\r\n    * Reads an array of floats from a piep.\r\n    *\r\n    * @example\r\n    * pcm.PipeReadFloatArray(0, 100, 100, false).then(response => console.log(response.data));\r\n    *\r\n    * @param   {number}  port         Pipe ID.\r\n    * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n    * @param   {number}  size         The size of the array (number of elements).\r\n    * @param   {boolean}  allOrNothing Flag specifying whether the array should be read all at once.\r\n    * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n    */\r\n    this.PipeReadFloatArray = function(port, rxTimeout_ms, size, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeReadFloatArray', [port, rxTimeout_ms, size, allOrNothing]);\r\n    };\r\n\r\n   /**\r\n    * Reads an array of doubles from a piep.\r\n    *\r\n    * @example\r\n    * pcm.PipeReadDoubleArray(0, 100, 100, false).then(response => console.log(response.data));\r\n    *\r\n    * @param   {number}  port         Pipe ID.\r\n    * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n    * @param   {number}  size         The size of the array (number of elements).\r\n    * @param   {boolean} allOrNothing Flag specifying whether the array should be read all at once.\r\n    * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n    */\r\n    this.PipeReadDoubleArray = function(port, rxTimeout_ms, size, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeReadDoubleArray', [port, rxTimeout_ms, size, allOrNothing]);\r\n    };\r\n\r\n   /**\r\n    * Opens a file on the mashine the servce is running one.\r\n    * @see {@link PCM#LocalFileClose LocalFileClose}\r\n    *\r\n    * @example\r\n    * pcm.LocalFileOpen(\"D:\\\\Temp\\\\temp.txt\", \"w+\").then(() => console.log(\"File open.\");\r\n    *\r\n    * @param   {string} file Path to the file.\r\n    * @param   {string} mode NodeJS file system {@link https://nodejs.org/api/fs.html#fs_file_system_flags flags}.\r\n    * @returns {Promise} In case of success, resolved promise will contain data property of type number representing file descriptor.\r\n    */\r\n    this.LocalFileOpen = function(file, mode) {\r\n        return SendRequest.call(this, 'LocalFileOpen', [file, mode]);\r\n    };\r\n\r\n   /**\r\n    * Closes a file.\r\n    * @see {@link PCM#LocalFileOpen LocalFileOpen}\r\n    *\r\n    * @example\r\n    * let result = await pcm.LocalFileClose(3).then(() => console.log(\"File closed.\"));\r\n    *\r\n    * @param   {number} handle File descriptor.\r\n    * @returns {Promise} The result does not carry any relevant data.\r\n    */\r\n    this.LocalFileClose = function(handle) {\r\n        return SendRequest.call(this, 'LocalFileClose', [handle]);\r\n    };\r\n\r\n    /**\r\n     * Reads a string from an open file.\r\n     * @see {@link PCM#LocalFileOpen LocalFileOpen}\r\n     *\r\n     * @example\r\n     * pcm.LocalFileReadString(3, 255, false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  handle      File descriptor.\r\n     * @param   {number}  charsToRead Numbers of characters to read.\r\n     * @param   {boolean} unicode     Flag specifying whether the string is unicode encoded.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string.\r\n     */\r\n    this.LocalFileReadString = function(handle, charsToRead, unicode) {\r\n        return SendRequest.call(this, 'LocalFileReadString', [handle, charsToRead, unicode]);\r\n    };\r\n\r\n    /**\r\n     * Writes a string to an open file.\r\n     * @see {@link PCM#LocalFileOpen LocalFileOpen}\r\n     *\r\n     * @example\r\n     * pcm.LocalFileWriteString(3, \"Hello world!\", false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  handle      File descriptor.\r\n     * @param   {number}  str         String to write.\r\n     * @param   {boolean} unicode     Flag specifying whether the string is unicode encoded.\r\n     * @param   {boolean} size        Length of the string to write, optional, writes the full 'str' length if undefined.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of written characters.\r\n     */\r\n    this.LocalFileWriteString = function(handle, str, unicode, size) {\r\n        return SendRequest.call(this, 'LocalFileWriteString', [handle, str, unicode, size]);\r\n    };\r\n\r\n    /**\r\n     * Enables communication library logger.\r\n     * @see {@link PCM#LogDisable LogDisable}\r\n     *\r\n     * @example\r\n     * pcm.LogEnable(\"Test logger\", \"Test logger.log\").then(() => console.log(\"Logger enabled.\"));\r\n     *\r\n     * @param   {string}  name  Logger name.\r\n     * @param   {string}  file  Logger file, if empty all the loggs will be printed in standard output.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogEnable = function(name, file) {\r\n        return SendRequest.call(this, 'LogEnable', [name, file]);\r\n    };\r\n\r\n    /**\r\n     * Disables communication library logger.\r\n     * @see {@link PCM#LogEnable LogEnable}\r\n     *\r\n     * @example\r\n     * pcm.LogDisable().then(() => console.log(\"Logger disabled.\"));\r\n     *\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogDisable = function() {\r\n        return SendRequest.call(this, 'LogDisable');\r\n    };\r\n\r\n    /**\r\n     * Sets logging pattern. Refer to [spdlog wiki]{@link https://github.com/gabime/spdlog/wiki/3.-Custom-formatting#pattern-flags} for the list of available flags.\r\n     *\r\n     * @example\r\n     * pcm.LogSetPattern(\"[%Y-%m-%d %T.%f]: %v\").then(() => console.log(\"Logger pattern updated.\"));\r\n     *\r\n     * @param   {string}  pattern  Logging pattern.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogSetPattern = function(pattern) {\r\n        return SendRequest.call(this, 'LogSetPattern', [pattern]);\r\n    };\r\n\r\n    /**\r\n     * Sets logging verbosity level.\r\n     *\r\n     * @example\r\n     * pcm.LogSetVerbosity(2).then(() => console.log(\"Verbosity level set to normal.\"));\r\n     *\r\n     * @param   {number}  verbosity  Logging verbosity level.\r\n     *\r\n     * | Level | Description |\r\n     * | :---- | :---------- |\r\n     * | 0     | OFF         |\r\n     * | 1     | Minimal     |\r\n     * | 2     | Normal      |\r\n     * | 3     | Medium      |\r\n     * | 4     | High        |\r\n     * | 5     | All         |\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogSetVerbosity = function(verbosity) {\r\n        return SendRequest.call(this, 'LogSetVerbosity', [verbosity]);\r\n    };\r\n\r\n    /**\r\n     * Sets logging service filter.\r\n     *\r\n     * @example\r\n     * // 0xFFFF - disables all current filters\r\n     * // 0x0002 | 0x0004 - enables read and write filtering\r\n     * pcm.LogSetServices(0xFFFF, 0x0002 | 0x0004).then(() => console.log(\"Filtering read and write services.\"));\r\n     *\r\n     * @param   {number}  mask      Mask that will disable current filterred services.\r\n     * @param   {number}  services  Mask of services flags to be added to the filter.\r\n     *\r\n     * | Mask   | Service     |\r\n     * | :----- | :---------- |\r\n     * | 0x0001 | Port setup  |\r\n     * | 0x0002 | Data Read   |\r\n     * | 0x0004 | Data Write  |\r\n     * | 0x0008 | Scope       |\r\n     * | 0x0010 | Recorder    |\r\n     * | 0x0020 | App command |\r\n     * | 0x0040 | SFIO        |\r\n     * | 0x0080 | TSA         |\r\n     * | 0x0100 | PIPE        |\r\n     * | 0x0200 | Poolling    |\r\n     * | 0xFFFF | All         |\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogSetServices = function(mask, services) {\r\n        return SendRequest.call(this, 'LogSetServices', [mask, services]);\r\n    };\r\n\r\n    /**\r\n     * Extends the object by extra methods and events available in full FreeMASTER UI application only.\r\n     * Use this call in Control Pages and other scripts targeting the FreeMASTER application. Note that\r\n     * the extra features will NOT work with FreeMASTER Lite service.\r\n     *\r\n     * @example\r\n     * pcm.EnableExtraFeatures(true);\r\n     * pcm.EnableEvents(true);\r\n     * pcm.OnBoardDetected = function() { console.log(\"Board connection has been established.\"); }\r\n     */\r\n    this.EnableExtraFeatures = function(enable) {\r\n\r\n        if(enable) {\r\n            /* TODO: throw an exception if this file has been retrieved from the Lite service. */\r\n        }\r\n        else {\r\n            /* Don't allow to disable the features once enabled. This behavior is subject to change in future versions. */\r\n            if(this.EnableEvents) {\r\n                throw \"Can't disable ExtraFeatures after enabled once\";\r\n            }\r\n\r\n            /* Nothing to do, extra features remain disabled. */\r\n            return;\r\n        }\r\n\r\n        /* Install default FreeMASTER event handlers. Don't forget to call EnableEvents(true) for the server to generate the JSON-RPC events. */\r\n        if(!this.OnBoardDetected) {\r\n            this.OnBoardDetected = function() {\r\n                console.log(\"FreeMASTER Event received: OnBoardDetected()\");\r\n            };\r\n        }\r\n\r\n        if(!this.OnCommPortStateChanged) {\r\n            this.OnCommPortStateChanged = function(state) {\r\n                console.log(\"FreeMASTER Event received: OnCommPortStateChanged(\" + state + \")\");\r\n            };\r\n        }\r\n\r\n        if(!this.OnVariableChanged) {\r\n            this.OnVariableChanged = function(name, id, value) {\r\n                console.log(\"FreeMASTER Event received: OnVariableChanged(\\\"\" + name + \"\\\", \" + id + \", \" + value + \")\");\r\n            };\r\n        }\r\n\r\n        if(!this.OnRecorderDone) {\r\n            this.OnRecorderDone = function() {\r\n                console.log(\"FreeMASTER Event received: OnRecorderDone()\");\r\n            };\r\n        }\r\n\r\n        /* Register event handlers in JSON-RPC */\r\n        jrpc.dispatch(\"OnBoardDetected\", \"pass\", (params_array) => this.OnBoardDetected.apply(null, params_array) );\r\n        jrpc.dispatch(\"OnCommPortStateChanged\", \"pass\", (params_array) => this.OnCommPortStateChanged.apply(null, params_array) );\r\n        jrpc.dispatch(\"OnVariableChanged\", \"pass\", (params_array) => this.OnVariableChanged.apply(null, params_array) );\r\n        jrpc.dispatch(\"OnRecorderDone\", \"pass\", (params_array) => this.OnRecorderDone.apply(null, params_array) );\r\n\r\n        /**\r\n         * Start or stop the communication. This call is provided for backward compatibility with ActiveX \r\n         * interface only. Use the StartComm and StopComm methods in new designs.\r\n         *\r\n         * @example\r\n         * pcm.StartStopComm(true).then(console.log(\"Communication port is open\"));\r\n         *\r\n         * @param   {boolean} start    Start or stop communication.\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.StartStopComm = function(start) {\r\n            return SendRequest.call(this, 'StartStopComm', [start]);\r\n        };\r\n\r\n        /**\r\n         * Enable or disable events to be generated by the server side for this JSON-RPC session. \r\n         *\r\n         * @example\r\n         * function MyBoardDetectionHandler(name, id, value) {\r\n         *   console.log(\"Board is detected\");\r\n         * }\r\n         * pcm.OnBoardDetected = MyBoardDetectionHandler;\r\n         * pcm.EnableEvents(true).then(console.log(\"Events are enabled\"));\r\n         *\r\n         * @param   {boolean} enable      Enable or disable events.\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.EnableEvents = function(enable) {\r\n            return SendRequest.call(this, 'EnableEvents', [enable]);\r\n        };\r\n\r\n        /**\r\n         * Subscribe to variable changes at given testing period. When a variable is subscribed, FreeMASTER reads\r\n         * the variable periodically and raises 'OnVariableChanged' event when a value change is detected. The events\r\n         * need to be enabled by calling EnableEvents(true). \r\n         * Event handler should have three parameters: 'name', 'id' and 'value'.\r\n         *\r\n         * @example\r\n         * function MyVariableChangedHandler(name, id, value) {\r\n         *   console.log(\"Variable \" + name + \" has changed to value \" + value);\r\n         * }\r\n         * pcm.OnVariableChanged = MyVariableChangedHandler;\r\n         * pcm.SubscribeVariable(name).then(console.log(\"Variable is subscribed\"));\r\n         *\r\n         * @param   {string}  name      Variable name.\r\n         * @param   {number}  interval  Testing interval in milliseconds.\r\n         * @returns {Promise} In case of success, resolved promise will contain 'xtra.subscriptionId' member which identifies the subscription.\r\n         */\r\n        this.SubscribeVariable = function(name, interval) {\r\n            return SendRequest.call(this, 'SubscribeVariable', [name, interval]);\r\n        };\r\n\r\n       /**\r\n        * Unsubscribe from variable changes subscribed previously with SubscribeVariable. \r\n        *\r\n        * @example\r\n        * pcm.UnsubscribeVariable(name).then(console.log(\"Variable is un-subscribed\"));\r\n        *\r\n        * @param   {string}  name_or_id   Variable name or subscription identifier returned by previous SubscribeVariable call.\r\n        * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n        */\r\n        this.UnSubscribeVariable = function(name_or_id) {\r\n            return SendRequest.call(this, 'UnSubscribeVariable', [name_or_id]);\r\n        };\r\n\r\n        /**\r\n         * Define symbol.\r\n         *\r\n         * @example\r\n         * pcm.DefineSymbol(name, address, type, size).then((result) => console.log(\"Symbol defined\"));\r\n         *\r\n         * @param   {string}  name     Symbol name.\r\n         * @param   {string}  address  Address.\r\n         * @param   {string}  type     User type name (e.g. structure type name). Optional, leave empty for generic numeric types.\r\n         * @param   {string}  size     Symbol size. Optional, leave empty to determine automatically when user type is specified.\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.DefineSymbol = function(name, address, type, size) {\r\n            return SendRequest.call(this, 'DefineSymbol', [name, address, type, size]);\r\n        };\r\n\r\n        /**\r\n         * Retrieve address and size of give symbol.\r\n         *\r\n         * @example\r\n         * pcm.GetSymbolInfo(name).then((result) => console.log(\"Symbol address=\" + result.xtra.addr + \" size=\" + result.xtra.size));\r\n         *\r\n         * @param   {string}  name   Symbol name.\r\n         * @returns {Promise} In case of success, resolved promise contains 'xtra' object with 'addr' and 'size' members.\r\n         */\r\n        this.GetSymbolInfo = function(name) {\r\n            return SendRequest.call(this, 'GetSymbolInfo', [name]);\r\n        };\r\n\r\n        /**\r\n         * Get structure or union member information.\r\n         *\r\n         * @example\r\n         * pcm.GetStructMemberInfo(type, member).then((result) => console.log(\"Structure type \" + type + \" member \" + member + \r\n         *             \" is at offset \" + result.xtra.offset + \", size=\" + result.xtra.size));\r\n         *\r\n         * @param   {string}  type    User type name.\r\n         * @param   {string}  member  Structure member name.\r\n         * @returns {Promise} In case of success, resolved promise contains 'xtra' object with 'offset' and 'size' members.\r\n         */\r\n        this.GetStructMemberInfo = function(type, member) {\r\n            return SendRequest.call(this, 'GetStructMemberInfo', [type, member]);\r\n        };\r\n\r\n        /**\r\n         * Delete all script-defined symbols.\r\n         *\r\n         * @example\r\n         * pcm.DeleteAllScriptSymbols().then((result) => console.log(\"All script-defined symbols deleted.\"));\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.DeleteAllScriptSymbols = function() {\r\n            return SendRequest.call(this, 'DeleteAllScriptSymbols');\r\n        };\r\n\r\n        /**\r\n         * Run variable stimulators.\r\n         *\r\n         * @example\r\n         * pcm.RunStimulators(name).then((result) => console.log(\"Stimulator \" + name + \" is now running\"));\r\n         *\r\n         * @param   {string}  name  Name of the variable stimulator to start (or more comma-separated names)\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.RunStimulators = function(name) {\r\n            return SendRequest.call(this, 'RunStimulators', [name]);\r\n        };\r\n\r\n        /**\r\n         * Stop variable stimulators.\r\n         *\r\n         * @example\r\n         * pcm.StopStimulators(name).then((result) => console.log(\"Stimulator \" + name + \" is now stopped\"));\r\n         *\r\n         * @param   {string}  name  Name of the variable stimulator to stop (or more comma-separated names)\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.StopStimulators = function(name) {\r\n            return SendRequest.call(this, 'StopStimulators', [name]);\r\n        };\r\n\r\n        /**\r\n         * Exit application.\r\n         *\r\n         * @example\r\n         * pcm.Exit();\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.Exit = function() {\r\n            return SendRequest.call(this, 'Exit');\r\n        };\r\n\r\n        /**\r\n         * Activate FreeMASTER application window.\r\n         *\r\n         * @example\r\n         * pcm.ActivateWindow();\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.ActivateWindow = function() {\r\n            return SendRequest.call(this, 'ActivateWindow');\r\n        };\r\n\r\n        /**\r\n         * Select item in FreeMASTER project tree and activate related view.\r\n         *\r\n         * @example\r\n         * pcm.SelectItem(\"My Oscilloscope\", \"osc\");\r\n         *\r\n         * @param   {string}  name  Name of the item to activate\r\n         * @param   {string}  tab   Tab to activate. Optional, one of the following values: \"ctl\", \"blk\", \"info\", \"osc\", \"rec\", \"pipe\"\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.SelectItem = function(name, tab) {\r\n            return SendRequest.call(this, 'SelectItem', [name, tab]);\r\n        };\r\n\r\n        /**\r\n         * Open specific FreeMASTER project.\r\n         *\r\n         * @example\r\n         * pcm.OpenProject(\"C:/projects/my_project.pmpx\");\r\n         *\r\n         * @param   {string}  name  Name of the project file to open; use fully qualified name.\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.OpenProject = function(name) {\r\n            return SendRequest.call(this, 'OpenProject', [name]);\r\n        };\r\n\r\n        /**\r\n         * Determine if board has an active content defined in TSA table.\r\n         *\r\n         * @example\r\n         * pcm.IsBoardWithActiveContent().then((result) => console.log(\"Board active content \" + (result.data ? \"is\" : \"is NOT\") + \"present\"));\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains boolean 'data' member with return value.\r\n         */\r\n        this.IsBoardWithActiveContent = function() {\r\n            return SendRequest.call(this, 'IsBoardWithActiveContent');\r\n        };\r\n\r\n        /**\r\n         * Enumerate hyperlinks defined by active content.\r\n         *\r\n         * @example\r\n         * for(let index=0; true; index++) {\r\n         *     try {\r\n         *         let response = await pcm.EnumHrefLinks(index);\r\n         *         console.log(response.xtra.name + \" \" +  response.xtra.retval + \"\\n\");\r\n         *     } catch (err) {\r\n         *         break;\r\n         *     }\r\n         * }\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains 'xtra' object with 'name' and 'retval' properties.\r\n         */\r\n        this.EnumHrefLinks = function(index) {\r\n            return SendRequest.call(this, 'EnumHrefLinks', [index]);\r\n        };\r\n\r\n        /**\r\n         * Enumerate project files defined by active content.\r\n         *\r\n         * @example\r\n         * for(let index=0; true; index++) {\r\n         *     try {\r\n         *         let response = await pcm.EnumProjectFiles(index);\r\n         *         console.log(response.xtra.name + \" \" +  response.xtra.retval + \"\\n\");\r\n         *     } catch (err) {\r\n         *         break;\r\n         *     }\r\n         * }\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains 'xtra' object with 'name' and 'retval' properties.\r\n         */\r\n        this.EnumProjectFiles = function(index) {\r\n            return SendRequest.call(this, 'EnumProjectFiles', [index]);\r\n        };\r\n\r\n        /**\r\n         * Set global flag which affects Control Page reloading after opening port. By default, the page reloads when port is open.\r\n         *\r\n         * @example\r\n         * pcm.SetPageReloadOnPortOpen(false);\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.SetPageReloadOnPortOpen = function(value) {\r\n            return SendRequest.call(this, 'SetPageReloadOnPortOpen', [value]);\r\n        };\r\n\r\n        /**\r\n         * Get global flag which affects Control Page reloading while opening port.\r\n         *\r\n         * @example\r\n         * pcm.GetPageReloadOnPortOpen().then(result => console.log(\"PageReloadOnPortOpen flag is \" + result.data))\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains boolean 'data' member with return value.\r\n         */\r\n        this.GetPageReloadOnPortOpen = function() {\r\n            return SendRequest.call(this, 'GetPageReloadOnPortOpen');\r\n        };\r\n\r\n        /**\r\n         * Sets pipes default transmit mode.\r\n         *\r\n         * @example\r\n         * pcm.PipeSetDefaultTxMode(false).then(() => console.log(\"Default TX mode updated.\"));\r\n         *\r\n         * @param   {boolean} txAllOrNothing Flag specifying whether the data should be sent all at once.\r\n         * @returns {Promise} The result does not carry any relevant data.\r\n         */\r\n        this.PipeSetDefaultTxMode = function(txAllOrNothing) {\r\n            return SendRequest.call(this, 'PipeSetDefaultTxMode', [txAllOrNothing]);\r\n        };\r\n\r\n        /**\r\n         * Get info about variable with address.\r\n         *\r\n         * @example\r\n         * pcm.GetAddressInfo(addr, size).then(() => console.log(\"Info is \" + result.data));\r\n         *\r\n         * @param   {addr} Address of the variable.\r\n         * @param   {size} Size of the variable.\r\n         * @returns {Promise} In case of success, resolved promise contains string 'data' member with return value.\r\n         */\r\n        this.GetAddressInfo = function(addr, size) {\r\n            return SendRequest.call(this, 'GetAddressInfo', [addr, size]);\r\n        };\r\n        \r\n        /**\r\n         * Define oscilloscope in project.\r\n         *\r\n         * @example\r\n         * pcm.DefineOscilloscope(name, defStr).then(() => console.log(\"Info is \" + result.data));\r\n         *\r\n         * @param   {name} Name of item.\r\n         * @param   {defStr} Stringified JSON definition record. Refer to FreeMASTER documentation for more details.\r\n         * @returns {Promise} The result does not carry any relevant data.\r\n         */\r\n        this.DefineOscilloscope = function(name, defStr) {\r\n            return SendRequest.call(this, 'DefineOscilloscope', [name, defStr]);\r\n        };\r\n        \r\n        /**\r\n         * Define recorder in project.\r\n         *\r\n         * @example\r\n         * pcm.DefineRecorder(name, defStr).then(() => console.log(\"Info is \" + result.data));\r\n         *\r\n         * @param   {name} Name of item.\r\n         * @param   {defStr} Stringified JSON definition record. Refer to FreeMASTER documentation for more details.\r\n         * @returns {Promise} The result does not carry any relevant data.\r\n         */\r\n        this.DefineRecorder = function(name, defStr) {\r\n            return SendRequest.call(this, 'DefineRecorder', [name, defStr]);\r\n        };\r\n        \r\n        /**\r\n         * Send application command.\r\n         *\r\n         * @example\r\n         * pcm.SendCommand(send).then(() => console.log(\"Return is \" + result.data));\r\n         *\r\n         * @param   {send} Application command.\r\n         * @param   {wait} Set true to wait for the command processing to finish.\r\n         * @returns {Promise} In case of success, resolved promise contains string 'xtra.message' member with return message and 'xtra.retCode' member with return .\r\n         */\r\n        this.SendCommand = function(send, wait) {\r\n            return SendRequest.call(this, 'SendCommand', [send, wait]);\r\n        };\r\n        \r\n        /**\r\n         * Get current recorder state.\r\n         *\r\n         * @example\r\n         * pcm.GetCurrentRecorderState().then(() => console.log(\"Return is \" + result.data));\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains string 'xtra.data' member with return state.\r\n         */\r\n        this.GetCurrentRecorderState = function() {\r\n            return SendRequest.call(this, 'GetCurrentRecorderState');\r\n        };\r\n        \r\n        /**\r\n         * Get current recorder data.\r\n         *\r\n         * @example\r\n         * pcm.GetCurrentRecorderData().then(() => console.log(\"Return is \" + result.data));\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains string 'xtra.data' member with return data array-of-arrays.\r\n         */\r\n        this.GetCurrentRecorderData = function() {\r\n            return SendRequest.call(this, 'GetCurrentRecorderData');\r\n        };\r\n        \r\n        /**\r\n         * Get current recorder series.\r\n         *\r\n         * @example\r\n         * pcm.GetCurrentRecorderSeries(name).then(() => console.log(\"Return is \" + result.data));\r\n         *\r\n         * @param   {name} Variable name.\r\n         * @returns {Promise} In case of success, resolved promise contains string 'xtra.data' member with return data array.\r\n         */\r\n        this.GetCurrentRecorderSeries = function(name) {\r\n            return SendRequest.call(this, 'GetCurrentRecorderSeries', [name]);\r\n        };\r\n    };\r\n};\r\n\r\nexport default PCM;\r\n  ","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           App.js\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\nimport './App.css';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport ContentContainer from \"./components/contents/helpers/ContentContainer.jsx\"\r\nimport HeaderButton from \"./components/header/HeaderButton.jsx\"\r\nimport MainDashboard from \"./components/contents/MainDashboard.jsx\"\r\nimport BatteryPack from \"./components/contents/Battery/BatteryPack.jsx\"\r\nimport RawData from \"./components/contents/RawData/RawData.jsx\"\r\nimport SystemConfiguration from \"./components/contents/SystemConfiguration.jsx\"\r\n\r\nimport { normalToMicro, normalToMili, microToMili, microToNormal,\r\n    miliToMicro, miliToNormal,\r\n    celsiusToFahrenheit, celsiusToKelvin} from \"./components/helper-functions/conversions.js\"\r\n\r\nimport \"./css/main.css\"\r\nimport \"./css/light-theme.css\"\r\n\r\nimport PCM from \"./freemaster-libs/freemaster-client.js\"\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pcm: null,\r\n            boardConnected: false,\r\n            demoModeActive: false,\r\n            loading: false,\r\n            freemasterVersion: \"desktop\",\r\n            elfPath: \"Managed from Desktop Application\",\r\n            liteConnection: {\r\n                liteServerUrl: \"localhost:41000\",\r\n                connString: \"Managed from Desktop Application\"\r\n            },\r\n            labels: [],\r\n            packVoltage: [],\r\n            packCurrent: [],\r\n            packTemperature: [],\r\n            packSoC: [],\r\n            cellsNumber: 6,\r\n            cellsData: [],\r\n            units: {\r\n                systemSocUnits: \"%\",\r\n                systemVoltageUnits: \"V\",\r\n                systemCurrentUnits: \"A\",\r\n                systemTempUnits: \"\\u00b0C\",\r\n                systemPowerUnits: \"W\",\r\n                axis: {\r\n                    voltage: {\r\n                        \"\\u00b5V\": {min: 0, max: 5 * 1000000},\r\n                        \"mV\": {min: 0, max: 5 * 1000},\r\n                        \"V\": {min: 0, max: 5}\r\n                    },\r\n                    current: {\r\n                        \"\\u00b5A\": {min: -2 * 1000000, max: 2 * 1000000},\r\n                        \"mA\": {min: -2 * 1000, max: 2 * 1000},\r\n                        \"A\": {min: -2, max: 2}\r\n                    },\r\n                    temp: {\r\n                        \"\\u00b0C\": {min: -40, max: 80},\r\n                        \"\\u00b0F\": {min: -40, max: 180},\r\n                        \"K\": {min: 230, max: 355}\r\n                    },\r\n                }\r\n            },\r\n            graphSettings: {\r\n                graphAutoscaling: true,\r\n                graphAnimations: true,\r\n                maxOnGraphDataPoints: 10\r\n            },\r\n            theme: \"dark\"\r\n        }\r\n        this.passedSeconds = 0;\r\n        this.updateRate = 1000; //in ms\r\n        this.maxSavedGraphDataPoints = 120;\r\n\r\n        this.variables = {\r\n            name: {\r\n                PackVoltage: \"PackVoltage\",\r\n                PackCurrent: \"PackCurrent\",\r\n                PackTemp: \"InternalTemperature\",\r\n                PackSoC: \"PackSOC\",\r\n                CellVoltage: \"CellVoltage\",\r\n                CellCurrent: \"CellCurrent\",\r\n                CellTemp: \"CellTemp\",\r\n                CellSOC: \"CellSOC\"\r\n            },\r\n            type: {\r\n                PackVoltage: {type: \"float\", size: 4},\r\n                PackCurrent: {type: \"float\", size: 4},\r\n                PackTemp: {type: \"float\", size: 4},\r\n                PackSoC: {type: \"float\", size: 4},\r\n                CellVoltage: {type: \"float\", size: 4},\r\n                CellCurrent: {type: \"float\", size: 4},\r\n                CellTemp: {type: \"float\", size: 4},\r\n                CellSOC: {type: \"float\", size: 4}\r\n            }\r\n        };\r\n        this.numberOfCellVariables = 4;\r\n\r\n        this.cellsPackButton = React.createRef();\r\n\r\n        this.onClickConnect = this.onClickConnect.bind(this);\r\n        this.onClickDisconnect = this.onClickDisconnect.bind(this);\r\n        this.defineVariables = this.defineVariables.bind(this);\r\n        this.readVariables = this.readVariables.bind(this);\r\n        this.readDEMOvars = this.readDEMOvars.bind(this);\r\n        this.defineDEMOVars = this.defineDEMOVars.bind(this);\r\n        this.changeUnit = this.changeUnit.bind(this);\r\n    }\r\n\r\n    changeUnit(e) {\r\n        if(e === \"uV\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemVoltageUnits: \"\\u00b5\" + e.charAt(1)}}))\r\n        } else if(e === \"mV\" || e === \"V\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemVoltageUnits: e}}))\r\n        } else if(e === \"uA\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemCurrentUnits: \"\\u00b5\" + e.charAt(1)}}))\r\n        }  else if(e === \"mA\" || e === \"A\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemCurrentUnits: e}}))\r\n        } else if(e === \"C\" || e === \"F\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemTempUnits: \"\\u00b0\" + e}}))\r\n        } else if(e === \"K\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemTempUnits: e}}))\r\n        }\r\n    }\r\n\r\n    defineVariables(cellsNumber) {\r\n        let pcm = this.state.pcm\r\n        let PackVoltage = this.variables.name.PackVoltage;\r\n        let PackCurrent = this.variables.name.PackCurrent;\r\n        let PackTemp = this.variables.name.PackTemp;\r\n        let PackSoC = this.variables.name.PackSoC;\r\n        let CellVoltage = this.variables.name.CellVoltage;\r\n        let CellCurrent = this.variables.name.CellCurrent;\r\n        let CellTemp = this.variables.name.CellTemp;\r\n        let CellSOC = this.variables.name.CellSOC;\r\n        var defines = [];\r\n        this.cellsData = [];\r\n        this.labels = [];\r\n        this.packVoltage = [];\r\n        this.packCurrent = [];\r\n        this.packTemperature = [];\r\n        this.packSoC = [];\r\n        defines.push(...[\r\n            pcm.DefineVariable({name: PackVoltage, addr: PackVoltage, ...this.variables.type.PackVoltage}),\r\n            pcm.DefineVariable({name: PackCurrent, addr: PackCurrent, ...this.variables.type.PackCurrent}),\r\n            pcm.DefineVariable({name: PackTemp, addr: PackTemp, ...this.variables.type.PackTemp}),\r\n            pcm.DefineVariable({name: PackSoC, addr: PackSoC, ...this.variables.type.PackSoC})\r\n        ])\r\n        for(let cellIndex = 0; cellIndex < cellsNumber; cellIndex++) {\r\n            this.cellsData.push({\r\n                labels: [],\r\n                voltage: [],\r\n                current: [],\r\n                temp: [],\r\n                soc: []\r\n            })\r\n            defines.push(...[\r\n                pcm.DefineVariable({ name: CellVoltage + `[${cellIndex}]`, addr: CellVoltage + `[${cellIndex}]`, ...this.variables.type.CellVoltage }),\r\n                pcm.DefineVariable({ name: CellCurrent + `[${cellIndex}]`, addr:  CellCurrent + `[${cellIndex}]`, ...this.variables.type.CellCurrent }),\r\n                pcm.DefineVariable({ name: CellTemp + `[${cellIndex}]`, addr: CellTemp + `[${cellIndex}]`, ...this.variables.type.CellTemp }),\r\n                pcm.DefineVariable({ name: CellSOC + `[${cellIndex}]`, addr: CellSOC + `[${cellIndex}]`, ...this.variables.type.CellSOC })\r\n            ])\r\n        }\r\n        return Promise.all(defines)\r\n    }\r\n\r\n    readVariables() {\r\n        let pcm = this.state.pcm\r\n        let PackVoltage = this.variables.name.PackVoltage;\r\n        let PackCurrent = this.variables.name.PackCurrent;\r\n        let PackTemp = this.variables.name.PackTemp;\r\n        let PackSoC = this.variables.name.PackSoC;\r\n        let CellVoltage = this.variables.name.CellVoltage;\r\n        let CellCurrent = this.variables.name.CellCurrent;\r\n        let CellTemp = this.variables.name.CellTemp;\r\n        let CellSOC = this.variables.name.CellSOC;\r\n        var readings = [];\r\n        readings.push(...[\r\n            pcm.ReadVariable(PackVoltage),\r\n            pcm.ReadVariable(PackCurrent),\r\n            pcm.ReadVariable(PackTemp),\r\n            pcm.ReadVariable(PackSoC)\r\n        ])\r\n        for(let cellIndex = 0; cellIndex < this.state.cellsNumber; cellIndex++) {\r\n            readings.push(...[\r\n                pcm.ReadVariable(CellVoltage + `[${cellIndex}]`),\r\n                pcm.ReadVariable(CellCurrent + `[${cellIndex}]`),\r\n                pcm.ReadVariable(CellTemp + `[${cellIndex}]`),\r\n                pcm.ReadVariable(CellSOC + `[${cellIndex}]`)\r\n            ])\r\n        }\r\n        Promise.all(readings)\r\n            .then((result) => {\r\n                let initialDataArray = result.slice(4).map(e => e.data);\r\n                for(let index = 0; index < initialDataArray.length; index = index + this.numberOfCellVariables) {\r\n                    //one index + numberOfCellVariables covers 1 cell data\r\n                    let labels = this.cellsData[index / this.numberOfCellVariables].labels;\r\n                    let voltageSeries = this.cellsData[index / this.numberOfCellVariables].voltage;\r\n                    let currentSeries = this.cellsData[index / this.numberOfCellVariables].current;\r\n                    let tempSeries = this.cellsData[index / this.numberOfCellVariables].temp;\r\n                    let socSeries = this.cellsData[index / this.numberOfCellVariables].soc;\r\n                    labels.push(this.passedSeconds)\r\n\r\n                    // for voltage data\r\n                    switch(this.state.units.systemVoltageUnits) {\r\n                        case \"\\u00b5V\":\r\n                            voltageSeries.push(normalToMicro(initialDataArray[index]))\r\n                            break;\r\n                        case \"mV\":\r\n                            voltageSeries.push(normalToMili(initialDataArray[index]))\r\n                            break;\r\n                        case \"V\":\r\n                            voltageSeries.push(initialDataArray[index])\r\n                            break;\r\n                    }\r\n                    // for current data\r\n                    switch(this.state.units.systemCurrentUnits) {\r\n                        case \"\\u00b5A\":\r\n                            currentSeries.push(normalToMicro(initialDataArray[index + 1]))\r\n                            break;\r\n                        case \"mA\":\r\n                            currentSeries.push(normalToMili(initialDataArray[index + 1]))\r\n                            break;\r\n                        case \"A\":\r\n                            currentSeries.push(initialDataArray[index + 1])\r\n                            break;\r\n                    }\r\n                    // for temp data\r\n                    switch(this.state.units.systemTempUnits) {\r\n                        case \"\\u00b0C\":\r\n                            tempSeries.push(initialDataArray[index + 2])\r\n                            break;\r\n                        case \"\\u00b0F\":\r\n                            tempSeries.push(celsiusToFahrenheit(initialDataArray[index + 2]))\r\n                            break;\r\n                        case \"K\":\r\n                            tempSeries.push(celsiusToKelvin(initialDataArray[index + 2]))\r\n                            break;\r\n                    }\r\n\r\n                    socSeries.push(initialDataArray[index + 3])\r\n                    if(voltageSeries.length > this.maxSavedGraphDataPoints) {\r\n                        labels.splice(0, labels.length - this.maxSavedGraphDataPoints)\r\n                        voltageSeries.splice(0, voltageSeries.length - this.maxSavedGraphDataPoints)\r\n                        currentSeries.splice(0, currentSeries.length - this.maxSavedGraphDataPoints)\r\n                        tempSeries.splice(0, tempSeries.length - this.maxSavedGraphDataPoints)\r\n                        socSeries.splice(0, socSeries.length - this.maxSavedGraphDataPoints)\r\n                    }\r\n                }\r\n\r\n                // for voltage data\r\n                switch(this.state.units.systemVoltageUnits) {\r\n                    case \"\\u00b5V\":\r\n                        this.packVoltage.push(normalToMicro(result[0].data))\r\n                        break;\r\n                    case \"mV\":\r\n                        this.packVoltage.push(normalToMili(result[0].data))\r\n                        break;\r\n                    case \"V\":\r\n                        this.packVoltage.push(result[0].data)\r\n                        break;\r\n                }\r\n                // for current data\r\n                switch(this.state.units.systemCurrentUnits) {\r\n                    case \"\\u00b5A\":\r\n                        this.packCurrent.push(normalToMicro(result[1].data))\r\n                        break;\r\n                    case \"mA\":\r\n                        this.packCurrent.push(normalToMili(result[1].data))\r\n                        break;\r\n                    case \"A\":\r\n                        this.packCurrent.push(result[1].data)\r\n                        break;\r\n                }\r\n                // for temp data\r\n                switch(this.state.units.systemTempUnits) {\r\n                    case \"\\u00b0C\":\r\n                        this.packTemperature.push(result[2].data) // in Celsius,\r\n                        break;\r\n                    case \"\\u00b0F\":\r\n                        this.packTemperature.push(celsiusToFahrenheit(result[2].data))\r\n                        break;\r\n                    case \"K\":\r\n                        this.packTemperature.push(celsiusToKelvin(result[2].data))\r\n                        break;\r\n                }\r\n\r\n                this.packSoC.push(result[3].data)\r\n                this.labels.push(this.passedSeconds)\r\n                if(this.packVoltage.length > this.maxSavedGraphDataPoints) {\r\n                    this.packVoltage.splice(0, this.packVoltage.length - this.maxSavedGraphDataPoints)\r\n                    this.packCurrent.splice(0, this.packCurrent.length - this.maxSavedGraphDataPoints)\r\n                    this.packTemperature.splice(0, this.packTemperature.length - this.maxSavedGraphDataPoints)\r\n                    this.packSoC.splice(0, this.packSoC.length - this.maxSavedGraphDataPoints)\r\n                    this.labels.splice(0, this.labels.length - this.maxSavedGraphDataPoints)\r\n                }\r\n                this.setState(() => ({\r\n                    labels: this.labels,\r\n                    packVoltage: this.packVoltage,\r\n                    packCurrent: this.packCurrent,\r\n                    packTemperature: this.packTemperature,\r\n                    packSoC: this.packSoC,\r\n                    cellsData: this.cellsData\r\n                }))\r\n                this.passedSeconds++;\r\n                this.readVarsTimeout = setTimeout(this.readVariables, this.updateRate)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                toast.error(\" Reading the variables failed.\")\r\n                clearTimeout(this.readVarsTimeout);\r\n            })\r\n    }\r\n\r\n    defineDEMOVars(newCellsNumber) {\r\n        this.cellsData = [];\r\n        for(let cellIndex = 0; cellIndex < newCellsNumber; cellIndex++) {\r\n            this.cellsData.push({\r\n                labels: [],\r\n                voltage: [],\r\n                current: [],\r\n                temp: [],\r\n                soc: []\r\n            })\r\n        }\r\n    }\r\n\r\n    readDEMOvars() {\r\n        for(let cellIndex = 0; cellIndex < this.state.cellsNumber; cellIndex++) {\r\n            let variables = {\r\n                cellVoltage: (Math.random() * (5 - 0) + 0) * 1000000, // in uV\r\n                cellCurrent: (Math.random() * (2 + 2) - 2) * 1000, // in mA\r\n                cellTemp: Math.random() * (70 + 40) -40, // in Celsius\r\n                // cellVoltage: 2000000, // in uV\r\n                // cellCurrent: 2000, // in mA\r\n                // cellTemp: 30, // in Celsius\r\n                cellSOC: Math.floor(Math.random() * (100 - 0) + 0), // %\r\n            }\r\n            // for voltage data\r\n            switch(this.state.units.systemVoltageUnits) {\r\n                case \"\\u00b5V\":\r\n                    variables.cellVoltage = variables.cellVoltage\r\n                    break;\r\n                case \"mV\":\r\n                    variables.cellVoltage = microToMili(variables.cellVoltage)\r\n                    break;\r\n                case \"V\":\r\n                    variables.cellVoltage = microToNormal(variables.cellVoltage)\r\n                    break;\r\n            }\r\n            // for current data\r\n            switch(this.state.units.systemCurrentUnits) {\r\n                case \"\\u00b5A\":\r\n                    variables.cellCurrent = miliToMicro(variables.cellCurrent)\r\n                    break;\r\n                case \"mA\":\r\n                    variables.cellCurrent = variables.cellCurrent\r\n                    break;\r\n                case \"A\":\r\n                    variables.cellCurrent = miliToNormal(variables.cellCurrent)\r\n                    break;\r\n            }\r\n            // for temp data\r\n            switch(this.state.units.systemTempUnits) {\r\n                case \"\\u00b0C\":\r\n                    variables.cellTemp = variables.cellTemp\r\n                    break;\r\n                case \"\\u00b0F\":\r\n                    variables.cellTemp = celsiusToFahrenheit(variables.cellTemp)\r\n                    break;\r\n                case \"K\":\r\n                    variables.cellTemp = celsiusToKelvin(variables.cellTemp)\r\n                    break;\r\n            }\r\n            this.cellsData[cellIndex].labels.push(this.passedSeconds)\r\n            this.cellsData[cellIndex].voltage.push(variables.cellVoltage)\r\n            this.cellsData[cellIndex].current.push(variables.cellCurrent)\r\n            this.cellsData[cellIndex].temp.push(variables.cellTemp)\r\n            this.cellsData[cellIndex].soc.push(variables.cellSOC)\r\n\r\n            if(this.cellsData[cellIndex].labels.length > this.maxSavedGraphDataPoints) {\r\n                this.cellsData[cellIndex].labels.splice(0, this.cellsData[cellIndex].labels.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].voltage.splice(0, this.cellsData[cellIndex].voltage.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].current.splice(0, this.cellsData[cellIndex].current.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].temp.splice(0, this.cellsData[cellIndex].temp.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].soc.splice(0, this.cellsData[cellIndex].soc.length - this.maxSavedGraphDataPoints)\r\n            }\r\n        }\r\n\r\n        // for voltage data\r\n        switch(this.state.units.systemVoltageUnits) {\r\n            case \"\\u00b5V\":\r\n                this.packVoltage.push((Math.random() * (5 - 0) + 0) * 1000000) // in uV,\r\n                break;\r\n            case \"mV\":\r\n                this.packVoltage.push(microToMili((Math.random() * (5 - 0) + 0) * 1000000))\r\n                break;\r\n            case \"V\":\r\n                this.packVoltage.push(microToNormal((Math.random() * (5 - 0) + 0) * 1000000))\r\n                break;\r\n        }\r\n        // for current data\r\n        switch(this.state.units.systemCurrentUnits) {\r\n            case \"\\u00b5A\":\r\n                this.packCurrent.push(miliToMicro((Math.random() * (2 + 2) - 2) * 1000))\r\n                break;\r\n            case \"mA\":\r\n                this.packCurrent.push((Math.random() * (2 + 2) - 2) * 1000) // in mA,\r\n                break;\r\n            case \"A\":\r\n                this.packCurrent.push(miliToNormal((Math.random() * (2 + 2) - 2) * 1000))\r\n                break;\r\n        }\r\n        // for temp data\r\n        switch(this.state.units.systemTempUnits) {\r\n            case \"\\u00b0C\":\r\n                this.packTemperature.push(Math.random() * (70 + 40) -40) // in Celsius,\r\n                break;\r\n            case \"\\u00b0F\":\r\n                this.packTemperature.push(celsiusToFahrenheit(Math.random() * (70 + 40) -40))\r\n                break;\r\n            case \"K\":\r\n                this.packTemperature.push(celsiusToKelvin(Math.random() * (70 + 40) -40))\r\n                break;\r\n        }\r\n\r\n        this.packSoC.push(Math.random()) // %,\r\n        this.labels.push(this.passedSeconds)\r\n        if(this.packVoltage.length > this.maxSavedGraphDataPoints) {\r\n            this.packVoltage.splice(0, this.packVoltage.length - this.maxSavedGraphDataPoints)\r\n            this.packCurrent.splice(0, this.packCurrent.length - this.maxSavedGraphDataPoints)\r\n            this.packTemperature.splice(0, this.packTemperature.length - this.maxSavedGraphDataPoints)\r\n            this.packSoC.splice(0, this.packSoC.length - this.maxSavedGraphDataPoints)\r\n            this.labels.splice(0, this.labels.length - this.maxSavedGraphDataPoints)\r\n        }\r\n        this.setState(() => ({\r\n            labels: this.labels,\r\n            packVoltage: this.packVoltage,\r\n            packCurrent: this.packCurrent,\r\n            packTemperature: this.packTemperature,\r\n            packSoC: this.packSoC,\r\n            cellsData: this.cellsData\r\n        }))\r\n        this.passedSeconds++;\r\n        this.readDEMOVarsTimeout = setTimeout(this.readDEMOvars, this.updateRate)\r\n    }\r\n\r\n    onClickDisconnect() {\r\n        let pcm = this.state.pcm\r\n        pcm.StopComm()\r\n            .then(() => {\r\n                toast.success(\" Disconnected.\")\r\n                clearTimeout(this.readVarsTimeout);\r\n                this.setState(() => ({boardConnected: false, pcm: null}));\r\n            })\r\n            .catch(() => {\r\n                toast.error(\" Stopping the communication failed.\")\r\n            })\r\n    }\r\n\r\n    onClickConnect(options) {\r\n        if(this.state.loading) {\r\n            return\r\n        }\r\n        //if demo mode is active do not allow the user to connect to a board\r\n        if(this.state.demoModeActive) {\r\n            toast.error(\" Disable demo mode before connecting to the board.\")\r\n            return;\r\n        }\r\n        \r\n        var liteServer = options.liteServer || this.state.liteConnection.liteServerUrl\r\n        var connString = options.connString || this.state.liteConnection.connString\r\n        \r\n        const on_connect = () => {\r\n            let pcm = this.state.pcm;\r\n            // console.log(\"Go!\")\r\n            \r\n            if(this.state.freemasterVersion === \"desktop\") { //case for desktop freemaster\r\n                toast.success(\" Successfully connected.\")\r\n                this.passedSeconds = 0\r\n                this.labels = [];\r\n                this.cellsData = [];\r\n                this.packVoltage = [];\r\n                this.packCurrent = [];\r\n                this.packTemperature = [];\r\n                this.packSoC = [];\r\n                for(let cellIndex = 0; cellIndex < this.state.cellsNumber; cellIndex++) {\r\n                    this.cellsData.push({\r\n                        labels: [],\r\n                        voltage: [],\r\n                        current: [],\r\n                        temp: [],\r\n                        soc: []\r\n                    })\r\n                }\r\n                this.readVariables()\r\n                this.setState(() => ({boardConnected: true, loading: false}));\r\n            } else {\r\n                pcm.StartComm(connString)\r\n                    .then(pcm.IsBoardDetected)\r\n                    .then((response) => {\r\n                        if(response.data === true) {\r\n                            return pcm.GetDetectedBoardInfo()\r\n                        } else {\r\n                            throw new Error(\"Board not detected!\")\r\n                        }\r\n                    })\r\n                    .then((response) => {\r\n                        // console.log(\"Board information: \", response.data)\r\n                        return pcm.ReadELF(this.state.elfPath)\r\n                        // return pcm.ReadTSA()\r\n                    })\r\n                    .then(() => {\r\n                        toast.success(\" Successfully connected.\")\r\n                        this.defineVariables(this.state.cellsNumber)\r\n                            .then(() => {\r\n                                this.passedSeconds = 0\r\n                                this.readVariables()\r\n                                this.setState(() => ({boardConnected: true, loading: false}));\r\n                            })\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                        toast.error(\" An error has occurred, check the connection parameters.\")\r\n                        this.setState(() => ({loading: false}));\r\n                    })\r\n            }  \r\n        }\r\n\r\n        const on_close = () => {\r\n            toast.error(\" Connection Closed.\")\r\n            clearTimeout(this.readVarsTimeout);\r\n            this.setState(() => ({boardConnected: false, loading: false}));\r\n        }\r\n\r\n        const on_error = () => {\r\n            toast.error(\" An error has occurred, check the connection.\")\r\n            clearTimeout(this.readVarsTimeout);\r\n            this.setState(() => ({boardConnected: false, loading: false}));\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.pcm = new PCM(liteServer, on_connect, on_close, on_error);\r\n        this.setState(() => ({loading: true}));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.readVarsTimeout);\r\n        clearTimeout(this.readDEMOVarsTimeout);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"content-area\">\r\n                    <div className=\"container-fluid\">\r\n                        <div id=\"main-container\" className=\"mt-3\">\r\n\r\n                            <div id=\"header-container\" className=\"row\">\r\n                                <div className=\"col-lg-12\">\r\n\r\n                                    <div className=\"row\">\r\n                                        <h2 className=\"ml-3\">Battery Management System { this.state.demoModeActive ? \"(Demo mode active)\" : \"\" }</h2>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <HeaderButton text=\"Dashboard\" active=\"true\" controls=\"#dashboard-container\" icon=\"fa fa-sliders\" disabled={false}></HeaderButton>\r\n                                        <HeaderButton buttonRef={this.cellsPackButton} text=\"Cells Pack\" controls=\"#cell-pack-container\" icon=\"fa fa-list\" disabled={false}></HeaderButton>\r\n                                        <HeaderButton text=\"Raw Data\" controls=\"#raw-data-container\" icon=\"fa fa-table\" disabled={false}></HeaderButton>\r\n                                        <HeaderButton text=\"System Configuration\" controls=\"#chemistry-container\" icon=\"fa fa-flask\" disabled={false}></HeaderButton>\r\n\r\n                                        <a className=\"btn btn-large white-text-button btn-primary\" style={{position:\"absolute\", right: \"15px\"}} role=\"button\"\r\n                                            onClick={this.state.boardConnected ? this.onClickDisconnect : this.onClickConnect}>\r\n                                                {   (this.state.boardConnected === false && this.state.loading === true) &&\r\n                                                        <React.Fragment>\r\n                                                        <span className=\"spinner-grow mr-2\" style={{width: \"1.4rem\", height: \"1.4rem\"}} role=\"status\" aria-hidden=\"true\"></span>\r\n                                                            Connecting\r\n                                                        </React.Fragment>\r\n                                                }\r\n                                                {   (this.state.boardConnected === true && this.state.loading === false) &&\r\n                                                        <React.Fragment>\r\n                                                            <i className=\"fa fa-exchange mr-2\" style={{width: \"1.4rem\", height: \"1.4rem\"}}></i>\r\n                                                            Disconnect\r\n                                                        </React.Fragment>\r\n                                                }\r\n                                                {   (this.state.boardConnected === false && this.state.loading === false) &&\r\n                                                        <React.Fragment>\r\n                                                            <i className=\"fa fa-exchange mr-2\" style={{width: \"1.4rem\", height: \"1.4rem\"}}></i>\r\n                                                            Connect\r\n                                                        </React.Fragment>\r\n                                                }\r\n\r\n                                        </a>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                            <ContentContainer active=\"true\" id=\"dashboard-container\" dataParent=\"#main-container\">\r\n                                <MainDashboard\r\n                                    cellsNumber={this.state.cellsNumber}\r\n                                    data={{\r\n                                        labels: this.state.labels,\r\n                                        packVoltage: this.state.packVoltage,\r\n                                        packCurrent: this.state.packCurrent,\r\n                                        packTemperature: this.state.packTemperature,\r\n                                        packSoC: this.state.packSoC\r\n                                    }}\r\n                                    clickCellsPackTab={() => {\r\n                                        this.cellsPackButton.current.click()\r\n                                    }}\r\n                                    boardConnected={this.state.boardConnected}\r\n                                    units={this.state.units}\r\n                                    theme={this.state.theme}\r\n                                    graphSettings={this.state.graphSettings}\r\n                                />\r\n                            </ContentContainer>\r\n\r\n                            <ContentContainer id=\"cell-pack-container\" dataParent=\"#main-container\">\r\n                                <BatteryPack cellsNumber={this.state.cellsNumber}\r\n                                    cellsData={this.state.cellsData}\r\n                                    passedSeconds={this.passedSeconds}\r\n                                    numberOfCellVariables={this.numberOfCellVariables}\r\n                                    units={this.state.units}\r\n                                    theme={this.state.theme}\r\n                                    graphSettings={this.state.graphSettings} />\r\n                            </ContentContainer>\r\n\r\n                            <ContentContainer id=\"raw-data-container\" dataParent=\"#main-container\">\r\n                                <RawData cellsNumber={this.state.cellsNumber}\r\n                                    cellsData={this.state.cellsData}\r\n                                    units={this.state.units}\r\n                                    theme={this.state.theme} />\r\n                            </ContentContainer>\r\n\r\n                            <ContentContainer id=\"chemistry-container\" dataParent=\"#main-container\">\r\n                                <SystemConfiguration\r\n                                    boardConnected={this.state.boardConnected}\r\n                                    demoModeActive={this.state.demoModeActive}\r\n                                    liteConnection={this.state.liteConnection}\r\n                                    changeLiteConnection={(options) => {\r\n                                        this.setState(() => ({\r\n                                            liteConnection: {\r\n                                                liteServerUrl: options.liteServerUrl || this.state.liteConnection.liteServerUrl,\r\n                                                connString: options.connString || this.state.liteConnection.connString\r\n                                            }\r\n                                        }))\r\n                                    }}\r\n                                    onSelectedFreemasterVersion={(selectedVerion) => {\r\n                                        this.setState(() => ({\r\n                                            freemasterVersion: selectedVerion\r\n                                        }))\r\n                                    }}\r\n                                    elfPath={this.state.elfPath}\r\n                                    changeElfPath={(newPath) => {\r\n                                        this.setState(() => ({\r\n                                            elfPath: newPath\r\n                                        }))\r\n                                    }}\r\n                                    onToggleAutoScaling={() => {\r\n                                        this.setState((prevState) => ({\r\n                                            graphSettings: {\r\n                                                ...prevState.graphSettings,\r\n                                                graphAutoscaling: !prevState.graphSettings.graphAutoscaling\r\n                                            }\r\n                                        }))\r\n                                    }}\r\n                                    onToggleAnimations={() => {\r\n                                        this.setState((prevState) => ({\r\n                                            graphSettings: {\r\n                                                ...prevState.graphSettings,\r\n                                                graphAnimations: !prevState.graphSettings.graphAnimations\r\n                                            }\r\n                                        }))\r\n                                    }}\r\n                                    onChangeMaxOnGraphDataPoints={(newMaxOnGraphDataPoints) => {\r\n                                        this.setState((prevState) => ({\r\n                                            graphSettings: {\r\n                                                ...prevState.graphSettings,\r\n                                                maxOnGraphDataPoints: newMaxOnGraphDataPoints\r\n                                            }\r\n                                        }))\r\n                                    }}\r\n                                    changeCellsNumber={(newCellsNumber) => {\r\n                                        toast.info(\" Cells number changed to \" + newCellsNumber, {autoClose: 3000})\r\n                                        if(this.state.pcm) {\r\n                                            this.defineVariables(newCellsNumber)\r\n                                            .then(() => {\r\n                                                this.setState(() => ({cellsNumber: newCellsNumber}))\r\n                                            })\r\n                                        } else { //in demo mode\r\n                                            this.defineDEMOVars(newCellsNumber)\r\n                                            this.setState(() => ({cellsNumber: newCellsNumber}))\r\n                                        }\r\n                                    }}\r\n                                    cellsNumber={this.state.cellsNumber}\r\n                                    cellsData={this.state.cellsData}\r\n                                    data={{\r\n                                        labels: this.state.labels,\r\n                                        packVoltage: this.state.packVoltage,\r\n                                        packCurrent: this.state.packCurrent,\r\n                                        packTemperature: this.state.packTemperature,\r\n                                        packSoC: this.state.packSoC\r\n                                    }}\r\n                                    triggerDemoMode={() => {\r\n                                        this.labels = [];\r\n                                        this.cellsData = [];\r\n                                        this.packVoltage = [];\r\n                                        this.packCurrent = [];\r\n                                        this.packTemperature = [];\r\n                                        this.packSoC = [];\r\n                                        this.passedSeconds = 0;\r\n                                        if(this.state.demoModeActive === false) {\r\n                                            this.defineDEMOVars(this.state.cellsNumber)\r\n                                            this.readDEMOvars()\r\n                                            toast.info(\" Demo mode switched ON.\", {autoClose: 3000})\r\n                                        } else {\r\n                                            clearTimeout(this.readDEMOVarsTimeout);\r\n                                            toast.info(\" Demo mode switched OFF.\", {autoClose: 3000})\r\n                                        }\r\n                                        this.setState((prevState) => ({demoModeActive: !prevState.demoModeActive}))\r\n                                    }}\r\n                                    changeUnit={this.changeUnit}\r\n                                    units={this.state.units}\r\n                                    theme={this.state.theme}\r\n                                    changeApplicationTheme={(selectedTheme) => {\r\n                                        this.setState(() => ({theme: selectedTheme}))\r\n                                    }}\r\n                                />\r\n                            </ContentContainer>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12 mt-3 text-center\">\r\n                            &copy; 2020 NXP\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <ToastContainer />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}