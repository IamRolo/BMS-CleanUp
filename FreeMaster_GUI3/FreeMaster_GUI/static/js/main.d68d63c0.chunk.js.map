{"version":3,"sources":["components/contents/helpers/ContentContainer.jsx","components/header/HeaderButton.jsx","components/contents/helpers/CardBoxContainer.jsx","components/contents/Battery/Battery.jsx","components/contents/Battery/Graph.jsx","components/contents/helpers/LabelWithValue.jsx","components/contents/StatusIndicatorWidget/Led/Led.jsx","components/contents/StatusIndicatorWidget/StatusIndicator.jsx","components/contents/StatusIndicatorWidget/StatusIndicatorWidget.jsx","components/contents/StatusIndicatorWidget/StatusIndicatorsHistory.jsx","components/contents/MainDashboard.jsx","components/contents/helpers/CardBoxBatteryContainer.jsx","components/contents/Battery/BatteryWithGraph.jsx","components/contents/Battery/BatteryPack.jsx","components/contents/RawData/TableRowFromVariable.jsx","components/contents/RawData/RawDataTable.jsx","components/contents/RawData/RawData.jsx","components/contents/helpers/ConnectionSettingsWidget.jsx","components/contents/helpers/DataRecorderSettingsWidget.jsx","components/contents/helpers/ChartSettingsWidget.jsx","freemaster-libs/simple-jsonrpc-js.js","freemaster-libs/freemaster-client.js","components/contents/SystemConfiguration.jsx","components/helper-functions/conversions.js","App.js","serviceWorker.js","index.js"],"names":["ContentContainer","props","state","active","Fragment","id","this","className","data-parent","dataParent","children","React","Component","HeaderButton","ref","buttonRef","disabled","href","controls","aria-controls","role","data-toggle","aria-expanded","icon","text","CardBoxContainer","width","onClick","theme","Battery","battery","createRef","liquid","liquidSvgAnimation","batteryText","batteryTextPercentage","batteryTextUnits","updateBattery","bind","batterySoc","level","Math","trunc","current","style","fill","backgroundImage","backgroundPosition","top","backgroundColor","innerText","toFixed","soc","position","positionStyle","sizeStyle","version","xmlns","x","y","height","viewBox","enableBackground","d","isCharging","Graph","data","labels","datasets","borderColor","pointRadius","borderWidth","options","animation","duration","easing","tooltips","enabled","legend","display","scales","xAxes","gridLines","color","ticks","fontColor","beginAtZero","yAxes","zeroLineColor","elements","line","tension","maintainAspectRatio","chartReference","numberOfPoints","length","chartInstance","min","max","values","graphSettings","graphAutoscaling","undefined","setScales","graphAnimations","update","BatteryPack","paddingRight","paddingLeft","label","value","units","Led","blinking","StatusIndicator","marginBottom","StatusIndicatorsWidget","marginTop","indicatorsNames","map","name","index","boardConnected","demoModeActive","blinkingStatus","StatusIndicatorsHistory","scrolabaleHistoryContainer","scrollTop","scrollHeight","history","filename","cursor","textDecoration","data-placement","title","class","aria-hidden","minHeight","maxHeight","overflowY","historyItem","key","minWidth","to","time","MainDashboard","currentPackStatus","currentPackSoc","packSoC","currentPackVoltage","packVoltage","currentPackCurrent","packCurrent","currentPackTemperature","packTemperature","currentPackPower","clickCellsPackTab","left","LabelWithValue","systemSocUnits","systemVoltageUnits","systemCurrentUnits","systemTempUnits","systemPowerUnits","fontSize","padding","axis","voltage","cellsNumber","indicatorsHistory","CardBoxBatteryContainer","paddingBottom","paddingTop","BatteryWithGraph","dropdownContextMenu","voltageOption","curentOption","tempOption","selectedOption","voltageChartContainer","currentChartContainer","temperatureChartContainer","balancingChartContainer","visible","selectedToShow","contextMenuOpen","menuOptionChange","adjustToSystemUnits","visibilityChange","document","body","addEventListener","classList","remove","e","clientY","clientX","add","preventDefault","target","setState","nextProps","nextState","isVisible","onChange","onContextMenu","data-target","cellData","balancing","temp","tabIndex","aria-labelledby","maxWidth","type","data-dismiss","aria-label","Array","keys","element","cellsData","TableRowFromVariable","scope","noDecimals","RawDataTable","RawData","partialVisibility","ConnectionSettingsWidget","freemasterVersion","liteServerUrlInput","connStringInput","elfPathInput","variablesConfigsRefs","Object","variables","forEach","variable","size","onInputChange","onelfPathInputChange","saveVarConfig","defaultValue","liteConnection","liteServerUrl","connString","elfPath","checked","changeLiteConnection","changeElfPath","toast","error","newConfig","Number","changeVariablesConfiguration","success","onSelectedFreemasterVersion","htmlFor","placeholder","aria-describedby","tabindex","for","selected","DataRecorderSettingsWidget","defaultChecked","onSelectedRecordParamsToggle","ChartSettingsWidget","onToggleAutoScaling","onToggleAnimations","_Promise","Promise","root","isUndefined","isArray","isObject","isFunction","isString","isEmpty","idx","hasOwnProperty","callback","_key","ERRORS","ServerError","code","message","Boolean","prototype","Error","simple_jsonrpc","self","waitingframe","dispatcher","setError","jsonrpcError","exception","JSON","parse","stringify","resolver","isError","reject","console","log","isResponse","result","resolve","method","isRequest","request","METHOD_NOT_FOUND","params","fn","call","apply","INVALID_PARAMS","argsValues","arg","push","toString","thing","then","res","catch","INTERNAL_ERROR","handleRemoteRequest","INVALID_REQUEST","notification","promise","toStream","a","arguments","dispatch","functionName","paramsNameFn","on","off","_call","batch","requests","promises","req","err","all","messageHandler","rawMessage","msg","r","beforeResolve","PARSE_ERROR","customException","WebSocket","PCM","url","onSocketOpen","onSocketClose","onSocketError","jrpc","socket","SendRequest","args","response","OnServerError","OnSocketOpen","OnSocketClose","OnSocketError","_msg","send","onopen","event","onclose","onerror","onmessage","GetAppVersion","EnumCommPorts","GetCommPortInfo","StartComm","StopComm","IsCommPortOpen","IsBoardDetected","GetDetectedBoardInfo","GetConfigParamU8","GetConfigParamULEB","GetConfigParamString","len","ReadIntVariable","addr","ReadUIntVariable","ReadFloatVariable","ReadDoubleVariable","WriteIntVariable","WriteUIntVariable","WriteFloatVariable","WriteDoubleVariable","ReadIntArray","elSize","ReadUIntArray","ReadFloatArray","ReadDoubleArray","WriteIntArray","WriteUIntArray","WriteFloatArray","WriteDoubleArray","ReadELF","elfFile","ReadTSA","EnumSymbols","GetSymbolInfo","EnumVariables","GetVariableInfo","DefineVariable","DeleteVariable","DeleteAllScriptVariables","ReadVariable","WriteVariable","SetupOscilloscope","vars","GetOscilloscopeData","GetRecorderLimits","SetupRecorder","config","recVars","trgVars","StartRecorder","StopRecorder","GetRecorderStatus","GetRecorderData","PipeOpen","port","txBufferSize","rxBufferSize","PipeClose","PipeFlush","timeout","PipeSetDefaultRxMode","rxAllOrNothing","rxTimeout_ms","PipeSetDefaultStringMode","unicode","PipeGetRxBytes","PipeGetTxBytes","PipeGetTxFree","PipeGetRxBufferSize","PipeGetTxBufferSize","PipeWriteString","str","allOrNothing","PipeWriteIntArray","PipeWriteUIntArray","PipeWriteFloatArray","PipeWriteDoubleArray","PipeReadString","charsToRead","PipeReadIntArray","PipeReadUIntArray","PipeReadFloatArray","PipeReadDoubleArray","LocalFileOpen","file","mode","LocalFileClose","handle","LocalFileReadString","LocalFileWriteString","LogEnable","LogDisable","LogSetPattern","pattern","LogSetVerbosity","verbosity","LogSetServices","mask","services","EnableExtraFeatures","enable","OnBoardDetected","OnCommPortStateChanged","OnVariableChanged","OnRecorderDone","params_array","StartStopComm","start","EnableEvents","SubscribeVariable","interval","UnSubscribeVariable","name_or_id","DefineSymbol","address","GetStructMemberInfo","member","DeleteAllScriptSymbols","RunStimulators","StopStimulators","Exit","ActivateWindow","SelectItem","tab","OpenProject","IsBoardWithActiveContent","EnumHrefLinks","EnumProjectFiles","SetPageReloadOnPortOpen","GetPageReloadOnPortOpen","PipeSetDefaultTxMode","txAllOrNothing","GetAddressInfo","DefineOscilloscope","defStr","DefineRecorder","SendCommand","wait","GetCurrentRecorderState","GetCurrentRecorderData","GetCurrentRecorderSeries","SystemConfiguration","cellsNr","selectedRecordParam","temperature","recordedData","cellsNumberSelect","onChangeCellsNumber","onChangeUnits","formatRecordedData","changeUnit","changeCellsNumber","cellIndex","dataLength","dataIndex","info","autoClose","on_connect","conn","configFilePath","fileId","replace","finally","liteConn","desktopConn","background","param","prevState","triggerDemoMode","changeApplicationTheme","pcm","loading","microToMili","microToNormal","miliToMicro","miliToNormal","normalToMicro","normalToMili","celsiusToFahrenheit","celsiusToKelvin","App","indicators","maxOnGraphDataPoints","PackVoltage","PackCurrent","PackTemp","PackSoC","CellVoltage","CellTemp","CellSoC","CellBalancing","BMS_Info_OUT","passedSeconds","updateRate","maxSavedGraphDataPoints","numberOfCellVariables","cellsPackButton","onClickConnect","onClickDisconnect","defineVariables","readVariables","readDEMOvars","defineDEMOVars","proccesFaults","setUpDesktopConnectionCheck","charAt","defines","BMS_CellBalancing","readingsOrder","readings","mappedPromises","p","status","reason","Promise_allSettled_polyfill","failedReadings","filter","reading","voltageSeries","balancingSeries","tempSeries","socSeries","splice","readVarsTimeout","setTimeout","failedReading","clearTimeout","date","Date","timeStamp","getHours","getMinutes","getSeconds","currentFaults","changedFaults","indicator","newFaultsChanges","change","from","newCellsNumber","cellVoltage","random","cellCurrent","cellTemp","cellBalancing","round","elem","readDEMOVarsTimeout","liteServer","checkForDesktopConnection","testConnection","window","$","tooltip","contentToParse","right","click","selectedVerion","newPath","onChangeMaxOnGraphDataPoints","newMaxOnGraphDataPoints","selectedTheme","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d68d63c0.chunk.js","sourcesContent":["/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           ContentContainer.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass ContentContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        active: this.props.active || false\r\n    };\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div id={this.props.id} className={\"row collapse\" + (this.state.active == \"true\" ? \" show\" : \"\")} \r\n                 data-parent={this.props.dataParent}>\r\n                <div className=\"col-lg-12 mt-1\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ContentContainer;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           HeaderButton.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport \"../../css/buttons.css\"\r\n\r\nclass HeaderButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        active: this.props.active || false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <a ref={this.props.buttonRef} className={\"btn btn-large ml-3 white-text-button\" + (this.state.active == \"true\" ? \" btn-primary\" : \" btn-primary\") + (this.props.disabled === true ? \" disabled\" : \"\")} \r\n                href={this.props.controls} aria-controls={this.props.controls}\r\n                role=\"button\" data-toggle=\"collapse\" aria-expanded={this.state.active}>\r\n            <i className={this.props.icon}></i> {this.props.text}</a>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default HeaderButton;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           CardBoxContainer.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass CardBoxContainer extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className={this.props.width + \" mx-auto\"} onClick={this.props.onClick}>\r\n                <div className={\"box shadow mt-3\" + (this.props.theme === \"light\" ? \" light-background\" : \"\")}>\r\n                        {this.props.children}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default CardBoxContainer;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           Battery.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport \"../../../css/styled-battery.css\"\r\n\r\nclass Battery extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //refs for the battery animation state\r\n    this.battery = React.createRef();\r\n    this.liquid = React.createRef();\r\n    this.liquidSvgAnimation = React.createRef();\r\n    this.batteryText = React.createRef();\r\n    this.batteryTextPercentage = React.createRef();\r\n    this.batteryTextUnits = React.createRef();\r\n\r\n    this.updateBattery = this.updateBattery.bind(this);\r\n  }\r\n\r\n  updateBattery(batterySoc) {\r\n    let level = Math.trunc(batterySoc * 100)\r\n    if(level < 20) {\r\n        this.liquidSvgAnimation.current.style.fill = \"red\"\r\n        this.battery.current.style.backgroundImage = \"linear-gradient(red 50%, #444 0%)\"\r\n    } else if(level < 50) {\r\n        this.liquidSvgAnimation.current.style.fill = \"yellow\"\r\n        this.battery.current.style.backgroundImage = \"linear-gradient(yellow 50%, #444 0%)\"\r\n    } else if(level < 75) {\r\n        this.liquidSvgAnimation.current.style.fill = \"chartreuse\"\r\n        this.battery.current.style.backgroundImage = \"linear-gradient(chartreuse 50%, #444 0%)\"\r\n    } else {\r\n        this.liquidSvgAnimation.current.style.fill = \"green\"\r\n        this.battery.current.style.backgroundImage = \"linear-gradient(green 50%, #444 0%)\"\r\n    }\r\n\r\n    this.battery.current.style.backgroundPosition = '0 -' + (100 - level) + '%';\r\n    this.batteryText.current.style.backgroundPosition = '0 -' + (100 - level) + '%';\r\n    this.liquid.current.style.top = (100 - level) + '%';\r\n    if(level === 100) {\r\n        this.liquid.current.style.backgroundColor = 'green';\r\n    } else {\r\n        this.liquid.current.style.backgroundColor = '#444';\r\n    }\r\n    this.batteryTextPercentage.current.innerText = (batterySoc * 100).toFixed(1);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n      if(this.props.soc) {\r\n        this.updateBattery(this.props.soc)\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n                \r\n            <div id={this.props.id || \"\"} style={{position: \"absolute\", ...this.props.positionStyle}}>\r\n                <div ref={this.battery} className=\"battery onscreen\" style={{...this.props.sizeStyle}}>\r\n                    <div ref={this.liquid} className=\"liquid liquid-bg-color\">\r\n                        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"300px\" height=\"5px\" viewBox=\"0 0 300 5\" enableBackground=\"new 0 0 300 5\">\r\n                            <path ref={this.liquidSvgAnimation} className=\"wave\" d=\"M300,300V2.5c0,0-0.6-0.1-1.1-0.1c0,0-25.5-2.3-40.5-2.4c-15,0-40.6,2.4-40.6,2.4\r\n                            c-12.3,1.1-30.3,1.8-31.9,1.9c-2-0.1-19.7-0.8-32-1.9c0,0-25.8-2.3-40.8-2.4c-15,0-40.8,2.4-40.8,2.4c-12.3,1.1-30.4,1.8-32,1.9\r\n                            c-2-0.1-20-0.8-32.2-1.9c0,0-3.1-0.3-8.1-0.7V300H300z\" />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div ref={this.batteryText} className=\"battery-text onscreen\">\r\n                    { this.props.isCharging && <span className=\"isChargingIndicator\"><i className=\"fa fa-bolt\"></i></span>}\r\n                    <span ref={this.batteryTextPercentage} className=\"percentage\"></span><small ref={this.batteryTextUnits} className=\"units\">%</small>\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Battery;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           Graph.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nclass Graph extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    }\r\n    this.data = {\r\n        labels: [],\r\n        datasets: [{\r\n            data: [],\r\n            borderColor: \"#008FFB\",\r\n            pointRadius: 0,\r\n            fill: false,\r\n            borderWidth: 4\r\n        }]\r\n    }\r\n    this.options = {\r\n        animation: {\r\n            duration: 1500,\r\n            easing: \"linear\"\r\n        },\r\n        tooltips: {\r\n            enabled: false\r\n        },\r\n        legend: {\r\n            display: false\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                gridLines: {\r\n                    color: \"#90A4AE\",\r\n                },\r\n                ticks: {\r\n                    fontColor: \"white\",\r\n                    beginAtZero: true\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                gridLines: {\r\n                    color: \"#90A4AE\",\r\n                    zeroLineColor: \"#90A4AE\"\r\n                },\r\n                ticks: {\r\n                    fontColor: \"white\"\r\n                }   \r\n            }]\r\n        },\r\n        elements: {\r\n            line: {\r\n                tension: 0 // disables bezier curves for better performance and accurate graphs\r\n            }\r\n        },\r\n        maintainAspectRatio: false\r\n    }\r\n    this.chartReference = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let numberOfPoints = this.props.data.labels?.length\r\n    if(numberOfPoints >= 12) {\r\n        this.chartReference.current.chartInstance.options.scales.xAxes[0].ticks.min = this.props.data.labels[numberOfPoints - 1] - 9\r\n        this.chartReference.current.chartInstance.options.scales.xAxes[0].ticks.max = this.props.data.labels[numberOfPoints - 1] - 1\r\n    }\r\n    this.chartReference.current.chartInstance.data.labels = this.props.data.labels;\r\n    this.chartReference.current.chartInstance.data.datasets[0].data = this.props.data.values;\r\n\r\n    if(this.props.graphSettings?.graphAutoscaling === true) {\r\n        this.chartReference.current.chartInstance.options.scales.yAxes[0].ticks.min = undefined\r\n        this.chartReference.current.chartInstance.options.scales.yAxes[0].ticks.max = undefined\r\n    } else {\r\n        this.chartReference.current.chartInstance.options.scales.yAxes[0].ticks.min = this.props.setScales?.yAxes.min\r\n        this.chartReference.current.chartInstance.options.scales.yAxes[0].ticks.max = this.props.setScales?.yAxes.max\r\n    }\r\n\r\n    if(this.props.graphSettings?.graphAnimations === false) {\r\n        this.chartReference.current.chartInstance.update(0);\r\n    } else {\r\n        this.chartReference.current.chartInstance.update();\r\n    }\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <Line ref={this.chartReference} data={this.data} options={{...this.options, ...this.props.options}}></Line>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           LabelWithValue.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass BatteryPack extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"col-lg-6 text-right\" style={{paddingRight: \"0px\", paddingLeft: \"0px\"}}>\r\n                <span className={\"custom-font mr-2 custom-light-weight\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>{this.props.label} </span>\r\n            </div>\r\n\r\n            <div className=\"col-lg-5 text-left align-self-center\" style={{paddingRight: \"0px\", paddingLeft: \"10px\"}}>\r\n                <span className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>{this.props.value}</span>\r\n                <span className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>{this.props.units}</span>\r\n            </div>\r\n            \r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default BatteryPack;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           Led.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport './Led.css';\r\n\r\nclass Led extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className={\"statusIndicator \" + this.props.color + (this.props.blinking ? \"\" : \" removedAnimations\")}></div>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Led;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           StatusIndicator.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport Led from \"./Led/Led.jsx\"\r\n\r\nclass StatusIndicator extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"row\" style={{marginBottom: \"5px\"}}>\r\n                <div className=\"col d-flex justify-content-center text-center\">\r\n                    <Led color={this.props.color}\r\n                        blinking={this.props.blinking} />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\"  style={{marginBottom: \"10px\"}}>\r\n                <div className=\"col d-flex justify-content-center text-center\">\r\n                    <span className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>\r\n                        {this.props.text}\r\n                    </span>\r\n                </div>\r\n            </div>         \r\n        </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatusIndicator;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           StatusIndicatorWidget.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport StatusIndicator from \"./StatusIndicator.jsx\"\r\n\r\nclass StatusIndicatorsWidget extends React.Component {\r\n    //   constructor(props) {\r\n    //     super(props);\r\n\r\n    //   }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12 text-center\">\r\n                        <p className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                            style={{marginBottom: 3 + \"px\", marginTop: \"-15px\"}} >\r\n                            Faults Status\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {\r\n                        this.props.indicatorsNames.map((name, index) => (\r\n                            <div className=\"col-md-3\">\r\n                                <StatusIndicator text={name}\r\n                                    color={this.props.boardConnected || this.props.demoModeActive ? (this.props.blinkingStatus[index] ? \"red\" : \"green\") : \"disabled\"}\r\n                                    blinking={this.props.blinkingStatus[index]}\r\n                                    theme={this.props.theme} />\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusIndicatorsWidget;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           StatusIndicatorsHistory.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nclass StatusIndicatorsHistory extends React.Component {\r\n      constructor(props) {\r\n        super(props);\r\n\r\n        this.scrolabaleHistoryContainer = React.createRef();\r\n      }\r\n\r\n    componentDidUpdate() {\r\n        this.scrolabaleHistoryContainer.current.scrollTop = this.scrolabaleHistoryContainer.current.scrollHeight;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                    <CSVLink data={this.props.history} filename={\"BMS_faults_history.csv\"}\r\n                        style={{cursor: \"text\", color: \"inherit\", textDecoration: \"none\"}} >\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12 text-center\">\r\n                                    <p className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                        style={{marginBottom: 3 + \"px\"}}\r\n                                        data-toggle=\"tooltip\" data-placement=\"top\" title=\"Click to download the history\" >\r\n                                        Faults History <i class=\"fa fa-history ml-1\" aria-hidden=\"true\"></i>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                    </CSVLink>\r\n                    <div className=\"row\">\r\n                        <div ref={this.scrolabaleHistoryContainer} className=\"col\" style={{minHeight: \"147px\", maxHeight: \"148px\", overflowY: \"auto\"}}>\r\n                            {\r\n                                this.props.history.map((historyItem, index) => (\r\n                                    <div key={index} style={{minWidth: \"inherit\", color: (historyItem.to === 1) ? \"red\" : \"green\"}}>\r\n                                        {historyItem.time} - {historyItem.name + ((historyItem.to === 1) ? \" triggered\" : \" cleared\")} \r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusIndicatorsHistory;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           MainDashboard.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport CardBoxContainer from \"./helpers/CardBoxContainer.jsx\"\r\nimport Battery from \"./Battery/Battery.jsx\"\r\nimport Graph from \"./Battery/Graph.jsx\"\r\nimport LabelWithValue from \"./helpers/LabelWithValue.jsx\"\r\nimport StatusIndicatorsWidget from \"./StatusIndicatorWidget/StatusIndicatorWidget.jsx\"\r\nimport StatusIndicatorsHistory from \"./StatusIndicatorWidget/StatusIndicatorsHistory.jsx\"\r\n\r\nclass MainDashboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    }\r\n    \r\n  }\r\n\r\n//   componentDidUpdate() {\r\n//       console.log(this.props.data)\r\n//   }\r\n\r\n  render() {\r\n    let currentPackSoc = this.props.data.packSoC.length > 0 ? this.props.data.packSoC[this.props.data.packSoC.length - 1] : \"0\"\r\n    let currentPackVoltage = this.props.data.packVoltage.length > 0 ? this.props.data.packVoltage[this.props.data.packVoltage.length - 1].toFixed(2) : \"0\" \r\n    let currentPackCurrent = this.props.data.packCurrent.length > 0 ? this.props.data.packCurrent[this.props.data.packCurrent.length - 1].toFixed(2) : \"0\" \r\n    let currentPackTemperature = this.props.data.packTemperature.length > 0 ? this.props.data.packTemperature[this.props.data.packTemperature.length - 1].toFixed(2) : \"0\" \r\n    let currentPackPower = (this.props.data.packVoltage.length & this.props.data.packCurrent.length) ? (currentPackVoltage * currentPackCurrent).toFixed(2) : \"0\"\r\n    let currentPackStatus\r\n    if(this.props.boardConnected) {\r\n        currentPackStatus = currentPackCurrent === 0 ? \"Idle\" : (currentPackCurrent > 0 ? \"Charging\" : \"Discharging\")\r\n    } else if(this.props.demoModeActive) {\r\n        currentPackStatus = \"Demoing\"\r\n    } else {\r\n        currentPackStatus = \"Disconnected\"\r\n    }\r\n\r\n    let scales = {\r\n        xAxes: [{\r\n            gridLines: {\r\n                color: \"#90A4AE\",\r\n            },\r\n            ticks: {\r\n                beginAtZero: true,\r\n                fontColor: this.props.theme === \"light\" ? \"black\" : \"white\"\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            ticks: {\r\n                fontColor: this.props.theme === \"light\" ? \"black\" : \"white\"\r\n            },\r\n            gridLines: {\r\n                color: \"#90A4AE\",\r\n                zeroLineColor: \"#90A4AE\"\r\n            }   \r\n        }]\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"row\">\r\n\r\n                <CardBoxContainer width=\"col-md-4\" onClick={this.props.clickCellsPackTab} theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12 text-center\">\r\n                            <p className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 0 + \"px\"}}>Summary</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\" style={{marginTop: \"38px\", marginBottom: \"27px\"}}>\r\n                        <div className=\"col-md-3\">\r\n                            <Battery id=\"dashboardBattery\" positionStyle={{top: \"178px\", left: \"60px\"}} sizeStyle={{width: \"95px\", height: \"195px\"}}\r\n                                isCharging={currentPackCurrent > 0 ? true : false}\r\n                                soc={currentPackSoc} />\r\n                        </div>\r\n                        <div className=\"col-md-7 offset-md-1\">\r\n                            <div className=\"row mt-4\">\r\n                                <LabelWithValue label=\"State of charge\"\r\n                                    value={currentPackSoc === \"0\" ? 0 : (currentPackSoc * 100).toFixed(2) || 0}\r\n                                    units={this.props.units.systemSocUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Voltage\"\r\n                                    value={currentPackVoltage}\r\n                                    units={this.props.units.systemVoltageUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Current\"\r\n                                    value={currentPackCurrent}\r\n                                    units={this.props.units.systemCurrentUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Temperature\"\r\n                                    value={currentPackTemperature}\r\n                                    units={this.props.units.systemTempUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Power\"\r\n                                    value={currentPackPower}\r\n                                    units={this.props.units.systemPowerUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Status\"\r\n                                    value={currentPackStatus}\r\n                                    units={\"\"}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </CardBoxContainer>\r\n\r\n                <CardBoxContainer width=\"col-md-8\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\" style={{minHeight: \"295px\"}}>\r\n                            <Graph data={{labels: this.props.data.labels, values: this.props.data.packVoltage}} \r\n                                options={{\r\n                                    title: {display: true, text: \"Pack Voltage \" + `(${this.props.units.systemVoltageUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: 14, padding: 5},\r\n                                    scales: scales\r\n                                }}\r\n                                setScales={{\r\n                                    yAxes: {\r\n                                        min: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].min * this.props.cellsNumber,\r\n                                        max: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].max * this.props.cellsNumber,\r\n                                    }\r\n                                }}\r\n                                graphSettings={this.props.graphSettings} />\r\n                        </div>\r\n                        <div className=\"col-md-6\" style={{minHeight: \"295px\"}}>\r\n                            <Graph data={{labels: this.props.data.labels, values: this.props.data.packCurrent}} \r\n                                options={{\r\n                                    title: {display: true, text: \"Pack Current \" + `(${this.props.units.systemCurrentUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: 14, padding: 5},\r\n                                    scales: scales\r\n                                }}\r\n                                setScales={{\r\n                                    yAxes: {\r\n                                        min: this.props.units.axis.current[this.props.units.systemCurrentUnits].min * this.props.cellsNumber,\r\n                                        max: this.props.units.axis.current[this.props.units.systemCurrentUnits].max * this.props.cellsNumber,\r\n                                    }\r\n                                }}\r\n                                graphSettings={this.props.graphSettings} />\r\n                        </div>\r\n                    </div>\r\n                </CardBoxContainer>\r\n\r\n            </div>\r\n            <div className=\"row\">\r\n                <CardBoxContainer width=\"col-md-7\" theme={this.props.theme}>\r\n                    <StatusIndicatorsWidget indicatorsNames={this.props.indicatorsNames}\r\n                        blinkingStatus={this.props.blinkingStatus}\r\n                        boardConnected={this.props.boardConnected}\r\n                        demoModeActive={this.props.demoModeActive}\r\n                        theme={this.props.theme} />\r\n                </CardBoxContainer>\r\n                <CardBoxContainer width=\"col-md-5\" theme={this.props.theme}>\r\n                    <StatusIndicatorsHistory history={this.props.indicatorsHistory} theme={this.props.theme} />\r\n                </CardBoxContainer>\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default MainDashboard;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           CardBoxBatteryContainer.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass CardBoxBatteryContainer extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className={this.props.width + \" mx-auto\"}>\r\n                <div className={\"box shadow mt-3\" + (this.props.theme === \"light\" ? \" light-background\" : \"\")}\r\n                    style={{paddingLeft: \"0px\", paddingRight: \"10px\", paddingBottom: \"0px\", paddingTop: \"10px\"}} >\r\n                        {this.props.children}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default CardBoxBatteryContainer;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           BatteryWithGraph.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport VisibilitySensor from 'react-visibility-sensor'\r\n\r\nimport Battery from \"./Battery.jsx\"\r\nimport Graph from \"./Graph.jsx\"\r\n\r\nclass BatteryWithGraph extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.dropdownContextMenu = React.createRef();\r\n    this.voltageOption = React.createRef();\r\n    this.curentOption = React.createRef();\r\n    this.tempOption = React.createRef();\r\n    this.selectedOption = React.createRef();\r\n\r\n    this.voltageChartContainer = React.createRef();\r\n    this.currentChartContainer = React.createRef();\r\n    this.temperatureChartContainer = React.createRef();\r\n    this.balancingChartContainer = React.createRef();\r\n\r\n    this.state = {\r\n        visible: false,\r\n        selectedToShow: \"Voltage\",\r\n        units: this.props.units.systemVoltageUnits\r\n    }\r\n    this.chartReference = React.createRef();\r\n\r\n    this.contextMenuOpen = this.contextMenuOpen.bind(this);\r\n    this.menuOptionChange = this.menuOptionChange.bind(this);\r\n    this.adjustToSystemUnits = this.adjustToSystemUnits.bind(this);\r\n    this.visibilityChange = this.visibilityChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.body.addEventListener('click', () => {\r\n        if(this.dropdownContextMenu.current) {\r\n            this.dropdownContextMenu.current.classList.remove('show');\r\n            this.dropdownContextMenu.current.style.display = \"none\";\r\n        }\r\n    });\r\n    document.body.addEventListener('contextmenu', () => {\r\n        if(this.dropdownContextMenu.current) {\r\n            this.dropdownContextMenu.current.classList.remove('show');\r\n            this.dropdownContextMenu.current.style.display = \"none\";\r\n        }\r\n    });\r\n  }\r\n\r\n  contextMenuOpen(e) {\r\n    let top = e.clientY;\r\n    let left = e.clientX;\r\n    this.dropdownContextMenu.current.style.top = top + \"px\";\r\n    this.dropdownContextMenu.current.style.left = left + \"px\";\r\n    this.dropdownContextMenu.current.style.display = \"block\";\r\n    this.dropdownContextMenu.current.classList.add('show');\r\n    e.preventDefault();\r\n  }\r\n\r\n  menuOptionChange(e) {\r\n    this.voltageOption.current.classList.remove('active');\r\n    this.curentOption.current.classList.remove('active');\r\n    this.tempOption.current.classList.remove('active');\r\n    e.target.classList.add('active');\r\n    switch(e.target.innerText) {\r\n        case \"Voltage\":\r\n            this.voltageChartContainer.current.style.display = \"block\"\r\n            this.currentChartContainer.current.style.display = \"none\"\r\n            this.temperatureChartContainer.current.style.display = \"none\"\r\n            this.balancingChartContainer.current.style.display = \"none\"\r\n            this.setState(() => ({selectedToShow: \"Voltage\"}))\r\n            break;\r\n        case \"Current\":\r\n            this.voltageChartContainer.current.style.display = \"none\"\r\n            this.currentChartContainer.current.style.display = \"block\"\r\n            this.temperatureChartContainer.current.style.display = \"none\"\r\n            this.balancingChartContainer.current.style.display = \"none\"\r\n            this.setState(() => ({selectedToShow: \"Current\"}))\r\n            break;\r\n        case \"Temperature\":\r\n            this.voltageChartContainer.current.style.display = \"none\"\r\n            this.currentChartContainer.current.style.display = \"none\"\r\n            this.temperatureChartContainer.current.style.display = \"block\"\r\n            this.balancingChartContainer.current.style.display = \"none\"\r\n            this.setState(() => ({selectedToShow: \"Temperature\"}))\r\n            break;\r\n        case \"Balancing\":\r\n            this.voltageChartContainer.current.style.display = \"none\"\r\n            this.currentChartContainer.current.style.display = \"none\"\r\n            this.temperatureChartContainer.current.style.display = \"none\"\r\n            this.balancingChartContainer.current.style.display = \"block\"\r\n            this.setState(() => ({selectedToShow: \"Balancing\"}))\r\n        break;\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if(this.props.theme !== nextProps.theme || this.props.cellsNumber <= 6) {\r\n        return true\r\n    } else {\r\n        return this.state.visible\r\n    }\r\n  }\r\n\r\n//   componentDidUpdate() {\r\n//       console.log(this.props.id + \" updated\")\r\n//   }\r\n\r\n  adjustToSystemUnits() {\r\n    // for text units\r\n    switch(this.state.selectedToShow) {\r\n        case \"Voltage\":\r\n            this.state.units =  this.props.units.systemVoltageUnits\r\n            break;\r\n        case \"Current\":\r\n            this.state.units = this.props.units.systemCurrentUnits\r\n            break;\r\n        case \"Temperature\":\r\n            this.state.units = this.props.units.systemTempUnits\r\n            break;\r\n        default:\r\n            this.state.units = \"\"\r\n    }\r\n  }\r\n\r\n  visibilityChange(isVisible) {\r\n      this.setState(() => ({visible: isVisible}))\r\n  }\r\n\r\n  render() {\r\n    let options = {\r\n        scales: {\r\n            xAxes: [{\r\n                gridLines: {\r\n                    color: \"#90A4AE\",\r\n                },\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: this.props.theme === \"light\" ? \"black\" : \"white\"\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                ticks: {\r\n                    fontColor: this.props.theme === \"light\" ? \"black\" : \"white\"\r\n                },\r\n                gridLines: {\r\n                    color: \"#90A4AE\",\r\n                    zeroLineColor: \"#90A4AE\"\r\n                }   \r\n            }]\r\n        }\r\n    }\r\n    this.adjustToSystemUnits()\r\n    return (\r\n        <VisibilitySensor onChange={this.visibilityChange}>\r\n        <React.Fragment>\r\n            \r\n            <div onContextMenu={this.contextMenuOpen} className=\"row\" data-toggle=\"modal\" data-target={\"#bateryModal\" + this.props.id}>\r\n                <div className=\"col-md-12 text-center\">\r\n                    <p className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>\r\n                        Cell {this.props.id + 1} <span ref={this.selectedOption}>{this.state.selectedToShow} {this.state.units && \"(\"}</span>\r\n                        <span>{this.state.units}{this.state.units && \")\"}</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <div onContextMenu={this.contextMenuOpen} className=\"row\" data-toggle=\"modal\" data-target={\"#bateryModal\" + this.props.id}>\r\n                <div className=\"col-md-3\">\r\n                    <Battery positionStyle={{top: \"190px\", left: \"75px\"}}\r\n                        isCharging={this.props.cellData?.current[this.props.cellData?.current.length - 1] > 0 ? true : false}\r\n                        soc={this.props.cellData?.soc[this.props.cellData?.soc.length - 1]} />\r\n                </div>\r\n                <div className=\"col-md-9 text-center\">\r\n                    <div ref={this.voltageChartContainer} style={{minHeight: \"230px\"}}>\r\n                        <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.voltage}}\r\n                            options={options}\r\n                            setScales={{\r\n                                yAxes: {\r\n                                    min: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].min,\r\n                                    max: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].max,\r\n                                }\r\n                            }}\r\n                            graphSettings={this.props.graphSettings} />\r\n                    </div>\r\n                    <div ref={this.currentChartContainer} style={{display: \"none\", minHeight: \"230px\"}}>\r\n                        <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.current}}\r\n                            options={options}\r\n                            setScales={{\r\n                                yAxes: {\r\n                                    min: this.props.units.axis.current[this.props.units.systemCurrentUnits].min,\r\n                                    max: this.props.units.axis.current[this.props.units.systemCurrentUnits].max,\r\n                                }\r\n                            }}\r\n                            graphSettings={this.props.graphSettings} />\r\n                    </div>\r\n                    <div ref={this.balancingChartContainer} style={{display: \"none\", minHeight: \"230px\"}}>\r\n                        <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.balancing}}\r\n                            options={options}\r\n                            setScales={{\r\n                                yAxes: {\r\n                                    min: this.props.units.axis.balancing.min,\r\n                                    max: this.props.units.axis.balancing.max,\r\n                                }\r\n                            }}\r\n                            graphSettings={this.props.graphSettings} />\r\n                    </div>\r\n                    <div ref={this.temperatureChartContainer} style={{display: \"none\", minHeight: \"230px\"}}>\r\n                        <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.temp}}\r\n                            options={options}\r\n                            setScales={{\r\n                                yAxes: {\r\n                                    min: this.props.units.axis.temp[this.props.units.systemTempUnits].min,\r\n                                    max: this.props.units.axis.temp[this.props.units.systemTempUnits].max, \r\n                                }\r\n                            }}\r\n                            graphSettings={this.props.graphSettings} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div ref={this.dropdownContextMenu} className=\"dropdown-menu dropdown-menu-sm custom-context-menu\">\r\n                <a className=\"dropdown-item active\" ref={this.voltageOption} onClick={this.menuOptionChange}>Voltage</a>\r\n                <a className=\"dropdown-item\" ref={this.curentOption} onClick={this.menuOptionChange}>Balancing</a>\r\n                <a className=\"dropdown-item\" ref={this.tempOption} onClick={this.menuOptionChange}>Temperature</a>\r\n            </div>\r\n\r\n            {/* Modal */}\r\n            <div className=\"modal fade\" id={\"bateryModal\" + this.props.id} tabIndex=\"-1\" role=\"dialog\" aria-labelledby={\"bateryModalLabel\" + this.props.id} aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\" style={{maxWidth: \"1100px\"}}>\r\n                    <div className={\"modal-content\" + (this.props.theme === \"light\" ? \" light-background\" : \"\")}>\r\n                    <div className=\"modal-header\">\r\n                        <h5 className={\"modal-title\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")} id={\"bateryModalLabel\" + this.props.id}>Cell {this.props.id + 1} details</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                        {/* <span aria-hidden=\"true\">&times;</span> */}\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-4\" style={{minHeight: \"400px\"}}>\r\n                                <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.voltage}} \r\n                                    options={{...options, \r\n                                        title: {display: true, text: \"Cell Voltage \" + `(${this.props.units.systemVoltageUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: \"14\"},\r\n                                    }}\r\n                                    setScales={{\r\n                                        yAxes: {\r\n                                            min: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].min,\r\n                                            max: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].max,\r\n                                        }\r\n                                    }}\r\n                                    graphSettings={this.props.graphSettings} />\r\n                            </div>\r\n                            <div className=\"col-lg-4\" style={{minHeight: \"400px\"}}>\r\n                                <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.balancing}}\r\n                                    options={{...options, \r\n                                        title: {display: true, text: \"Cell Balancing \", fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: \"14\"},\r\n                                    }}\r\n                                    setScales={{\r\n                                        yAxes: {\r\n                                            min: this.props.units.axis.balancing.min,\r\n                                            max: this.props.units.axis.balancing.max,\r\n                                        }\r\n                                    }}\r\n                                    graphSettings={this.props.graphSettings} />\r\n                            </div>\r\n                            {/* <div className=\"col-lg-4\" style={{minHeight: \"400px\"}}>\r\n                                <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.current}}\r\n                                    options={{...options, \r\n                                        title: {display: true, text: \"Cell Current \" + `(${this.props.units.systemCurrentUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: \"14\"},\r\n                                    }}\r\n                                    setScales={{\r\n                                        yAxes: {\r\n                                            min: this.props.units.axis.current[this.props.units.systemCurrentUnits].min,\r\n                                            max: this.props.units.axis.current[this.props.units.systemCurrentUnits].max,\r\n                                        }\r\n                                    }}\r\n                                    graphSettings={this.props.graphSettings} />\r\n                            </div> */}\r\n                            <div className=\"col-lg-4\" style={{minHeight: \"400px\"}}>\r\n                                <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.temp}}\r\n                                    options={{...options, \r\n                                        title: {display: true, text: \"Cell Temperature \" + `(${this.props.units.systemTempUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: \"14\"},\r\n                                    }}\r\n                                    setScales={{\r\n                                        yAxes: {\r\n                                            min: this.props.units.axis.temp[this.props.units.systemTempUnits].min,\r\n                                            max: this.props.units.axis.temp[this.props.units.systemTempUnits].max,\r\n                                        }\r\n                                    }}\r\n                                    graphSettings={this.props.graphSettings} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        <button type=\"button\" className=\"btn btn-primary\">Save changes</button>\r\n                    </div> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </React.Fragment>\r\n        </VisibilitySensor>\r\n      );\r\n  }\r\n}\r\n\r\nexport default BatteryWithGraph;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           BatteryPack.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport CardBoxBatteryContainer from \"../helpers/CardBoxBatteryContainer.jsx\"\r\nimport BatteryWithGraph from \"./BatteryWithGraph.jsx\"\r\n\r\nclass BatteryPack extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"row\">\r\n                {\r\n                    [...Array(this.props.cellsNumber).keys()].map((element) => {\r\n                        return (\r\n                            <CardBoxBatteryContainer key={element} width=\"col-md-4\" theme={this.props.theme}>\r\n                                <BatteryWithGraph id={element}\r\n                                    cellsNumber={this.props.cellsNumber}\r\n                                    cellData={this.props.cellsData[element]}\r\n                                    units={this.props.units}\r\n                                    theme={this.props.theme}\r\n                                    boardConnected={this.props.boardConnected}\r\n                                    demoModeActive={this.props.demoModeActive}\r\n                                    graphSettings={this.props.graphSettings} />\r\n                            </CardBoxBatteryContainer>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default BatteryPack;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           TableRowFromVariable.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass TableRowFromVariable extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <tr>\r\n                <td scope=\"row\">Cell {this.props.id + 1}</td>\r\n                \r\n                    {\r\n                        this.props.values && this.props.values.length > 0 ?\r\n                            <td>{this.props.values[this.props.values.length - 1].toFixed(this.props.noDecimals ? 0 : 2)}</td> : \"0\"\r\n                    }\r\n                    \r\n                    { this.props.units && <td>{this.props.units}</td> }\r\n            </tr>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default TableRowFromVariable;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           RawDataTable.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport TableRowFromVariable from \"./TableRowFromVariable.jsx\"\r\n\r\nclass RawDataTable extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <table className={\"table table-striped table-sm text-center\" + (this.props.theme === \"light\" ? \"\" : \" table-dark\")}>\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Value</th>\r\n                        { this.props.units && <th scope=\"col\">Units</th> }\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        [...Array(this.props.cellsNumber).keys()].map((element) => (\r\n                            <TableRowFromVariable id={element} key={element}\r\n                                name={this.props.name}\r\n                                noDecimals={this.props.noDecimals}\r\n                                values={this.props.cellsData[element]}\r\n                                units={this.props.units} />\r\n                        ))\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default RawDataTable;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           RawData.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport VisibilitySensor from 'react-visibility-sensor'\r\n\r\nimport RawDataTable from \"./RawDataTable.jsx\"\r\nimport CardBoxContainer from \"../helpers/CardBoxContainer.jsx\"\r\n\r\nclass RawData extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        visible: false\r\n    }\r\n\r\n    this.visibilityChange = this.visibilityChange.bind(this);\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if(this.props.theme !== nextProps.theme) {\r\n        return true\r\n    } else {\r\n        return this.state.visible\r\n    }\r\n  }\r\n\r\n  visibilityChange(isVisible) {\r\n    this.setState(() => ({visible: isVisible}))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <VisibilitySensor onChange={this.visibilityChange} partialVisibility={true}>\r\n        <React.Fragment>\r\n            <div className=\"row\">\r\n                <CardBoxContainer width=\"col-md-4\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <span className=\"badge badge-primary ml-2 mb-2\" style={{fontSize: 22 + 'px'}}>\r\n                            <i className=\"fa fa-bolt mr-2\"></i>\r\n                            Voltage\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <RawDataTable cellsNumber={this.props.cellsNumber} cellsData={this.props.cellsData.map(element => element.voltage)}\r\n                            name=\"Voltage\" units={this.props.units.systemVoltageUnits} theme={this.props.theme} />\r\n                    </div>\r\n                </CardBoxContainer>\r\n\r\n                <CardBoxContainer width=\"col-md-4\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <span className=\"badge badge-primary ml-2 mb-2\" style={{fontSize: 22 + 'px'}}>\r\n                            <i className=\"fa fa-thermometer-half mr-2\"></i>\r\n                            Temperature\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <RawDataTable cellsNumber={this.props.cellsNumber} cellsData={this.props.cellsData.map(element => element.temp)}\r\n                            name=\"Temperature\" units={this.props.units.systemTempUnits} theme={this.props.theme} />\r\n                    </div>\r\n                </CardBoxContainer>\r\n\r\n                <CardBoxContainer width=\"col-md-4\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <span className=\"badge badge-primary ml-2 mb-2\" style={{fontSize: 22 + 'px'}}>\r\n                            <i className=\"fa fa-balance-scale mr-2\"></i>\r\n                            Balancing\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <RawDataTable cellsNumber={this.props.cellsNumber} cellsData={this.props.cellsData.map(element => element.balancing)}\r\n                            name=\"Balancing\" noDecimals={true} units={\"\"} theme={this.props.theme} />\r\n                    </div>\r\n                </CardBoxContainer>\r\n                {/* <CardBoxContainer width=\"col-md-4\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <span className=\"badge badge-primary ml-2 mb-2\" style={{fontSize: 22 + 'px'}}>\r\n                            <span style={{fontSize: 52 + 'px', fontWeight: \"400\", lineHeight: \"0.0\", position: \"absolute\", top: \"55px\"}}>\r\n                                &#9107;\r\n                            </span>\r\n                            <span style={{minWidth: \"100px\"}}>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n                            <span className=\"ml-2\">Current</span>\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <RawDataTable cellsNumber={this.props.cellsNumber} cellsData={this.props.cellsData.map(element => element.current)}\r\n                            name=\"Current\" units={this.props.units.systemCurrentUnits} theme={this.props.theme} />\r\n                    </div>\r\n                </CardBoxContainer> */}\r\n                \r\n            </div>\r\n        </React.Fragment>\r\n        </VisibilitySensor>\r\n      );\r\n  }\r\n}\r\n\r\nexport default RawData;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           ConnectionSettingsWidget.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport { toast } from 'react-toastify';\r\n\r\nimport \"../../../css/buttons.css\"\r\n\r\nclass ConnectionSettingsWidget extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        freemasterVersion: \"desktop\"\r\n    }\r\n\r\n    this.liteServerUrlInput = React.createRef();\r\n    this.connStringInput = React.createRef();\r\n    this.elfPathInput = React.createRef();\r\n    //creating a React references for each variable\r\n    this.variablesConfigsRefs = {};\r\n    Object.keys(this.props.variables).forEach((variable) => {\r\n        this.variablesConfigsRefs[variable] = {};\r\n        this.variablesConfigsRefs[variable].enabled = React.createRef();\r\n        this.variablesConfigsRefs[variable].name = React.createRef();\r\n        this.variablesConfigsRefs[variable].type = React.createRef();\r\n        this.variablesConfigsRefs[variable].size = React.createRef();\r\n    });\r\n\r\n    this.onInputChange = this.onInputChange.bind(this);\r\n    this.onelfPathInputChange = this.onelfPathInputChange.bind(this);\r\n    this.saveVarConfig = this.saveVarConfig.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.liteServerUrlInput.current.defaultValue = this.props.liteConnection.liteServerUrl\r\n    this.connStringInput.current.defaultValue = this.props.liteConnection.connString\r\n\r\n    this.elfPathInput.current.defaultValue = this.props.elfPath\r\n\r\n    //setting the initial variables config values\r\n    Object.keys(this.variablesConfigsRefs).forEach((ref) => {\r\n        this.variablesConfigsRefs[ref].enabled.current.checked = this.props.variables[ref].enabled\r\n        this.variablesConfigsRefs[ref].name.current.value = this.props.variables[ref].name\r\n        this.variablesConfigsRefs[ref].type.current.value = this.props.variables[ref].type.type\r\n        this.variablesConfigsRefs[ref].size.current.value = this.props.variables[ref].type.size\r\n    })\r\n  }\r\n\r\n  componentDidUpdate() {\r\n      if(this.state.freemasterVersion === \"desktop\") {\r\n        this.liteServerUrlInput.current.defaultValue = \"localhost:41000\"\r\n        this.connStringInput.current.defaultValue = \"Managed from Desktop Application\"\r\n        this.elfPathInput.current.defaultValue = \"Managed from Desktop Application\"\r\n      }\r\n      if(this.state.freemasterVersion === \"lite\") {\r\n        this.liteServerUrlInput.current.defaultValue = \"localhost:8090\"\r\n        this.connStringInput.current.defaultValue = \"RS232;port=COM3;speed=115200;\"\r\n        this.elfPathInput.current.defaultValue = \"bms\\\\bms_s32k_mc33772b_spi.elf\"\r\n      }\r\n      this.liteServerUrlInput.current.defaultValue = this.props.liteConnection.liteServerUrl\r\n      this.connStringInput.current.defaultValue = this.props.liteConnection.connString\r\n\r\n      this.elfPathInput.current.defaultValue = this.props.elfPath\r\n  }\r\n\r\n  onInputChange() {\r\n    this.props.changeLiteConnection({\r\n        liteServerUrl: this.liteServerUrlInput.current.value,\r\n        connString: this.connStringInput.current.value\r\n    })\r\n  }\r\n\r\n  onelfPathInputChange() {\r\n      this.props.changeElfPath(this.elfPathInput.current.value)\r\n  }\r\n\r\n  saveVarConfig() {\r\n    if(this.props.boardConnected) {\r\n        toast.error(\" Disconnect from the board before changing the variables configuration.\")\r\n        return;\r\n    }\r\n    let newConfig = {};\r\n    Object.keys(this.variablesConfigsRefs).forEach((ref) => {\r\n        newConfig[ref] = {\r\n            enabled: this.variablesConfigsRefs[ref].enabled.current.checked,\r\n            label: this.props.variables[ref].label,\r\n            name: this.variablesConfigsRefs[ref].name.current.value,\r\n            type: {\r\n                type: this.variablesConfigsRefs[ref].type.current.value,\r\n                size: Number(this.variablesConfigsRefs[ref].size.current.value)\r\n            }\r\n        }\r\n    })\r\n    this.props.changeVariablesConfiguration(newConfig, () => toast.success(\" Configuration saved.\"))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <form>\r\n                <label>Freemaster Version</label>\r\n                <div className=\"form-row mb-2\">\r\n                    <div className=\"col text-center mx-auto\">\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"radio\" name=\"freemasterVersion\" id=\"desktopRadio\" value=\"desktop\"\r\n                                checked={this.props.freemasterVersion === \"desktop\"}\r\n                                onClick={() => {\r\n                                    this.setState({freemasterVersion: \"desktop\"})\r\n                                    this.props.onSelectedFreemasterVersion(\"desktop\")\r\n                                    this.props.changeLiteConnection({\r\n                                        liteServerUrl: \"localhost:41000\",\r\n                                        connString: \"Managed from Desktop Application\"\r\n                                    })\r\n                                    this.props.changeElfPath(\"Managed from Desktop Application\")\r\n                                }} />\r\n                            <label className=\"form-check-label\" htmlFor=\"desktopRadio\">\r\n                                Desktop\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"radio\" name=\"freemasterVersion\" id=\"liteRadio\" value=\"lite\"\r\n                                checked={this.props.freemasterVersion === \"lite\"}\r\n                                onClick={() => {\r\n                                    this.setState({freemasterVersion: \"lite\"})\r\n                                    this.props.onSelectedFreemasterVersion(\"lite\")\r\n                                    this.props.changeLiteConnection({\r\n                                        liteServerUrl: \"localhost:8090\",\r\n                                        connString: \"RS232;port=COM3;speed=115200;\"\r\n                                    })\r\n                                    this.props.changeElfPath(\"bms\\\\bms_s32k_mc33772b_spi.elf\")\r\n                                }} />\r\n                            <label className=\"form-check-label\" htmlFor=\"liteRadio\">\r\n                                Lite\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <label>Freemaster Server URL</label>\r\n                <div className=\"form-row\">\r\n                    <div className=\"input-group mb-1\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"server-addon\">\r\n                                <i className=\"fa fa-server\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <input ref={this.liteServerUrlInput} type=\"text\"\r\n                            disabled={this.state.freemasterVersion === \"desktop\"}\r\n                            onChange={this.onInputChange}\r\n                            className=\"form-control\"\r\n                            placeholder=\"Freemaster Server URL (ex:localhost:8090)\"\r\n                            aria-label=\"Server\" aria-describedby=\"server-addon\" />\r\n                    </div>\r\n                </div>\r\n                <label>Connection String</label>\r\n                <div className=\"form-row\">\r\n                    <div className=\"input-group mb-1\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"connstring-addon\">\r\n                                <i className=\"fa fa-plug\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <input ref={this.connStringInput} type=\"text\"\r\n                            disabled={this.state.freemasterVersion === \"desktop\"}\r\n                            onChange={this.onInputChange}\r\n                            className=\"form-control\"\r\n                            placeholder=\"Connection String (ex:RS232;port=COM3;speed=115200;)\"\r\n                            aria-label=\"ConnectionString\" aria-describedby=\"connstring-addon\" />\r\n                    </div>\r\n                </div>\r\n                <label>ELF File</label>\r\n                <div className=\"form-row\">\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"elfpath-addon\">\r\n                                <i className=\"fa fa-file\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <input ref={this.elfPathInput} type=\"text\"\r\n                            disabled={this.state.freemasterVersion === \"desktop\"}\r\n                            onChange={this.onelfPathInputChange}\r\n                            className=\"form-control\"\r\n                            placeholder=\"ex: bms_s32k.elf\"\r\n                            aria-label=\"ElfPath\" aria-describedby=\"elfpath-addon\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-row\">\r\n                    <div className=\"col text-center\">\r\n                        <a className={\"btn btn-primary btn-large mt-3 white-text-button\"} style={{marginBottom: \"-20px\"}}\r\n                            role=\"button\" data-toggle=\"modal\" data-target=\"#variablesConfigModal\">\r\n                            Variables Configuration\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n            {/* Variables Config Modal */}\r\n            <div class=\"modal fade\" id=\"variablesConfigModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"variablesConfigModalLabel\" aria-hidden=\"true\">\r\n                <div class=\"modal-dialog\" role=\"document\" style={{maxWidth: \"800px\"}}>\r\n                    <div class={\"modal-content\" + (this.props.theme === \"light\" ? \" light-background\" : \"\")}>\r\n                    <div class=\"modal-header\">\r\n                        <h5 class={\"modal-title\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")} id=\"variablesConfigModalLabel\">Variables Configuration</h5>\r\n                    </div>\r\n                    <div class=\"modal-body mb-3\">\r\n                        <div class=\"row\">\r\n                            <label class={\"col-sm-3 col-form-label text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>Enabled</label>\r\n                            <label class={\"col-sm-4 col-form-label text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>Name</label>\r\n                            <label class={\"col-sm-3 col-form-label text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>Type</label>\r\n                            <label class={\"col-sm-2 col-form-label text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>Size</label>\r\n                        </div>\r\n                        {\r\n                            Object.keys(this.props.variables).map((variable) => (\r\n                                <div class=\"row mt-2\">\r\n                                    <div className=\"col-sm-3 text-center mt-2\">\r\n                                        <div class=\"form-check\">\r\n                                            <input ref={this.variablesConfigsRefs[variable].enabled} class=\"form-check-input\" type=\"checkbox\" id={\"enabledCheckbox\" + variable} />\r\n                                            <label class={\"form-check-label\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")} for={\"enabledCheckbox\" + variable}>\r\n                                                {this.props.variables[variable].label}\r\n                                            </label>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-sm-4\">\r\n                                        <input ref={this.variablesConfigsRefs[variable].name} type=\"text\" class=\"form-control\" />\r\n                                    </div>\r\n                                    <div className=\"col-sm-3\">\r\n                                        <select ref={this.variablesConfigsRefs[variable].type} className=\"form-control mx-auto\">\r\n                                            <option selected={this.props.variables[variable].type.type === \"uchar\"} value=\"uchar\">uchar</option>\r\n                                            <option selected={this.props.variables[variable].type.type === \"char\"} value=\"char\">char</option>\r\n                                            <option selected={this.props.variables[variable].type.type === \"uint\"} value=\"uint\">uint</option>\r\n                                            <option selected={this.props.variables[variable].type.type === \"int\"} value=\"int\">int</option>\r\n                                            <option selected={this.props.variables[variable].type.type === \"float\"} value=\"float\">float</option>\r\n                                            <option selected={this.props.variables[variable].type.type === \"double\"} value=\"double\">double</option>\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"col-sm-2\">\r\n                                        <select ref={this.variablesConfigsRefs[variable].size} className=\"form-control mx-auto\">\r\n                                            <option selected={this.props.variables[variable].type.size === 1} value=\"1\">1</option>\r\n                                            <option selected={this.props.variables[variable].type.size === 2} value=\"2\">2</option>\r\n                                            <option selected={this.props.variables[variable].type.size === 4} value=\"4\">4</option>\r\n                                            <option selected={this.props.variables[variable].type.size === 8} value=\"8\">8</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" onClick={this.saveVarConfig}>Save changes</button>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ConnectionSettingsWidget;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           DataRecorderSettingsWidget.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport \"../../../css/buttons.css\"\r\n\r\nclass DataRecorderSettingsWidget extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n\r\n//   }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <form>\r\n                <label>Recorded Parameters</label>\r\n                <div className=\"form-row\">\r\n                    <div className=\"col text-center mx-auto\">\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name=\"recordedParams\" id=\"voltageCheckbox\" value=\"voltage\" defaultChecked\r\n                                onClick={() => this.props.onSelectedRecordParamsToggle(\"voltage\")} />\r\n                            <label className=\"form-check-label\" htmlFor=\"voltageCheckbox\">\r\n                                Voltage\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name=\"recordedParams\" id=\"currentCheckbox\" value=\"current\" defaultChecked\r\n                                onClick={() => this.props.onSelectedRecordParamsToggle(\"current\")} />\r\n                            <label className=\"form-check-label\" htmlFor=\"currentCheckbox\">\r\n                                Current\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name=\"recordedParams\" id=\"temperatureCheckbox\" value=\"temperature\" defaultChecked\r\n                                onClick={() => this.props.onSelectedRecordParamsToggle(\"temperature\")} />\r\n                            <label className=\"form-check-label\" htmlFor=\"temperatureCheckbox\">\r\n                                Temperature\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name=\"recordedParams\" id=\"socCheckbox\" value=\"soc\" defaultChecked\r\n                                onClick={() => this.props.onSelectedRecordParamsToggle(\"soc\")} />\r\n                            <label className=\"form-check-label\" htmlFor=\"socCheckbox\">\r\n                                SoC\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default DataRecorderSettingsWidget;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           ChartSettingsWidget.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\n\r\nclass ChartSettingsWidget extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className=\"form-row\">\r\n                <div className=\"col text-center mx-auto\">\r\n                    <div className=\"form-check-inline\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" name=\"chartParams\" id=\"autoScalingCheckbox\" value=\"autoScaling\" defaultChecked\r\n                            onClick={() => this.props.onToggleAutoScaling()} />\r\n                        <label className=\"form-check-label\" htmlFor=\"autoScalingCheckbox\">\r\n                            Auto scaling axes\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"form-check-inline\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" name=\"chartParams\" id=\"animationsCheckbox\" value=\"animations\" defaultChecked\r\n                            onClick={() => this.props.onToggleAnimations()} />\r\n                        <label className=\"form-check-label\" htmlFor=\"animationsCheckbox\">\r\n                            Animations\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ChartSettingsWidget;\r\n","// The MIT License (MIT)\r\n\r\n// Copyright (c) 2014 Artem Prigoda\r\n\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n// SOFTWARE.\r\n/* eslint-disable */\r\nvar _Promise = Promise;\r\n\r\nif (typeof _Promise === 'undefined') {\r\n    _Promise = root.Promise;\r\n}\r\n\r\nif (_Promise === undefined) {\r\n    throw 'Promise is not supported! Use latest version node/browser or promise-polyfill';\r\n}\r\n\r\nvar isUndefined = function (value) {\r\n    return value === undefined;\r\n};\r\n\r\nvar isArray = Array.isArray;\r\n\r\nvar isObject = function (value) {\r\n    var type = typeof value;\r\n    return value != null && (type == 'object' || type == 'function');\r\n};\r\n\r\nvar isFunction = function (target) {\r\n    return typeof target === 'function'\r\n};\r\n\r\nvar isString = function (value) {\r\n    return typeof value === 'string';\r\n};\r\n\r\nvar isEmpty = function (value) {\r\n    if (isObject(value)) {\r\n        for (var idx in value) {\r\n            if (value.hasOwnProperty(idx)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    if (isArray(value)) {\r\n        return !value.length;\r\n    }\r\n    return !value;\r\n};\r\n\r\nvar forEach = function (target, callback) {\r\n    if (isArray(target)) {\r\n        return target.map(callback);\r\n    }\r\n    else {\r\n        for (var _key in target) {\r\n            if (target.hasOwnProperty(_key)) {\r\n                callback(target[_key]);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nvar clone = function (value) {\r\n    return JSON.parse(JSON.stringify(value));\r\n};\r\n\r\nvar ERRORS = {\r\n    \"PARSE_ERROR\": {\r\n        \"code\": -32700,\r\n        \"message\": \"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\"\r\n    },\r\n    \"INVALID_REQUEST\": {\r\n        \"code\": -32600,\r\n        \"message\": \"Invalid Request. The JSON sent is not a valid Request object.\"\r\n    },\r\n    \"METHOD_NOT_FOUND\": {\r\n        \"code\": -32601,\r\n        \"message\": \"Method not found. The method does not exist / is not available.\"\r\n    },\r\n    \"INVALID_PARAMS\": {\r\n        \"code\": -32602,\r\n        \"message\": \"Invalid params. Invalid method parameter(s).\"\r\n    },\r\n    \"INTERNAL_ERROR\": {\r\n        \"code\": -32603,\r\n        \"message\": \"Internal error. Internal JSON-RPC error.\"\r\n    }\r\n};\r\n\r\nfunction ServerError(code, message, data) {\r\n    this.message = message || \"\";\r\n    this.code = code || -32000;\r\n\r\n    if (Boolean(data)) {\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nServerError.prototype = new Error();\r\n\r\nvar simple_jsonrpc = function () {\r\n\r\n    var self = this,\r\n        waitingframe = {},\r\n        id = 0,\r\n        dispatcher = {};\r\n\r\n\r\n    function setError(jsonrpcError, exception) {\r\n        var error = clone(jsonrpcError);\r\n        if (!!exception) {\r\n            if (isObject(exception) && exception.hasOwnProperty(\"message\")) {\r\n                error.data = exception.message;\r\n            }\r\n            else if (isString(exception)) {\r\n                error.data = exception;\r\n            }\r\n\r\n            if (exception instanceof ServerError) {\r\n                error = {\r\n                    message: exception.message,\r\n                    code: exception.code\r\n                };\r\n                if (exception.hasOwnProperty('data')) {\r\n                    error.data = exception.data;\r\n                }\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n\r\n    function isPromise(thing) {\r\n        return !!thing && 'function' === typeof thing.then;\r\n    }\r\n\r\n    function isError(message) {\r\n        return !!message.error;\r\n    }\r\n\r\n    function isRequest(message) {\r\n        return !!message.method;\r\n    }\r\n\r\n    function isResponse(message) {\r\n        return message.hasOwnProperty('result') && message.hasOwnProperty('id');\r\n    }\r\n\r\n    function beforeResolve(message) {\r\n        var promises = [];\r\n        if (isArray(message)) {\r\n            forEach(message, function (msg) {\r\n                promises.push(resolver(msg));\r\n            });\r\n        }\r\n        else if (isObject(message)) {\r\n            promises.push(resolver(message));\r\n        }\r\n\r\n        return _Promise.all(promises)\r\n            .then(function (result) {\r\n\r\n                var toStream = [];\r\n                forEach(result, function (r) {\r\n                    if (!isUndefined(r)) {\r\n                        toStream.push(r);\r\n                    }\r\n                });\r\n\r\n                if (toStream.length === 1) {\r\n                    self.toStream(JSON.stringify(toStream[0]));\r\n                }\r\n                else if (toStream.length > 1) {\r\n                    self.toStream(JSON.stringify(toStream));\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    function resolver(message) {\r\n        try {\r\n            if (isError(message)) {\r\n                return rejectRequest(message);\r\n            }\r\n            else if (isResponse(message)) {\r\n                return resolveRequest(message);\r\n            }\r\n            else if (isRequest(message)) {\r\n                return handleRemoteRequest(message);\r\n            }\r\n            else {\r\n                return _Promise.resolve({\r\n                    \"id\": null,\r\n                    \"jsonrpc\": \"2.0\",\r\n                    \"error\": setError(ERRORS.INVALID_REQUEST)\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error('Resolver error:' + e.message, e);\r\n            return _Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    function rejectRequest(error) {\r\n        if (waitingframe.hasOwnProperty(error.id)) {\r\n            waitingframe[error.id].reject(error.error);\r\n        }\r\n        else {\r\n            console.log('Unknown request', error);\r\n        }\r\n    }\r\n\r\n    function resolveRequest(result) {\r\n        if (waitingframe.hasOwnProperty(result.id)) {\r\n            waitingframe[result.id].resolve(result.result);\r\n            delete waitingframe[result.id];\r\n        }\r\n        else {\r\n            console.log('unknown request', result);\r\n        }\r\n    }\r\n\r\n    function handleRemoteRequest(request) {\r\n        console.log(\"handleRemoteRequest -- simple jrpc js\")\r\n        if (dispatcher.hasOwnProperty(request.method)) {\r\n            try {\r\n                var result;\r\n\r\n                if (request.hasOwnProperty('params')) {\r\n                    if (dispatcher[request.method].params == \"pass\") {\r\n                        result = dispatcher[request.method].fn.call(dispatcher, request.params);\r\n                    }\r\n                    else if (isArray(request.params)) {\r\n                        result = dispatcher[request.method].fn.apply(dispatcher, request.params);\r\n                    }\r\n                    else if (isObject(request.params)) {\r\n                        if (dispatcher[request.method].params instanceof Array) {\r\n                            var argsValues = [];\r\n                            dispatcher[request.method].params.forEach(function (arg) {\r\n\r\n                                if (request.params.hasOwnProperty(arg)) {\r\n                                    argsValues.push(request.params[arg]);\r\n                                    delete request.params[arg];\r\n                                }\r\n                                else {\r\n                                    argsValues.push(undefined);\r\n                                }\r\n                            });\r\n\r\n                            if (Object.keys(request.params).length > 0) {\r\n                                return _Promise.resolve({\r\n                                    \"jsonrpc\": \"2.0\",\r\n                                    \"id\": request.id,\r\n                                    \"error\": setError(ERRORS.INVALID_PARAMS, {\r\n                                        message: \"Params: \" + Object.keys(request.params).toString() + \" not used\"\r\n                                    })\r\n                                });\r\n                            }\r\n                            else {\r\n                                result = dispatcher[request.method].fn.apply(dispatcher, argsValues);\r\n                            }\r\n                        }\r\n                        else {\r\n                            return _Promise.resolve({\r\n                                \"jsonrpc\": \"2.0\",\r\n                                \"id\": request.id,\r\n                                \"error\": setError(ERRORS.INVALID_PARAMS, \"Undeclared arguments of the method \" + request.method)\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    result = dispatcher[request.method].fn();\r\n                }\r\n\r\n                if (request.hasOwnProperty('id')) {\r\n                    if (isPromise(result)) {\r\n                        return result.then(function (res) {\r\n                            if (isUndefined(res)) {\r\n                                res = true;\r\n                            }\r\n                            return {\r\n                                \"jsonrpc\": \"2.0\",\r\n                                \"id\": request.id,\r\n                                \"result\": res\r\n                            };\r\n                        })\r\n                            .catch(function (e) {\r\n                                return {\r\n                                    \"jsonrpc\": \"2.0\",\r\n                                    \"id\": request.id,\r\n                                    \"error\": setError(ERRORS.INTERNAL_ERROR, e)\r\n                                };\r\n                            });\r\n                    }\r\n                    else {\r\n\r\n                        if (isUndefined(result)) {\r\n                            result = true;\r\n                        }\r\n\r\n                        return _Promise.resolve({\r\n                            \"jsonrpc\": \"2.0\",\r\n                            \"id\": request.id,\r\n                            \"result\": result\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    return _Promise.resolve(); //nothing, it notification\r\n                }\r\n            }\r\n            catch (e) {\r\n                return _Promise.resolve({\r\n                    \"jsonrpc\": \"2.0\",\r\n                    \"id\": request.id,\r\n                    \"error\": setError(ERRORS.INTERNAL_ERROR, e)\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            return _Promise.resolve({\r\n                \"jsonrpc\": \"2.0\",\r\n                \"id\": request.id,\r\n                \"error\": setError(ERRORS.METHOD_NOT_FOUND, {\r\n                    message: request.method\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    function notification(method, params) {\r\n        var message = {\r\n            \"jsonrpc\": \"2.0\",\r\n            \"method\": method,\r\n            \"params\": params\r\n        };\r\n\r\n        if (isObject(params) && !isEmpty(params)) {\r\n            message.params = params;\r\n        }\r\n\r\n        return message;\r\n    }\r\n\r\n    function call(method, params) {\r\n        id += 1;\r\n        var message = {\r\n            \"jsonrpc\": \"2.0\",\r\n            \"method\": method,\r\n            \"id\": id\r\n        };\r\n\r\n        if (isObject(params) && !isEmpty(params)) {\r\n            message.params = params;\r\n        }\r\n\r\n        return {\r\n            promise: new _Promise(function (resolve, reject) {\r\n                waitingframe[id.toString()] = {\r\n                    resolve: resolve,\r\n                    reject: reject\r\n                };\r\n            }),\r\n            message: message\r\n        };\r\n    }\r\n\r\n    self.toStream = function (a) {\r\n        console.log('Need define the toStream method before use');\r\n        console.log(arguments);\r\n    };\r\n\r\n    self.dispatch = function (functionName, paramsNameFn, fn) {\r\n\r\n        if (isString(functionName) && paramsNameFn == \"pass\" && isFunction(fn)) {\r\n            dispatcher[functionName] = {\r\n                fn: fn,\r\n                params: paramsNameFn\r\n            };\r\n        }\r\n        else if (isString(functionName) && isArray(paramsNameFn) && isFunction(fn)) {\r\n            dispatcher[functionName] = {\r\n                fn: fn,\r\n                params: paramsNameFn\r\n            };\r\n        }\r\n        else if (isString(functionName) && isFunction(paramsNameFn) && isUndefined(fn)) {\r\n            dispatcher[functionName] = {\r\n                fn: paramsNameFn,\r\n                params: null\r\n            };\r\n        }\r\n        else {\r\n            throw new Error('Missing required argument: functionName - string, paramsNameFn - string or function');\r\n        }\r\n    };\r\n\r\n    self.on = self.dispatch;\r\n\r\n    self.off = function (functionName) {\r\n      delete dispatcher[functionName];\r\n    };\r\n\r\n    self.call = function (method, params) {\r\n        var _call = call(method, params);\r\n        self.toStream(JSON.stringify(_call.message));\r\n        return _call.promise;\r\n    };\r\n\r\n    self.notification = function (method, params) {\r\n        self.toStream(JSON.stringify(notification(method, params)));\r\n    };\r\n\r\n    self.batch = function (requests) {\r\n        var promises = [];\r\n        var message = [];\r\n\r\n        forEach(requests, function (req) {\r\n            if (req.hasOwnProperty('call')) {\r\n                var _call = call(req.call.method, req.call.params);\r\n                message.push(_call.message);\r\n                //TODO(jershell): batch reject if one promise reject, so catch reject and resolve error as result;\r\n                promises.push(_call.promise.then(function (res) {\r\n                    return res;\r\n                }, function (err) {\r\n                    return err;\r\n                }));\r\n            }\r\n            else if (req.hasOwnProperty('notification')) {\r\n                message.push(notification(req.notification.method, req.notification.params));\r\n            }\r\n        });\r\n\r\n        self.toStream(JSON.stringify(message));\r\n        return _Promise.all(promises);\r\n    };\r\n\r\n    self.messageHandler = function (rawMessage) {\r\n        try {\r\n            var message = JSON.parse(rawMessage);\r\n            return beforeResolve(message);\r\n        }\r\n        catch (e) {\r\n            console.log(\"Error in messageHandler(): \", e);\r\n            self.toStream(JSON.stringify({\r\n                \"id\": null,\r\n                \"jsonrpc\": \"2.0\",\r\n                \"error\": ERRORS.PARSE_ERROR\r\n            }));\r\n            return _Promise.reject(e);\r\n        }\r\n    };\r\n\r\n    self.customException = function (code, message, data) {\r\n        return new ServerError(code, message, data);\r\n    };\r\n};\r\n\r\nexport default simple_jsonrpc;","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2018-2019 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           freemaster-client.js\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\n\r\n/**\r\n * @typedef {Object} CommPortInfo\r\n *\r\n * Communication port information.\r\n *\r\n * @property {string} name              Communication port friendly name\r\n * @property {string} description       Communication port description\r\n * @property {string} connection_string Connection string\r\n * @property {string} elf               Elf file path\r\n */\r\n\r\n/**\r\n * @typedef {Object} BoardInfo\r\n *\r\n * Detected board information.\r\n *\r\n * @property {number} protVer      Protocol version\r\n * @property {number} cfgFlags     Configuration flags\r\n * @property {number} dataBusWdt   Data bus width\r\n * @property {number} globVerMajor Major version\r\n * @property {number} globVerMinor Minor version\r\n * @property {number} cmdBuffSize  Command buffer size\r\n * @property {number} recBuffSize  Receive buffer size\r\n * @property {number} recTimeBase  Recirder time base\r\n * @property {string} descr        Description\r\n */\r\n\r\n/**\r\n * @typedef {Object} SymbolInfo\r\n *\r\n * Symbol information.\r\n *\r\n * @property {string} name Symbol name\r\n * @property {number} addr Symbol address\r\n * @property {number} size Symbol size\r\n * @property {string} type Symbol type\r\n */\r\n\r\n/**\r\n * @typedef {Object} VariableInfo\r\n *\r\n * Variable information.\r\n *\r\n * @property {string} name    Variable name\r\n * @property {number} addr    Variable address\r\n * @property {string} type    Variable type (int, uint, fract, ufract, float, or double)\r\n * @property {number} size    Variable size (1, 2, 4, or 8)\r\n * @property {number} [shift] Number of shift positions (integer variable)\r\n * @property {number} [mask]  And mask applied on integer variable\r\n * @property {number} q_n     Number of bits designating fractional portion of fractional variable\r\n * @property {number} q_m     Number of bits designating integer portion of fractional variable\r\n */\r\n\r\n/**\r\n * @typedef {Object} RecorderLimits\r\n *\r\n * Recorder limits.\r\n *\r\n * @property {number} baseRate_ns   Base time at which recorder operates in nanoseconds (0 when unknown or not deterministic)\r\n * @property {number} buffSize      Total recorder memory size\r\n * @property {number} recStructSize Overhead structure size (protcol version > 4.0)\r\n * @property {number} varStructSize Per-variable overhead structure size (protcol version > 4.0)\r\n */\r\n\r\n/**\r\n * @typedef {Object} RecorderConfig\r\n *\r\n * Recorder configuration.\r\n *\r\n * @property {number} pointsTotal      Total number of recorded points per variable\r\n * @property {number} pointsPreTrigger Number of recorded points before trigger\r\n * @property {number} timeDiv          Time-base multiplier\r\n */\r\n\r\n/**\r\n * @typedef {Object} TriggerVariable\r\n *\r\n * Recorder variable information.\r\n *\r\n * @property {string} name    Variable name\r\n * @property {number} trgType Trigger type\r\n *\r\n * | Mask | Description                            |\r\n * | :--- | :--------------------------------------|\r\n * | 0x04 | trigger-only                           |\r\n * | 0x10 | trigger on rising edge _/              |\r\n * | 0x20 | trigger on falling edge \\_             |\r\n * | 0x40 | 0=normal edge trigger, 1=level trigger |\r\n * | 0x80 | use variable threshold                 |\r\n * @property {number} trgThr Trigger trashold\r\n */\r\n\r\n/* eslint-disable */\r\nimport simple_jsonrpc from \"./simple-jsonrpc-js\"\r\n\r\nvar root = {}\r\nroot.simple_jsonrpc = simple_jsonrpc\r\nroot.WebSocket = WebSocket\r\n\r\n\r\nvar PCM = function(url, onSocketOpen, onSocketClose, onSocketError) {\r\n\r\n    var jrpc = new root.simple_jsonrpc();\r\n    var socket = new root.WebSocket(\"ws://\" + url);\r\n\r\n    this.OnServerError = console.log;\r\n    this.OnSocketOpen = onSocketOpen || console.log;\r\n    this.OnSocketClose = onSocketClose || console.log;\r\n    this.OnSocketError = onSocketError || console.log;\r\n\r\n    jrpc.toStream = function(_msg) {\r\n        socket.send(_msg);\r\n    };\r\n\r\n    socket.onopen = function(event) {\r\n        this.OnSocketOpen(event);\r\n    }.bind(this);\r\n\r\n    socket.onclose = function(event) {\r\n        this.OnSocketClose(event);\r\n    }.bind(this);\r\n\r\n    socket.onerror = function(event) {\r\n        this.OnSocketError(event);\r\n    }.bind(this);\r\n\r\n    socket.onmessage = function(event) {\r\n        jrpc.messageHandler(event.data);\r\n    };\r\n\r\n    function SendRequest(method, args) {\r\n        return new Promise((resolve, reject) => {\r\n            jrpc.call(method, args)\r\n                .then((response) => {\r\n                    if(response.success)\r\n                        resolve(response);\r\n                    else\r\n                        reject(response.error);\r\n                 })\r\n                 .catch((error) => {\r\n                     this.OnServerError(error);\r\n                 });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Requests Freemaster Lite service version.\r\n     *\r\n     * @example\r\n     * pcm.GetAppVersion().then(response => console.log(\"App version \", response.data));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing the version.\r\n     */\r\n    this.GetAppVersion = function() {\r\n        return SendRequest.call(this, 'GetAppVersion');\r\n    };\r\n\r\n    /**\r\n     * Requests communication port name (defined in project file) by index.\r\n     * @see {@link PCM#GetCommPortInfo GetCommPortInfo}\r\n     *\r\n     * @example\r\n     * let index = 0;\r\n     * do {\r\n     *     try {\r\n     *         let response = await pcm.EnumCommPorts(index);\r\n     *         console.log(response.data);\r\n     *         index = index + 1;\r\n     *     } catch (err) {\r\n     *         break;\r\n     *     }\r\n     * } while (true);\r\n     *\r\n     * @param   {number} index Communication port index.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing the connection friendly name.\r\n     */\r\n    this.EnumCommPorts = function(index) {\r\n        return SendRequest.call(this, 'EnumCommPorts', [index]);\r\n    };\r\n\r\n    /**\r\n     * Requests communication port information (defined in project file).\r\n     * @see {@link PCM#EnumCommPorts EnumCommPorts}\r\n     *\r\n     * @example\r\n     * pcm.EnumCommPorts(0).then(response => {\r\n     *     pcm.GetCommPortInfo(response.data).then(response => {\r\n     *         console.log(response.data);\r\n     *     });\r\n     * });\r\n     *\r\n     * @param   {string} name Communiation port friendly name returned by {@link PCM#EnumCommPorts EnumCommPorts}\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link CommPortInfo CommPortInfo}.\r\n     */\r\n    this.GetCommPortInfo = function(name) {\r\n        return SendRequest.call(this, 'GetCommPortInfo', [name]);\r\n    };\r\n\r\n    /**\r\n     * Starts communication using connection friendly name.\r\n     *\r\n     * @example\r\n     * pcm.StartComm(\"PortX\").then(() => console.log(\"Communication port open.\"));\r\n     *\r\n     * @param   {string} name Connection friendly name (defined in project file).\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.StartComm = function(name) {\r\n        return SendRequest.call(this, 'StartComm', [name]);\r\n    };\r\n\r\n    /**\r\n     * Stops communication.\r\n     *\r\n     * @example\r\n     * pcm.StopComm().then(() => console.log(\"Communication port closed.\"));\r\n     *\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.StopComm = function() {\r\n        return SendRequest.call(this, 'StopComm');\r\n    };\r\n\r\n    /**\r\n     * Checks if communication port is open.\r\n     *\r\n     * @example\r\n     * pcm.IsCommPortOpen().then(response => console.log(\"Is port open ? \", response.data));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type bool.\r\n     */\r\n    this.IsCommPortOpen = function() {\r\n        return SendRequest.call(this, 'IsCommPortOpen');\r\n    };\r\n\r\n    /**\r\n     * Checks if the board was detected.\r\n     *\r\n     * @example\r\n     * pcm.IsBoardDetected().then(response => console.log(\"Is board detected ? \", response.data));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type bool.\r\n     */\r\n    this.IsBoardDetected = function() {\r\n        return SendRequest.call(this, 'IsBoardDetected');\r\n    };\r\n\r\n    /**\r\n     * Requests detected board information.\r\n     *\r\n     * @example\r\n     * pcm.GetDetectedBoardInfo().then(response => console.log(\"Board information: \", response.data));\r\n     *\r\n     * @deprecated Since protocol version 4.0\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link BoardInfo BoardInfo} representing board information.\r\n     */\r\n    this.GetDetectedBoardInfo = function() {\r\n        return SendRequest.call(this, 'GetDetectedBoardInfo');\r\n    };\r\n\r\n    /**\r\n     * Requests configuration parameter of type uint8.\r\n     *\r\n     * @example\r\n     * pcm.GetConfigParamU8(\"F1\").then(response => console.log(\"F1: \", response.data));\r\n     *\r\n     * @param   {string} name Parameter name\r\n     *\r\n     * | Name | Description                                   |\r\n     * | :--- | :---------------------------------------------|\r\n     * | F1   | Flags                                         |\r\n     * | RC   | Number of recorders implemented on target     |\r\n     * | SC   | Number of oscilloscopes implemented on target |\r\n     * | PC   | Number of pipes implemented on target         |\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing parameter value.\r\n     */\r\n    this.GetConfigParamU8 = function(name) {\r\n        return SendRequest.call(this, 'GetConfigParamU8', [name]);\r\n    };\r\n\r\n    /**\r\n     * Requests confiugration parameter encoded as ULEB128.\r\n     *\r\n     * @example\r\n     * pcm.GetConfigParamULEB(\"MTU\").then(response => console.log(\"MTU: \", response.data));\r\n     *\r\n     * @param   {string} name Parameter name\r\n     *\r\n     * | Name | Description                                                                       |\r\n     * | :--- | :-------------------------------------------------------------------------------- |\r\n     * | MTU  | Size of an internal communication buffer for handling command and response frames |\r\n     * | BA   | Base address used by optimized memory read/write commands                         |\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing parameter value.\r\n     */\r\n    this.GetConfigParamULEB = function(name) {\r\n        return SendRequest.call(this, 'GetConfigParamULEB', [name]);\r\n    };\r\n\r\n    /**\r\n     * Requests confiugration parameter of type string.\r\n     *\r\n     * | Name | Description             |\r\n     * | :--- | :-----------------------|\r\n     * | VS   | Version string          |\r\n     * | NM   | Application name string |\r\n     * | DS   | Description string      |\r\n     * | BD   | Build date/time string  |\r\n     *\r\n     * @example\r\n     * pcm.GetConfigParamString(\"VS\", 10).then(response => console.log(\"VS: \", response.data));\r\n     *\r\n     * @param   {string} name  Parameter name\r\n     * @param   {number} [len] String byte length, if missing will be set to the service max buffer size (256)\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing parameter value.\r\n     */\r\n    this.GetConfigParamString = function(name, len) {\r\n        return SendRequest.call(this, 'GetConfigParamString', [name, len]);\r\n    };\r\n\r\n    /**\r\n     * Reads a signed integer value from a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadIntVariable(0x20050080, 2).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Integer size, can be 1, 2, 4, or 8.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the read value.\r\n     */\r\n    this.ReadIntVariable = function(addr, size) {\r\n        return SendRequest.call(this, 'ReadIntVariable', [addr, size]);\r\n    };\r\n\r\n    /**\r\n     * Reads an unsigned integer value from a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadUIntVariable('var16', 4).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Integer size, can be 1, 2, 4, or 8.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the read value.\r\n     */\r\n    this.ReadUIntVariable = function(addr, size) {\r\n        return SendRequest.call(this, 'ReadUIntVariable', [addr, size]);\r\n    };\r\n\r\n    /**\r\n     * Reads a float value from a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadFloatVariable('varFLT').then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the read value.\r\n     */\r\n    this.ReadFloatVariable = function(addr) {\r\n        return SendRequest.call(this, 'ReadFloatVariable', [addr]);\r\n    };\r\n\r\n    /**\r\n     * Reads a double value from a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadDoubleVariable('varDBL').then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the read value.\r\n     */\r\n    this.ReadDoubleVariable = function(addr) {\r\n        return SendRequest.call(this, 'ReadDoubleVariable', [addr]);\r\n    };\r\n\r\n    /**\r\n     * Writes a signed integer value to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteIntVariable(0x20050080, 2, 10).then(() => console.log('Value written.'));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Integer size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data   Integer value to be written.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteIntVariable = function(addr, size, data) {\r\n        return SendRequest.call(this, 'WriteIntVariable', [addr, size, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes an unsigned integer value to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteUIntVariable(\"var16\", 2, 100).then(() => console.log('Value written.'));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Integer size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data   Integer value to be written.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteUIntVariable = function(addr, size, data) {\r\n        return SendRequest.call(this, 'WriteUIntVariable', [addr, size, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes a float value to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteFloatVariable(\"varFLT\", 10.0).then(() => console.log('Value written.'));\r\n     *\r\n     * @param   {number|string} addr Address value or symbol name.\r\n     * @param   {Array<number>} data Float value to be written.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteFloatVariable = function(addr, data) {\r\n        return SendRequest.call(this, 'WriteFloatVariable', [addr, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes a double value to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteDoubleVariable(\"varDBL\", 100.0).then(() => console.log('Value written.'));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {Array<number>} data   Double value to be written.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteDoubleVariable = function(addr, data) {\r\n        return SendRequest.call(this, 'WriteDoubleVariable', [addr, data]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of signed integers from a memory location.\r\n     *\r\n     * @example\r\n     * // read 20, 2 byte long, signed integers from address 0x20050080\r\n     * pcm.ReadUIntArray(0x20050080, 20, 2).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Number of elements.\r\n     * @param   {number}        elSize Element size, can be 1, 2, 4, or 8.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.ReadIntArray = function(addr, size, elSize) {\r\n        return SendRequest.call(this, 'ReadIntArray', [addr, size, elSize]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of unsigned integers from a memory location.\r\n     *\r\n     * @example\r\n     * // read 10, 4 byte long, unsigned integers from the address given by the symbol 'arr16'\r\n     * pcm.ReadIntArray('arr16', 10, 4).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Number of elements.\r\n     * @param   {number}        elSize Element size, can be 1, 2, 4, or 8.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.ReadUIntArray = function(addr, size, elSize) {\r\n        return SendRequest.call(this, 'ReadUIntArray', [addr, size, elSize]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of floats from a memory location.\r\n     *\r\n     * @example\r\n     * // read 5 floats from the address given by the symbol 'arrFLT'\r\n     * pcm.ReadFloatArray('arrFLT', 5).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Number of elements.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.ReadFloatArray = function(addr, size) {\r\n        return SendRequest.call(this, 'ReadFloatArray', [addr, size]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of doubles from a memory location.\r\n     *\r\n     * @example\r\n     * // read 5 doubles from the address given by the symbol 'arrDBL'\r\n     * pcm.ReadDoubleArray('arrDBL', 5).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Number of elements.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.ReadDoubleArray = function(addr, size) {\r\n        return SendRequest.call(this, 'ReadDoubleArray', [addr, size]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of signed integers to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteIntArray(0x20050080, 2, [1, 2, 3, 4, 5]).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        elSize Element size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data   Array of integers to be written.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.WriteIntArray = function(addr, elSize, data) {\r\n        return SendRequest.call(this, 'WriteIntArray', [addr, elSize, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of unsigned integers to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteUIntArray('arr16', 4, [100, 1000, 10000, 100000, 1000000]).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        elSize Element size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data   Array of integers to be written.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.WriteUIntArray = function(addr, elSize, data) {\r\n        return SendRequest.call(this, 'WriteUIntArray', [addr, elSize, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of floats to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadFloatArray('arrFLT', [1.0, 2.0, 3.0, 4.0, 5.0]).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        data   Array of floats to be written.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.WriteFloatArray = function(addr, data) {\r\n        return SendRequest.call(this, 'WriteFloatArray', [addr, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of doubles to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteDoubleArray('arrDBL', [1.0, 2.0, 3.0, 4.0, 5.0]).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Array of doubles to be written.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.WriteDoubleArray = function(addr, data) {\r\n        return SendRequest.call(this, 'WriteDoubleArray', [addr, data]);\r\n    };\r\n\r\n    /**\r\n     * Sends the command to read symbols from the elf file associated with the current connection (defined in project file).\r\n     * @see {@link PCM#EnumSymbols EnumSymbols}\r\n     *\r\n     * @example\r\n     * pcm.ReadELF().then(response => console.log(response.data.count + \" symbols extracted from ELF file.\"));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain the number of extracted symbols.\r\n     */\r\n    this.ReadELF = function(elfFile) {\r\n        return SendRequest.call(this, 'ReadELF', [elfFile]);\r\n    };\r\n\r\n    /**\r\n     * Sends the command to read read symbols from the TSA table from the connected target.\r\n     * @see {@link PCM#EnumSymbols EnumSymbols}\r\n     *\r\n     * @example\r\n     * pcm.ReadTSA().then(response => console.log(response.data.count + \" symbols extracted from TSA table.\"));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain the number of extracted symbols.\r\n     */\r\n    this.ReadTSA = function() {\r\n        return SendRequest.call(this, 'ReadTSA');\r\n    };\r\n\r\n    /**\r\n     * Requests symbol (extracted from ELF file or TSA table) name by index.\r\n     * @see {@link PCM#ReadELF ReadELF}\r\n     * @see {@link PCM#ReadTSA ReadTSA}\r\n     * @see {@link PCM#GetSymbolInfo GetSymbolInfo}\r\n     *\r\n     * @example\r\n     * let index = 0;\r\n     * do {\r\n     *     try {\r\n     *         let response = await pcm.EnumSymbols(index);\r\n     *         console.log(response.data);\r\n     *         index = index + 1;\r\n     *     } catch (err) {\r\n     *         break;\r\n     *     }\r\n     * } while (true);\r\n     *\r\n     * @param   {number} index Symbol index.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing the symbol name.\r\n     */\r\n    this.EnumSymbols = function(index) {\r\n        return SendRequest.call(this, 'EnumSymbols', [index]);\r\n    };\r\n\r\n    /**\r\n     * Requests symbol information.\r\n     * @see {@link PCM#EnumSymbols EnumSymbols}\r\n     *\r\n     * @example\r\n     * pcm.EnumSymbols(0).then(response => {\r\n     *     pcm.GetSymbolInfo(response.data).then(response => {\r\n     *         console.log(response.data);\r\n     *     });\r\n     * });\r\n     *\r\n     * @param   {string} name Symbol name returned by {@link PCM#EnumSymbols EnumSymbols}\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link SymbolInfo SymbolInfo}.\r\n     */\r\n    this.GetSymbolInfo = function(name) {\r\n        return SendRequest.call(this, 'GetSymbolInfo', [name]);\r\n    };\r\n\r\n    /**\r\n     * Requests variable name by index.\r\n     * @see {@link PCM#DefineVariable DefineVariable}\r\n     * @see {@link PCM#GetVariableInfo GetVariableInfo}\r\n     *\r\n     * @example\r\n     * let index = 0;\r\n     * do {\r\n     *     try {\r\n     *     let response = await pcm.EnumVariables(index);\r\n     *     console.log(response.data);\r\n     *     index = index + 1;\r\n     *     } catch (err) {\r\n     *         break;\r\n     *     }\r\n     * } while (true);\r\n     *\r\n     * @param   {number} index Variable index.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing the variable name.\r\n     */\r\n    this.EnumVariables = function(index) {\r\n        return SendRequest.call(this, 'EnumVariables', [index]);\r\n    };\r\n\r\n    /**\r\n     * Requests variable information.\r\n     * @see {@link PCM#DefineVariable DefineVariable}\r\n     *\r\n     * @example\r\n     * pcm.EnumVariables(0).then(response => {\r\n     *     pcm.GetVariableInfo(response.data).then(response => {\r\n     *         console.log(response.data);\r\n     *     });\r\n     * });\r\n     *\r\n     * @param   {string} name Variable name.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link VariableInfo VariableInfo}.\r\n     */\r\n    this.GetVariableInfo = function(name) {\r\n        return SendRequest.call(this, 'GetVariableInfo', [name]);\r\n    };\r\n\r\n    /**\r\n     * Defines a variable.\r\n     *\r\n     * @example\r\n     * let variable = { name: \"var16\", addr: 0x20050080, type: \"uint\", size: 4 }\r\n     * pcm.DefineVariable(variable).then(() => console.log(\"Variable successfully defined.\"));\r\n     *\r\n     * @param   {VariableInfo} variable Variable information\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.DefineVariable = function(variable) {\r\n        return SendRequest.call(this, 'DefineVariable', [variable]);\r\n    };\r\n\r\n    /**\r\n     * Delete an user defined variable (except those defined in project file).\r\n     *\r\n     * @example\r\n     * pcm.DeleteVariable(\"var16\").then(() => console.log(\"Variale deleted.\"));\r\n     *\r\n     * @param   {string} name Variable name.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.DeleteVariable = function(name) {\r\n        return SendRequest.call(this, 'DeleteVariable', [name]);\r\n    };\r\n\r\n    /**\r\n     * Deletes all user defined variables (except those defined in project file).\r\n     *\r\n     * @example\r\n     * pcm.DeleteAllScriptVariables().then(() => console.log(\"Script variales deleted.\"));\r\n     *\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.DeleteAllScriptVariables = function() {\r\n        return SendRequest.call(this, 'DeleteAllScriptVariables');\r\n    };\r\n\r\n    /**\r\n     * Reads variable value according to the predefined variable information.\r\n     * @see {@link PCM#DefineVariable DefineVariable}\r\n     *\r\n     * @example\r\n     * pcm.ReadVariable(\"var16\").then(response => console.log(response.data));\r\n     *\r\n     * @param   {string} name Variable name.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing variable value.\r\n     */\r\n    this.ReadVariable = function(name) {\r\n        return SendRequest.call(this, 'ReadVariable', [name]);\r\n    };\r\n\r\n    /**\r\n     * Writes a variable value according to the predefined variable information.\r\n     * @see {@link PCM#DefineVariable DefineVariable}\r\n     *\r\n     * @example\r\n     * pcm.WriteVariable(\"var16\", 255).then(() => console.log(\"Value successfully written.\"));\r\n     *\r\n     * @param   {string} name Variable name.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteVariable = function(name, value) {\r\n        return SendRequest.call(this, 'WriteVariable', [name, value]);\r\n    };\r\n\r\n    /**\r\n     * Setups an oscilloscope with a specific ID.\r\n     *\r\n     * Notes:\r\n     * * Scope ID should be in the target supported range (defined in the embedded application).\r\n     * * All the variables should be defiend prior to scope definition.\r\n     * * Older protocol version (< 4.0) support only one scope instance.\r\n     *\r\n     * @see {@link PCM#GetOscilloscopeData GetOscilloscopeData}\r\n     *\r\n     * @example\r\n     * let id = 0;\r\n     * let vars = ['myVAr1', 'myVar2', 'myVar3'];\r\n     * pcm.SetupOscilloscope(id, vars).then(() => console.log(\"Scope was setup successfully.\"));\r\n     *\r\n     * @param   {number}        id   Oscilloscope ID.\r\n     * @param   {Array<string>} vars Oscilloscope variables names.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.SetupOscilloscope = function(id, vars) {\r\n        return SendRequest.call(this, 'SetupOscilloscope', [id, vars]);\r\n    };\r\n\r\n    /**\r\n     * Requests oscilloscope data.\r\n     *\r\n     * The values will be returned in the format defined by each variable.\r\n     *\r\n     * @see {@link PCM#SetupOscilloscope SetupOscilloscope}\r\n     *\r\n     * @example\r\n     * let id = 0;\r\n     * let vars = ['myVAr1', 'myVar2', 'myVar3'];\r\n     * pcm.SetupOscilloscope(id, vars).then(() => {\r\n     *     pcm.GetOscilloscopeData(id).then(response => console.log(response.data));\r\n     * });\r\n     *\r\n     * @param   {number} id Scope ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type array of numbers (variables corresponding values in the defined order).\r\n     */\r\n    this.GetOscilloscopeData = function(id) {\r\n        return SendRequest.call(this, 'GetOscilloscopeData', [id]);\r\n    };\r\n\r\n    /**\r\n     * Requests recorder limits.\r\n     *\r\n     * @example\r\n     * let id = 0;\r\n     * pcm.GetRecorderLimits(id).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link RecorderLimits RecorderLimits}.\r\n     */\r\n    this.GetRecorderLimits = function(id) {\r\n        return SendRequest.call(this, 'GetRecorderLimits', [id]);\r\n    };\r\n\r\n    /**\r\n     * Setups a recorder with a specific ID.\r\n     *\r\n     * Notes:\r\n     * * Recorder ID should be in the target supported range (defined in the embedded application).\r\n     * * All the variables should be defiend prior to recorder definitions.\r\n     * * Older protocol version (< 4.0) support only one recorder instance.\r\n     *\r\n     * @example\r\n     * let id = 0;\r\n     * let config = {\r\n     *     pointsTotal: 100,\r\n     *     pointsPreTrigger: 50,\r\n     *     timeDiv: 1\r\n     * };\r\n     * let recVars = ['myVAr1', 'myVar2', 'myVar3'];\r\n     * let trgVars = [{ name: 'myVar2', trgType: 0x11, trgThr: 2000 }];\r\n     * pcm.SetupRecorder(id, config, recVars, trgVars).then(() => console.log(\"Recorder was setup successfully.\"));\r\n     *\r\n     * @param   {number}                 id      Recorder ID.\r\n     * @param   {RecorderConfig}         config  Recorder configuartion.\r\n     * @param   {Array<string>}          recVars Recorded variables.\r\n     * @param   {Array<TriggerVariable>} trgVars Trigger variables.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.SetupRecorder = function(id, config, recVars, trgVars) {\r\n        return SendRequest.call(this, 'SetupRecorder', [id, config, recVars, trgVars]);\r\n    };\r\n\r\n    /**\r\n     * Starts a recorder.\r\n     * @see {@link PCM#SetupRecorder SetupRecorder}\r\n     *\r\n     * @example\r\n     * pcm.StartRecorder(id).then(() => console.log(\"Recorder started\"));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.StartRecorder = function(id) {\r\n        return SendRequest.call(this, 'StartRecorder', [id]);\r\n    };\r\n\r\n    /**\r\n     * Stops a recorder.\r\n     * @see {@link PCM#SetupRecorder SetupRecorder}\r\n     * @see {@link PCM#StartRecorder StartRecorder}\r\n     *\r\n     * @example\r\n     * pcm.StopRecorder(id).then(() => console.log(\"Recorder stoped\"));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.StopRecorder = function(id) {\r\n        return SendRequest.call(this, 'StopRecorder', [id]);\r\n    };\r\n\r\n    /**\r\n     * Requests recorder status.\r\n     * @see {@link PCM#SetupRecorder SetupRecorder}\r\n     * @see {@link PCM#StartRecorder StartRecorder}\r\n     *\r\n     * @example\r\n     * pcm.GetRecorderStatus(id).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     *\r\n     * | Code | Status                           |\r\n     * | :--- | :------------------------------- |\r\n     * | 0x00 | not configured                   |\r\n     * | 0x01 | configured, stoped, no data      |\r\n     * | 0x02 | running                          |\r\n     * | 0x04 | stopped, not enough data sampled |\r\n     * | 0x05 | stopped, data ready              |\r\n     */\r\n    this.GetRecorderStatus = function(id) {\r\n        return SendRequest.call(this, 'GetRecorderStatus', [id]);\r\n    };\r\n\r\n    /**\r\n     * Gets recorded data.\r\n     *\r\n     * @example\r\n     * pcm.GetRecorderData(id).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type array of arrays of numbers.\r\n     */\r\n    this.GetRecorderData = function(id) {\r\n        return SendRequest.call(this, 'GetRecorderData', [id]);\r\n    };\r\n\r\n    /**\r\n     * Opens a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeOpen(0, 100, 100).then(() => console.log(\"Pipe open.\"));\r\n     *\r\n     * @param   {number} port         Pipe ID.\r\n     * @param   {number} txBufferSize Send buffer size.\r\n     * @param   {number} rxBufferSize Receive buffer size.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeOpen = function(port, txBufferSize, rxBufferSize) {\r\n        return SendRequest.call(this, 'PipeOpen', [port, txBufferSize, rxBufferSize]);\r\n    };\r\n\r\n    /**\r\n     * Closes a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeClose(0).then(() => console.log(\"Pipe closed.\"));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeClose = function(port) {\r\n        return SendRequest.call(this, 'PipeClose', [port]);\r\n    };\r\n\r\n    /**\r\n     * Flushes a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeFlush(0).then(() => console.log(\"Pipe flushed.\"));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeFlush = function(port, timeout) {\r\n        return SendRequest.call(this, 'PipeFlush', [port, timeout]);\r\n    };\r\n\r\n    /**\r\n     * Sets pipes default receive mode.\r\n     *\r\n     * @example\r\n     * pcm.PipeSetDefaultRxMode(false, 100).then(() => console.log(\"Default RX mode updated.\"));\r\n     *\r\n     * @param   {boolean} rxAllOrNothing Flag specifying whether the data should be read all at once.\r\n     * @param   {number}  rxTimeout_ms   Read timeout in milliseconds.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeSetDefaultRxMode = function(rxAllOrNothing, rxTimeout_ms) {\r\n        return SendRequest.call(this, 'PipeSetDefaultRxMode', [rxAllOrNothing, rxTimeout_ms]);\r\n    };\r\n\r\n    /**\r\n     * Sets pipes default string mode.\r\n     *\r\n     * @example\r\n     * pcm.PipeSetDefaultStringMode(false).then(() => console.log(\"Default string mode updated.\"));\r\n     *\r\n     * @param   {boolean} unicode Flag specifying whether the string are using unicode encoding.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeSetDefaultStringMode = function(unicode) {\r\n        return SendRequest.call(this, 'PipeSetDefaultStringMode', [unicode]);\r\n    };\r\n\r\n    /**\r\n     * Requests the number of bytes pending on the receive buffer.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetRxBytes(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetRxBytes = function(port) {\r\n        return SendRequest.call(this, 'PipeGetRxBytes', [port]);\r\n    };\r\n\r\n    /**\r\n     * Requests the number of bytes pending on the send buffer.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetTxBytes(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetTxBytes = function(port) {\r\n        return SendRequest.call(this, 'PipeGetTxBytes', [port]);\r\n    };\r\n\r\n    /**\r\n     * Requests the number of free bytes from the send buffer.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetTxFree(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Port number that identified the pipe.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetTxFree = function(port) {\r\n        return SendRequest.call(this, 'PipeGetTxFree', [port]);\r\n    };\r\n\r\n    /**\r\n     * Requests the receive buffer size of a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetRxBufferSize(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetRxBufferSize = function(port) {\r\n        return SendRequest.call(this, 'PipeGetRxBufferSize', [port]);\r\n    };\r\n\r\n    /**\r\n     * Requests the send buffer size of a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetTxBufferSize(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetTxBufferSize = function(port) {\r\n        return SendRequest.call(this, 'PipeGetTxBufferSize', [port]);\r\n    };\r\n\r\n    /**\r\n     * Writes a string to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteString(0, \"Hello world!\", false, false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  port         Pipe ID.\r\n     * @param   {string}  str          String to be written to the pipe.\r\n     * @param   {boolean} allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @param   {boolean} unicode      Flag specifying whether the string is unicode encoded.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen characters.\r\n     */\r\n    this.PipeWriteString = function(port, str, allOrNothing, unicode) {\r\n        return SendRequest.call(this, 'PipeWriteString', [port, str, allOrNothing, unicode]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of signed integers to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteIntArray(0, 2, [1, 2, 3, 4, 5], false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}        port         Pipe ID.\r\n     * @param   {number}        elSize       Element size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data         Array of integers to be written.\r\n     * @param   {boolean}       allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.PipeWriteIntArray = function(port, elSize, data, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeWriteIntArray', [port, elSize, data, allOrNothing]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of unsigned integers to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteUIntArray(0, 4, [100, 200, 300, 400, 500], false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}        port         Pipe ID.\r\n     * @param   {number}        elSize       Element size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data         Array of integers to be written.\r\n     * @param   {boolean}       allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.PipeWriteUIntArray = function(port, elSize, data, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeWriteUIntArray', [port, elSize, data, allOrNothing]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of floats to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteFloatArray(0, [1.0, 2.0, 3.0, 4.0, 5.0], false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}        port         Pipe ID.\r\n     * @param   {Array<number>} data         Array of integers to be written.\r\n     * @param   {boolean}       allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.PipeWriteFloatArray = function(port, data, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeWriteFloatArray', [port, data, allOrNothing]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of doubles to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteDoubleArray(0, [10.0, 20.0, 30.0, 40.0, 50.0], false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}        port         Pipe ID.\r\n     * @param   {Array<number>} data         Array of integers to be written.\r\n     * @param   {boolean}       allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.PipeWriteDoubleArray = function(port, data, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeWriteDoubleArray', [port, data, allOrNothing]);\r\n    };\r\n\r\n   /**\r\n    * Reads a string from a pipe.\r\n    *\r\n    * @example\r\n    * pcm.PipeReadString(0, 100, 512, false, false).then(response => console.log(response.data));\r\n    *\r\n    * @param   {number}  port         Pipe ID.\r\n    * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n    * @param   {number}  charsToRead  Number of characters to read.\r\n    * @param   {boolean} allOrNothing Flag specifying whether the string should be read all at once.\r\n    * @param   {boolean} unicode      Flag specifying whether the string is unicode encoded.\r\n    * @returns {Promise} In case of success, resolved promise will contain data property of type number string.\r\n    */\r\n    this.PipeReadString = function(port, rxTimeout_ms, charsToRead, allOrNothing, unicode) {\r\n        return SendRequest.call(this, 'PipeReadString', [port, rxTimeout_ms, charsToRead, allOrNothing, unicode]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of signed integers from a piep.\r\n     *\r\n     * @example\r\n     * pcm.PipeReadIntArray(0, 2, 100, 100, false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  port         Pipe ID.\r\n     * @param   {number}  elSize       Element size, can be 1, 2, 4, or 8.\r\n     * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n     * @param   {number}  size         The size of the array (number of elements).\r\n     * @param   {boolean} allOrNothing Flag specifying whether the array should be read all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.PipeReadIntArray = function(port, elSize, rxTimeout_ms, size, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeReadIntArray', [port, elSize, rxTimeout_ms, size, allOrNothing]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of unsigned integers from a piep.\r\n     *\r\n     * @example\r\n     * pcm.PipeReadUIntArray(0, 4, 100, 100, false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  port         Pipe ID.\r\n     * @param   {number}  elSize       Element size, can be 1, 2, 4, or 8.\r\n     * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n     * @param   {number}  size         The size of the array (number of elements).\r\n     * @param   {boolean} allOrNothing Flag specifying whether the array should be read all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.PipeReadUIntArray = function(port, elSize, rxTimeout_ms, size, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeReadUIntArray', [port, elSize, rxTimeout_ms, size, allOrNothing]);\r\n    };\r\n\r\n   /**\r\n    * Reads an array of floats from a piep.\r\n    *\r\n    * @example\r\n    * pcm.PipeReadFloatArray(0, 100, 100, false).then(response => console.log(response.data));\r\n    *\r\n    * @param   {number}  port         Pipe ID.\r\n    * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n    * @param   {number}  size         The size of the array (number of elements).\r\n    * @param   {boolean}  allOrNothing Flag specifying whether the array should be read all at once.\r\n    * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n    */\r\n    this.PipeReadFloatArray = function(port, rxTimeout_ms, size, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeReadFloatArray', [port, rxTimeout_ms, size, allOrNothing]);\r\n    };\r\n\r\n   /**\r\n    * Reads an array of doubles from a piep.\r\n    *\r\n    * @example\r\n    * pcm.PipeReadDoubleArray(0, 100, 100, false).then(response => console.log(response.data));\r\n    *\r\n    * @param   {number}  port         Pipe ID.\r\n    * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n    * @param   {number}  size         The size of the array (number of elements).\r\n    * @param   {boolean} allOrNothing Flag specifying whether the array should be read all at once.\r\n    * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n    */\r\n    this.PipeReadDoubleArray = function(port, rxTimeout_ms, size, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeReadDoubleArray', [port, rxTimeout_ms, size, allOrNothing]);\r\n    };\r\n\r\n   /**\r\n    * Opens a file on the mashine the servce is running one.\r\n    * @see {@link PCM#LocalFileClose LocalFileClose}\r\n    *\r\n    * @example\r\n    * pcm.LocalFileOpen(\"D:\\\\Temp\\\\temp.txt\", \"w+\").then(() => console.log(\"File open.\");\r\n    *\r\n    * @param   {string} file Path to the file.\r\n    * @param   {string} mode NodeJS file system {@link https://nodejs.org/api/fs.html#fs_file_system_flags flags}.\r\n    * @returns {Promise} In case of success, resolved promise will contain data property of type number representing file descriptor.\r\n    */\r\n    this.LocalFileOpen = function(file, mode) {\r\n        return SendRequest.call(this, 'LocalFileOpen', [file, mode]);\r\n    };\r\n\r\n   /**\r\n    * Closes a file.\r\n    * @see {@link PCM#LocalFileOpen LocalFileOpen}\r\n    *\r\n    * @example\r\n    * let result = await pcm.LocalFileClose(3).then(() => console.log(\"File closed.\"));\r\n    *\r\n    * @param   {number} handle File descriptor.\r\n    * @returns {Promise} The result does not carry any relevant data.\r\n    */\r\n    this.LocalFileClose = function(handle) {\r\n        return SendRequest.call(this, 'LocalFileClose', [handle]);\r\n    };\r\n\r\n    /**\r\n     * Reads a string from an open file.\r\n     * @see {@link PCM#LocalFileOpen LocalFileOpen}\r\n     *\r\n     * @example\r\n     * pcm.LocalFileReadString(3, 255, false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  handle      File descriptor.\r\n     * @param   {number}  charsToRead Numbers of characters to read.\r\n     * @param   {boolean} unicode     Flag specifying whether the string is unicode encoded.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string.\r\n     */\r\n    this.LocalFileReadString = function(handle, charsToRead, unicode) {\r\n        return SendRequest.call(this, 'LocalFileReadString', [handle, charsToRead, unicode]);\r\n    };\r\n\r\n    /**\r\n     * Writes a string to an open file.\r\n     * @see {@link PCM#LocalFileOpen LocalFileOpen}\r\n     *\r\n     * @example\r\n     * pcm.LocalFileWriteString(3, \"Hello world!\", false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  handle      File descriptor.\r\n     * @param   {number}  str         String to write.\r\n     * @param   {boolean} unicode     Flag specifying whether the string is unicode encoded.\r\n     * @param   {boolean} size        Length of the string to write, optional, writes the full 'str' length if undefined.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of written characters.\r\n     */\r\n    this.LocalFileWriteString = function(handle, str, unicode, size) {\r\n        return SendRequest.call(this, 'LocalFileWriteString', [handle, str, unicode, size]);\r\n    };\r\n\r\n    /**\r\n     * Enables communication library logger.\r\n     * @see {@link PCM#LogDisable LogDisable}\r\n     *\r\n     * @example\r\n     * pcm.LogEnable(\"Test logger\", \"Test logger.log\").then(() => console.log(\"Logger enabled.\"));\r\n     *\r\n     * @param   {string}  name  Logger name.\r\n     * @param   {string}  file  Logger file, if empty all the loggs will be printed in standard output.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogEnable = function(name, file) {\r\n        return SendRequest.call(this, 'LogEnable', [name, file]);\r\n    };\r\n\r\n    /**\r\n     * Disables communication library logger.\r\n     * @see {@link PCM#LogEnable LogEnable}\r\n     *\r\n     * @example\r\n     * pcm.LogDisable().then(() => console.log(\"Logger disabled.\"));\r\n     *\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogDisable = function() {\r\n        return SendRequest.call(this, 'LogDisable');\r\n    };\r\n\r\n    /**\r\n     * Sets logging pattern. Refer to [spdlog wiki]{@link https://github.com/gabime/spdlog/wiki/3.-Custom-formatting#pattern-flags} for the list of available flags.\r\n     *\r\n     * @example\r\n     * pcm.LogSetPattern(\"[%Y-%m-%d %T.%f]: %v\").then(() => console.log(\"Logger pattern updated.\"));\r\n     *\r\n     * @param   {string}  pattern  Logging pattern.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogSetPattern = function(pattern) {\r\n        return SendRequest.call(this, 'LogSetPattern', [pattern]);\r\n    };\r\n\r\n    /**\r\n     * Sets logging verbosity level.\r\n     *\r\n     * @example\r\n     * pcm.LogSetVerbosity(2).then(() => console.log(\"Verbosity level set to normal.\"));\r\n     *\r\n     * @param   {number}  verbosity  Logging verbosity level.\r\n     *\r\n     * | Level | Description |\r\n     * | :---- | :---------- |\r\n     * | 0     | OFF         |\r\n     * | 1     | Minimal     |\r\n     * | 2     | Normal      |\r\n     * | 3     | Medium      |\r\n     * | 4     | High        |\r\n     * | 5     | All         |\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogSetVerbosity = function(verbosity) {\r\n        return SendRequest.call(this, 'LogSetVerbosity', [verbosity]);\r\n    };\r\n\r\n    /**\r\n     * Sets logging service filter.\r\n     *\r\n     * @example\r\n     * // 0xFFFF - disables all current filters\r\n     * // 0x0002 | 0x0004 - enables read and write filtering\r\n     * pcm.LogSetServices(0xFFFF, 0x0002 | 0x0004).then(() => console.log(\"Filtering read and write services.\"));\r\n     *\r\n     * @param   {number}  mask      Mask that will disable current filterred services.\r\n     * @param   {number}  services  Mask of services flags to be added to the filter.\r\n     *\r\n     * | Mask   | Service     |\r\n     * | :----- | :---------- |\r\n     * | 0x0001 | Port setup  |\r\n     * | 0x0002 | Data Read   |\r\n     * | 0x0004 | Data Write  |\r\n     * | 0x0008 | Scope       |\r\n     * | 0x0010 | Recorder    |\r\n     * | 0x0020 | App command |\r\n     * | 0x0040 | SFIO        |\r\n     * | 0x0080 | TSA         |\r\n     * | 0x0100 | PIPE        |\r\n     * | 0x0200 | Poolling    |\r\n     * | 0xFFFF | All         |\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogSetServices = function(mask, services) {\r\n        return SendRequest.call(this, 'LogSetServices', [mask, services]);\r\n    };\r\n\r\n    /**\r\n     * Extends the object by extra methods and events available in full FreeMASTER UI application only.\r\n     * Use this call in Control Pages and other scripts targeting the FreeMASTER application. Note that\r\n     * the extra features will NOT work with FreeMASTER Lite service.\r\n     *\r\n     * @example\r\n     * pcm.EnableExtraFeatures(true);\r\n     * pcm.EnableEvents(true);\r\n     * pcm.OnBoardDetected = function() { console.log(\"Board connection has been established.\"); }\r\n     */\r\n    this.EnableExtraFeatures = function(enable) {\r\n\r\n        if(enable) {\r\n            /* TODO: throw an exception if this file has been retrieved from the Lite service. */\r\n        }\r\n        else {\r\n            /* Don't allow to disable the features once enabled. This behavior is subject to change in future versions. */\r\n            if(this.EnableEvents) {\r\n                throw \"Can't disable ExtraFeatures after enabled once\";\r\n            }\r\n\r\n            /* Nothing to do, extra features remain disabled. */\r\n            return;\r\n        }\r\n\r\n        /* Install default FreeMASTER event handlers. Don't forget to call EnableEvents(true) for the server to generate the JSON-RPC events. */\r\n        if(!this.OnBoardDetected) {\r\n            this.OnBoardDetected = function() {\r\n                console.log(\"FreeMASTER Event received: OnBoardDetected()\");\r\n            };\r\n        }\r\n\r\n        if(!this.OnCommPortStateChanged) {\r\n            this.OnCommPortStateChanged = function(state) {\r\n                console.log(\"FreeMASTER Event received: OnCommPortStateChanged(\" + state + \")\");\r\n            };\r\n        }\r\n\r\n        if(!this.OnVariableChanged) {\r\n            this.OnVariableChanged = function(name, id, value) {\r\n                console.log(\"FreeMASTER Event received: OnVariableChanged(\\\"\" + name + \"\\\", \" + id + \", \" + value + \")\");\r\n            };\r\n        }\r\n\r\n        if(!this.OnRecorderDone) {\r\n            this.OnRecorderDone = function() {\r\n                console.log(\"FreeMASTER Event received: OnRecorderDone()\");\r\n            };\r\n        }\r\n\r\n        /* Register event handlers in JSON-RPC */\r\n        jrpc.dispatch(\"OnBoardDetected\", \"pass\", (params_array) => this.OnBoardDetected.apply(null, params_array) );\r\n        jrpc.dispatch(\"OnCommPortStateChanged\", \"pass\", (params_array) => this.OnCommPortStateChanged.apply(null, params_array) );\r\n        jrpc.dispatch(\"OnVariableChanged\", \"pass\", (params_array) => this.OnVariableChanged.apply(null, params_array) );\r\n        jrpc.dispatch(\"OnRecorderDone\", \"pass\", (params_array) => this.OnRecorderDone.apply(null, params_array) );\r\n\r\n        /**\r\n         * Start or stop the communication. This call is provided for backward compatibility with ActiveX \r\n         * interface only. Use the StartComm and StopComm methods in new designs.\r\n         *\r\n         * @example\r\n         * pcm.StartStopComm(true).then(console.log(\"Communication port is open\"));\r\n         *\r\n         * @param   {boolean} start    Start or stop communication.\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.StartStopComm = function(start) {\r\n            return SendRequest.call(this, 'StartStopComm', [start]);\r\n        };\r\n\r\n        /**\r\n         * Enable or disable events to be generated by the server side for this JSON-RPC session. \r\n         *\r\n         * @example\r\n         * function MyBoardDetectionHandler(name, id, value) {\r\n         *   console.log(\"Board is detected\");\r\n         * }\r\n         * pcm.OnBoardDetected = MyBoardDetectionHandler;\r\n         * pcm.EnableEvents(true).then(console.log(\"Events are enabled\"));\r\n         *\r\n         * @param   {boolean} enable      Enable or disable events.\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.EnableEvents = function(enable) {\r\n            return SendRequest.call(this, 'EnableEvents', [enable]);\r\n        };\r\n\r\n        /**\r\n         * Subscribe to variable changes at given testing period. When a variable is subscribed, FreeMASTER reads\r\n         * the variable periodically and raises 'OnVariableChanged' event when a value change is detected. The events\r\n         * need to be enabled by calling EnableEvents(true). \r\n         * Event handler should have three parameters: 'name', 'id' and 'value'.\r\n         *\r\n         * @example\r\n         * function MyVariableChangedHandler(name, id, value) {\r\n         *   console.log(\"Variable \" + name + \" has changed to value \" + value);\r\n         * }\r\n         * pcm.OnVariableChanged = MyVariableChangedHandler;\r\n         * pcm.SubscribeVariable(name).then(console.log(\"Variable is subscribed\"));\r\n         *\r\n         * @param   {string}  name      Variable name.\r\n         * @param   {number}  interval  Testing interval in milliseconds.\r\n         * @returns {Promise} In case of success, resolved promise will contain 'xtra.subscriptionId' member which identifies the subscription.\r\n         */\r\n        this.SubscribeVariable = function(name, interval) {\r\n            return SendRequest.call(this, 'SubscribeVariable', [name, interval]);\r\n        };\r\n\r\n       /**\r\n        * Unsubscribe from variable changes subscribed previously with SubscribeVariable. \r\n        *\r\n        * @example\r\n        * pcm.UnsubscribeVariable(name).then(console.log(\"Variable is un-subscribed\"));\r\n        *\r\n        * @param   {string}  name_or_id   Variable name or subscription identifier returned by previous SubscribeVariable call.\r\n        * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n        */\r\n        this.UnSubscribeVariable = function(name_or_id) {\r\n            return SendRequest.call(this, 'UnSubscribeVariable', [name_or_id]);\r\n        };\r\n\r\n        /**\r\n         * Define symbol.\r\n         *\r\n         * @example\r\n         * pcm.DefineSymbol(name, address, type, size).then((result) => console.log(\"Symbol defined\"));\r\n         *\r\n         * @param   {string}  name     Symbol name.\r\n         * @param   {string}  address  Address.\r\n         * @param   {string}  type     User type name (e.g. structure type name). Optional, leave empty for generic numeric types.\r\n         * @param   {string}  size     Symbol size. Optional, leave empty to determine automatically when user type is specified.\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.DefineSymbol = function(name, address, type, size) {\r\n            return SendRequest.call(this, 'DefineSymbol', [name, address, type, size]);\r\n        };\r\n\r\n        /**\r\n         * Retrieve address and size of give symbol.\r\n         *\r\n         * @example\r\n         * pcm.GetSymbolInfo(name).then((result) => console.log(\"Symbol address=\" + result.xtra.addr + \" size=\" + result.xtra.size));\r\n         *\r\n         * @param   {string}  name   Symbol name.\r\n         * @returns {Promise} In case of success, resolved promise contains 'xtra' object with 'addr' and 'size' members.\r\n         */\r\n        this.GetSymbolInfo = function(name) {\r\n            return SendRequest.call(this, 'GetSymbolInfo', [name]);\r\n        };\r\n\r\n        /**\r\n         * Get structure or union member information.\r\n         *\r\n         * @example\r\n         * pcm.GetStructMemberInfo(type, member).then((result) => console.log(\"Structure type \" + type + \" member \" + member + \r\n         *             \" is at offset \" + result.xtra.offset + \", size=\" + result.xtra.size));\r\n         *\r\n         * @param   {string}  type    User type name.\r\n         * @param   {string}  member  Structure member name.\r\n         * @returns {Promise} In case of success, resolved promise contains 'xtra' object with 'offset' and 'size' members.\r\n         */\r\n        this.GetStructMemberInfo = function(type, member) {\r\n            return SendRequest.call(this, 'GetStructMemberInfo', [type, member]);\r\n        };\r\n\r\n        /**\r\n         * Delete all script-defined symbols.\r\n         *\r\n         * @example\r\n         * pcm.DeleteAllScriptSymbols().then((result) => console.log(\"All script-defined symbols deleted.\"));\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.DeleteAllScriptSymbols = function() {\r\n            return SendRequest.call(this, 'DeleteAllScriptSymbols');\r\n        };\r\n\r\n        /**\r\n         * Run variable stimulators.\r\n         *\r\n         * @example\r\n         * pcm.RunStimulators(name).then((result) => console.log(\"Stimulator \" + name + \" is now running\"));\r\n         *\r\n         * @param   {string}  name  Name of the variable stimulator to start (or more comma-separated names)\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.RunStimulators = function(name) {\r\n            return SendRequest.call(this, 'RunStimulators', [name]);\r\n        };\r\n\r\n        /**\r\n         * Stop variable stimulators.\r\n         *\r\n         * @example\r\n         * pcm.StopStimulators(name).then((result) => console.log(\"Stimulator \" + name + \" is now stopped\"));\r\n         *\r\n         * @param   {string}  name  Name of the variable stimulator to stop (or more comma-separated names)\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.StopStimulators = function(name) {\r\n            return SendRequest.call(this, 'StopStimulators', [name]);\r\n        };\r\n\r\n        /**\r\n         * Exit application.\r\n         *\r\n         * @example\r\n         * pcm.Exit();\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.Exit = function() {\r\n            return SendRequest.call(this, 'Exit');\r\n        };\r\n\r\n        /**\r\n         * Activate FreeMASTER application window.\r\n         *\r\n         * @example\r\n         * pcm.ActivateWindow();\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.ActivateWindow = function() {\r\n            return SendRequest.call(this, 'ActivateWindow');\r\n        };\r\n\r\n        /**\r\n         * Select item in FreeMASTER project tree and activate related view.\r\n         *\r\n         * @example\r\n         * pcm.SelectItem(\"My Oscilloscope\", \"osc\");\r\n         *\r\n         * @param   {string}  name  Name of the item to activate\r\n         * @param   {string}  tab   Tab to activate. Optional, one of the following values: \"ctl\", \"blk\", \"info\", \"osc\", \"rec\", \"pipe\"\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.SelectItem = function(name, tab) {\r\n            return SendRequest.call(this, 'SelectItem', [name, tab]);\r\n        };\r\n\r\n        /**\r\n         * Open specific FreeMASTER project.\r\n         *\r\n         * @example\r\n         * pcm.OpenProject(\"C:/projects/my_project.pmpx\");\r\n         *\r\n         * @param   {string}  name  Name of the project file to open; use fully qualified name.\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.OpenProject = function(name) {\r\n            return SendRequest.call(this, 'OpenProject', [name]);\r\n        };\r\n\r\n        /**\r\n         * Determine if board has an active content defined in TSA table.\r\n         *\r\n         * @example\r\n         * pcm.IsBoardWithActiveContent().then((result) => console.log(\"Board active content \" + (result.data ? \"is\" : \"is NOT\") + \"present\"));\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains boolean 'data' member with return value.\r\n         */\r\n        this.IsBoardWithActiveContent = function() {\r\n            return SendRequest.call(this, 'IsBoardWithActiveContent');\r\n        };\r\n\r\n        /**\r\n         * Enumerate hyperlinks defined by active content.\r\n         *\r\n         * @example\r\n         * for(let index=0; true; index++) {\r\n         *     try {\r\n         *         let response = await pcm.EnumHrefLinks(index);\r\n         *         console.log(response.xtra.name + \" \" +  response.xtra.retval + \"\\n\");\r\n         *     } catch (err) {\r\n         *         break;\r\n         *     }\r\n         * }\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains 'xtra' object with 'name' and 'retval' properties.\r\n         */\r\n        this.EnumHrefLinks = function(index) {\r\n            return SendRequest.call(this, 'EnumHrefLinks', [index]);\r\n        };\r\n\r\n        /**\r\n         * Enumerate project files defined by active content.\r\n         *\r\n         * @example\r\n         * for(let index=0; true; index++) {\r\n         *     try {\r\n         *         let response = await pcm.EnumProjectFiles(index);\r\n         *         console.log(response.xtra.name + \" \" +  response.xtra.retval + \"\\n\");\r\n         *     } catch (err) {\r\n         *         break;\r\n         *     }\r\n         * }\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains 'xtra' object with 'name' and 'retval' properties.\r\n         */\r\n        this.EnumProjectFiles = function(index) {\r\n            return SendRequest.call(this, 'EnumProjectFiles', [index]);\r\n        };\r\n\r\n        /**\r\n         * Set global flag which affects Control Page reloading after opening port. By default, the page reloads when port is open.\r\n         *\r\n         * @example\r\n         * pcm.SetPageReloadOnPortOpen(false);\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.SetPageReloadOnPortOpen = function(value) {\r\n            return SendRequest.call(this, 'SetPageReloadOnPortOpen', [value]);\r\n        };\r\n\r\n        /**\r\n         * Get global flag which affects Control Page reloading while opening port.\r\n         *\r\n         * @example\r\n         * pcm.GetPageReloadOnPortOpen().then(result => console.log(\"PageReloadOnPortOpen flag is \" + result.data))\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains boolean 'data' member with return value.\r\n         */\r\n        this.GetPageReloadOnPortOpen = function() {\r\n            return SendRequest.call(this, 'GetPageReloadOnPortOpen');\r\n        };\r\n\r\n        /**\r\n         * Sets pipes default transmit mode.\r\n         *\r\n         * @example\r\n         * pcm.PipeSetDefaultTxMode(false).then(() => console.log(\"Default TX mode updated.\"));\r\n         *\r\n         * @param   {boolean} txAllOrNothing Flag specifying whether the data should be sent all at once.\r\n         * @returns {Promise} The result does not carry any relevant data.\r\n         */\r\n        this.PipeSetDefaultTxMode = function(txAllOrNothing) {\r\n            return SendRequest.call(this, 'PipeSetDefaultTxMode', [txAllOrNothing]);\r\n        };\r\n\r\n        /**\r\n         * Get info about variable with address.\r\n         *\r\n         * @example\r\n         * pcm.GetAddressInfo(addr, size).then(() => console.log(\"Info is \" + result.data));\r\n         *\r\n         * @param   {addr} Address of the variable.\r\n         * @param   {size} Size of the variable.\r\n         * @returns {Promise} In case of success, resolved promise contains string 'data' member with return value.\r\n         */\r\n        this.GetAddressInfo = function(addr, size) {\r\n            return SendRequest.call(this, 'GetAddressInfo', [addr, size]);\r\n        };\r\n        \r\n        /**\r\n         * Define oscilloscope in project.\r\n         *\r\n         * @example\r\n         * pcm.DefineOscilloscope(name, defStr).then(() => console.log(\"Info is \" + result.data));\r\n         *\r\n         * @param   {name} Name of item.\r\n         * @param   {defStr} Stringified JSON definition record. Refer to FreeMASTER documentation for more details.\r\n         * @returns {Promise} The result does not carry any relevant data.\r\n         */\r\n        this.DefineOscilloscope = function(name, defStr) {\r\n            return SendRequest.call(this, 'DefineOscilloscope', [name, defStr]);\r\n        };\r\n        \r\n        /**\r\n         * Define recorder in project.\r\n         *\r\n         * @example\r\n         * pcm.DefineRecorder(name, defStr).then(() => console.log(\"Info is \" + result.data));\r\n         *\r\n         * @param   {name} Name of item.\r\n         * @param   {defStr} Stringified JSON definition record. Refer to FreeMASTER documentation for more details.\r\n         * @returns {Promise} The result does not carry any relevant data.\r\n         */\r\n        this.DefineRecorder = function(name, defStr) {\r\n            return SendRequest.call(this, 'DefineRecorder', [name, defStr]);\r\n        };\r\n        \r\n        /**\r\n         * Send application command.\r\n         *\r\n         * @example\r\n         * pcm.SendCommand(send).then(() => console.log(\"Return is \" + result.data));\r\n         *\r\n         * @param   {send} Application command.\r\n         * @param   {wait} Set true to wait for the command processing to finish.\r\n         * @returns {Promise} In case of success, resolved promise contains string 'xtra.message' member with return message and 'xtra.retCode' member with return .\r\n         */\r\n        this.SendCommand = function(send, wait) {\r\n            return SendRequest.call(this, 'SendCommand', [send, wait]);\r\n        };\r\n        \r\n        /**\r\n         * Get current recorder state.\r\n         *\r\n         * @example\r\n         * pcm.GetCurrentRecorderState().then(() => console.log(\"Return is \" + result.data));\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains string 'xtra.data' member with return state.\r\n         */\r\n        this.GetCurrentRecorderState = function() {\r\n            return SendRequest.call(this, 'GetCurrentRecorderState');\r\n        };\r\n        \r\n        /**\r\n         * Get current recorder data.\r\n         *\r\n         * @example\r\n         * pcm.GetCurrentRecorderData().then(() => console.log(\"Return is \" + result.data));\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains string 'xtra.data' member with return data array-of-arrays.\r\n         */\r\n        this.GetCurrentRecorderData = function() {\r\n            return SendRequest.call(this, 'GetCurrentRecorderData');\r\n        };\r\n        \r\n        /**\r\n         * Get current recorder series.\r\n         *\r\n         * @example\r\n         * pcm.GetCurrentRecorderSeries(name).then(() => console.log(\"Return is \" + result.data));\r\n         *\r\n         * @param   {name} Variable name.\r\n         * @returns {Promise} In case of success, resolved promise contains string 'xtra.data' member with return data array.\r\n         */\r\n        this.GetCurrentRecorderSeries = function(name) {\r\n            return SendRequest.call(this, 'GetCurrentRecorderSeries', [name]);\r\n        };\r\n    };\r\n};\r\n\r\nexport default PCM;\r\n  ","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           SystemConfiguration.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport { CSVLink } from \"react-csv\";\r\nimport { toast } from 'react-toastify';\r\n\r\nimport ConnectionSettingsWidget from \"./helpers/ConnectionSettingsWidget.jsx\"\r\nimport DataRecorderSettingsWidget from \"./helpers/DataRecorderSettingsWidget.jsx\"\r\nimport CardBoxContainer from \"./helpers/CardBoxContainer.jsx\"\r\nimport ChartSettingsWidget from './helpers/ChartSettingsWidget.jsx';\r\n\r\nimport PCM from \"../../freemaster-libs/freemaster-client.js\"\r\n\r\nclass SystemConfiguration extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        cellsNr: 6,\r\n        selectedRecordParam: {\r\n            voltage: true,\r\n            current: true,\r\n            temperature: true,\r\n            soc: true\r\n        },\r\n        recordedData: [\r\n            [\"voltage\", \"current\", \"temperature\", \"soc\"]\r\n        ]\r\n    }\r\n\r\n    this.cellsNumberSelect = React.createRef();\r\n\r\n    this.onChangeCellsNumber = this.onChangeCellsNumber.bind(this);\r\n    this.onChangeUnits = this.onChangeUnits.bind(this);\r\n    this.formatRecordedData = this.formatRecordedData.bind(this);\r\n  }\r\n\r\n  onChangeUnits(e) {\r\n      this.props.changeUnit(e.target.value)\r\n  }\r\n\r\n  onChangeCellsNumber(e) {\r\n    if(Number(this.cellsNumberSelect.current.value) && Number(this.cellsNumberSelect.current.value) != this.state.cellsNr) {\r\n        this.state.cellsNr = Number(this.cellsNumberSelect.current.value)\r\n        this.props.changeCellsNumber(Number(this.cellsNumberSelect.current.value))\r\n    }\r\n    e.preventDefault();\r\n  }\r\n\r\n  formatRecordedData() {\r\n    let recordedData = [[]]\r\n    recordedData[0].push(\"Time\")\r\n\r\n    if(this.state.selectedRecordParam.voltage) {\r\n        recordedData[0].push(\"BMS voltage (\" + this.props.units.systemVoltageUnits + \")\")\r\n    }\r\n    if(this.state.selectedRecordParam.current) {\r\n        recordedData[0].push(\"BMS current (\" + this.props.units.systemCurrentUnits + \")\")\r\n    }\r\n    if(this.state.selectedRecordParam.temperature) {\r\n        recordedData[0].push(\"BMS temperature (\" + this.props.units.systemTempUnits + \")\")\r\n    }\r\n    if(this.state.selectedRecordParam.soc) {\r\n        recordedData[0].push(\"BMS SoC (\" + this.props.units.systemSocUnits + \")\")\r\n    }\r\n\r\n    for(let cellIndex = 1; cellIndex <= this.props.cellsNumber; cellIndex++) {\r\n        if(this.state.selectedRecordParam.voltage) {\r\n            recordedData[0].push(\"Cell \" + cellIndex + \" voltage (\" + this.props.units.systemVoltageUnits + \")\")\r\n        }\r\n        if(this.state.selectedRecordParam.current) {\r\n            recordedData[0].push(\"Cell \" + cellIndex + \" current (\" + this.props.units.systemCurrentUnits + \")\")\r\n        }\r\n        if(this.state.selectedRecordParam.temperature) {\r\n            recordedData[0].push(\"Cell \" + cellIndex + \" temperature (\" + this.props.units.systemTempUnits + \")\")\r\n        }\r\n        if(this.state.selectedRecordParam.soc) {\r\n            recordedData[0].push(\"Cell \" + cellIndex + \" SoC (\" + this.props.units.systemSocUnits + \")\")\r\n        }\r\n    }\r\n\r\n    // console.log(this.props.data)\r\n    // console.log(this.props.cellData)\r\n    let cellData = this.props.cellsData\r\n    let dataLength = cellData[0]?.labels.length || 0\r\n    for(let dataIndex = 0; dataIndex < dataLength; dataIndex++) {\r\n        recordedData.push([])\r\n        //header is on the first line in csv\r\n        recordedData[dataIndex + 1].push(cellData[0].labels[dataIndex])\r\n        if(this.state.selectedRecordParam.voltage) {\r\n            recordedData[dataIndex + 1].push(this.props.data.packVoltage[dataIndex])\r\n        }\r\n        if(this.state.selectedRecordParam.current) {\r\n            recordedData[dataIndex + 1].push(this.props.data.packCurrent[dataIndex])\r\n        }\r\n        if(this.state.selectedRecordParam.temperature) {\r\n            recordedData[dataIndex + 1].push(this.props.data.packTemperature[dataIndex])\r\n        }\r\n        if(this.state.selectedRecordParam.soc) {\r\n            recordedData[dataIndex + 1].push(this.props.data.packSoC[dataIndex])\r\n        }\r\n        for(let cellIndex = 0; cellIndex < this.props.cellsNumber; cellIndex++) {\r\n            if(this.state.selectedRecordParam.voltage) {\r\n                recordedData[dataIndex + 1].push(cellData[cellIndex].voltage[dataIndex])\r\n            }\r\n            if(this.state.selectedRecordParam.current) {\r\n                recordedData[dataIndex + 1].push(cellData[cellIndex].current[dataIndex])\r\n            }\r\n            if(this.state.selectedRecordParam.temperature) {\r\n                recordedData[dataIndex + 1].push(cellData[cellIndex].temp[dataIndex])\r\n            }\r\n            if(this.state.selectedRecordParam.soc) {\r\n                recordedData[dataIndex + 1].push(cellData[cellIndex].soc[dataIndex])\r\n            }\r\n        }\r\n    }\r\n\r\n    this.setState(() => ({\r\n        recordedData: recordedData\r\n    }))\r\n    toast.info(\" Data exported.\", {autoClose: 3000})\r\n  }\r\n\r\n  componentDidUpdate() {\r\n\r\n    //write to config file when the config is updated\r\n    let on_connect = (conn, configFilePath) => {\r\n        var fileId;\r\n        conn.LocalFileOpen(configFilePath, \"w\")\r\n            .then((response) => {\r\n                fileId = response.data\r\n                let config = JSON.stringify({\r\n                    \"freemasterVersion\": this.props.freemasterVersion,\r\n                    \"elfPath\": this.props.elfPath,\r\n                    \"liteConnection\": this.props.liteConnection,\r\n                    \"cellsNumber\": this.props.cellsNumber,\r\n                    \"units\": this.props.units,\r\n                    \"graphSettings\": this.props.graphSettings,\r\n                    \"theme\": this.props.theme\r\n                }, null, 2)\r\n                config = config.replace(/5V/g, \"\\u00b5V\")\r\n                config = config.replace(/5A/g, \"\\u00b5A\")\r\n                config = config.replace(/0C/g, \"\\u00b0C\")\r\n                config = config.replace(/0F/g, \"\\u00b0F\")\r\n                conn.LocalFileWriteString(fileId, config, false)\r\n            })\r\n            .finally(() => conn.LocalFileClose(fileId))\r\n    }\r\n    let liteConn = new PCM(\"localhost:8090\", () => on_connect(liteConn, \".\\\\bms-config.txt\"));\r\n    let desktopConn = new PCM(\"localhost:41000\", () => on_connect(desktopConn, \"..\\\\bms-config.txt\"));\r\n\r\n    if(this.props.theme === \"dark\") {\r\n        document.body.style.background = \"#343E59\"\r\n    } else if(this.props.theme === \"light\") {\r\n        document.body.style.background = \"#e7eff6\"\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-4\">\r\n                    <div className=\"row\">\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>BMS Parameters</p>\r\n                            <form>\r\n                                <label>Filter used to determine SOC</label>\r\n                                <div className=\"form-row\">\r\n                                    <select className=\"form-control mx-auto\">\r\n                                        <option defaultValue>Select the filter used to determine SOC</option>\r\n                                        <option value=\"1\">Coloumb Counting</option>\r\n                                        <option value=\"2\">UKF</option>\r\n                                        <option value=\"3\">EKF</option>\r\n                                    </select>\r\n                                </div>\r\n                                <label className=\"mt-3\">Number of Cells</label>\r\n                                <div className=\"form-row\">\r\n                                    <select ref={this.cellsNumberSelect} onClick={this.onChangeCellsNumber} className=\"form-control mx-auto\">\r\n                                        <option defaultValue value=\"0\">Select the number of cells</option>\r\n                                        {\r\n                                            [...Array(25).keys()].map((element) => (\r\n                                                <option value={element + 4} key={element}>{element + 4}</option>\r\n                                            ))\r\n                                        }\r\n                                    </select>\r\n                                </div>\r\n                            </form>\r\n                        </CardBoxContainer>\r\n\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>Data recording options</p>\r\n                            <DataRecorderSettingsWidget\r\n                                onSelectedRecordParamsToggle={(param) => {\r\n                                    switch(param) {\r\n                                        case \"voltage\":\r\n                                            this.setState((prevState) => ({\r\n                                                selectedRecordParam: {\r\n                                                    ...prevState.selectedRecordParam,\r\n                                                    voltage: !prevState.selectedRecordParam.voltage\r\n                                                }\r\n                                            }))\r\n                                            break;\r\n                                        case \"current\":\r\n                                            this.setState((prevState) => ({\r\n                                                selectedRecordParam: {\r\n                                                    ...prevState.selectedRecordParam,\r\n                                                    current: !prevState.selectedRecordParam.current\r\n                                                }\r\n                                            }))\r\n                                            break;\r\n                                        case \"temperature\":\r\n                                            this.setState((prevState) => ({\r\n                                                selectedRecordParam: {\r\n                                                    ...prevState.selectedRecordParam,\r\n                                                    temperature: !prevState.selectedRecordParam.temperature\r\n                                                }\r\n                                            }))\r\n                                            break;\r\n                                        case \"soc\":\r\n                                            this.setState((prevState) => ({\r\n                                                selectedRecordParam: {\r\n                                                    ...prevState.selectedRecordParam,\r\n                                                    soc: !prevState.selectedRecordParam.soc\r\n                                                }\r\n                                            }))\r\n                                        break;\r\n                                    }\r\n                                }} />\r\n                            <div className=\"row\">\r\n                                <div className=\"col text-center\">\r\n                                <CSVLink data={this.state.recordedData} filename={\"BMS_recorded_parameters.csv\"}\r\n                                    onClick={this.formatRecordedData}\r\n                                    className=\"btn btn-primary mt-4\">\r\n                                    Get recorded data\r\n                                </CSVLink>\r\n                                </div>\r\n                            </div>\r\n                        </CardBoxContainer>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                    <div className=\"row\">\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>BMS Measurement Units</p>\r\n                            <label>Voltage Units of Measure</label>\r\n                            <div className=\"form-row\">\r\n                                <select onClick={this.onChangeUnits} className=\"form-control mx-auto\">\r\n                                    <option defaultValue>Select the Voltage Units of Measure</option>\r\n                                    <option value=\"uV\">&micro;V</option>\r\n                                    <option value=\"mV\">mV</option>\r\n                                    <option value=\"V\">V</option>\r\n                                </select>\r\n                            </div>\r\n                            <label className=\"mt-3\">Current Units of Measure</label>\r\n                            <div className=\"form-row\">\r\n                                <select onClick={this.onChangeUnits} className=\"form-control mx-auto\">\r\n                                    <option defaultValue>Select the Current Units of Measure</option>\r\n                                    <option value=\"uA\">&micro;A</option>\r\n                                    <option value=\"mA\">mA</option>\r\n                                    <option value=\"A\">A</option>\r\n                                </select>\r\n                            </div>\r\n                            <label className=\"mt-3\">Temperature Units of Measure</label>\r\n                            <div className=\"form-row\">\r\n                                <select onClick={this.onChangeUnits} className=\"form-control mx-auto\">\r\n                                    <option defaultValue>Select the Temperature Units of Measure</option>\r\n                                    <option value=\"C\">&deg;C</option>\r\n                                    <option value=\"F\">&deg;F</option>\r\n                                    <option value=\"K\">K</option>\r\n                                </select>\r\n                            </div>\r\n                        </CardBoxContainer>\r\n\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>Application Settings</p>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"col text-center mx-auto mt-3\">\r\n                                    <div className=\"form-check\">\r\n                                        <input onClick={this.props.triggerDemoMode} disabled={this.props.boardConnected} id=\"demoModeCheckbox\"\r\n                                            className=\"form-check-input\" type=\"checkbox\"  />\r\n                                        <label className=\"form-check-label\" htmlFor=\"demoModeCheckbox\">\r\n                                            Demo Mode { this.props.demoModeActive ? \" (active)\" : \" (disabled)\" }\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-row\">\r\n                                <div className=\"col text-center mx-auto mt-4\">\r\n                                    <div className=\"form-check\">\r\n                                    <input className=\"form-check-input\" type=\"radio\" name=\"themeRadios\" id=\"darkThemeRadio\" value=\"darkTheme\"\r\n                                        checked={this.props.theme === \"dark\"}\r\n                                        onClick={() => {\r\n                                            document.body.style.background = \"#343E59\"\r\n                                            this.props.changeApplicationTheme(\"dark\")\r\n                                        }} />\r\n                                    <label className=\"form-check-label\" htmlFor=\"darkThemeRadio\">\r\n                                        Dark Theme\r\n                                    </label>\r\n                                </div>\r\n\r\n                                <div className=\"form-check\">\r\n                                    <input className=\"form-check-input\" type=\"radio\" name=\"themeRadios\" id=\"lightThemeRadio\" value=\"lightTheme\"\r\n                                        checked={this.props.theme === \"light\"}\r\n                                        onClick={() => {\r\n                                            document.body.style.background = \"#e7eff6\"\r\n                                            this.props.changeApplicationTheme(\"light\")\r\n                                        }} />\r\n                                    <label className=\"form-check-label\" htmlFor=\"lightThemeRadio\">\r\n                                        Light Theme\r\n                                    </label>\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                        </CardBoxContainer>\r\n                        \r\n                    </div>\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                    <div className=\"row\">\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")} style={{marginBottom: 10 + \"px\"}}>Connection Parameters</p>\r\n                            <ConnectionSettingsWidget pcm={this.state.pcm}\r\n                                boardConnected={this.props.boardConnected}\r\n                                demoModeActive={this.props.demoModeActive}\r\n                                loading={this.props.loading}\r\n                                freemasterVersion={this.props.freemasterVersion}\r\n                                liteConnection={this.props.liteConnection}\r\n                                elfPath={this.props.elfPath}\r\n                                onSelectedFreemasterVersion={this.props.onSelectedFreemasterVersion}\r\n                                changeElfPath={this.props.changeElfPath}\r\n                                changeLiteConnection={this.props.changeLiteConnection}\r\n                                variables={this.props.variables}\r\n                                changeVariablesConfiguration={this.props.changeVariablesConfiguration}\r\n                                theme={this.props.theme} />\r\n                        </CardBoxContainer>\r\n\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>Charts Settings</p>\r\n                            <ChartSettingsWidget\r\n                                onToggleAutoScaling={this.props.onToggleAutoScaling}\r\n                                onToggleAnimations={this.props.onToggleAnimations} />\r\n                        </CardBoxContainer>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SystemConfiguration;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           conversions.js\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nexport const microToMili = (value) => value / 1000;\r\nexport const microToNormal = (value) => value / 1000000;\r\n\r\nexport const miliToMicro = (value) => value * 1000;\r\nexport const miliToNormal = (value) => value / 1000;\r\n\r\nexport const normalToMicro = (value) => value * 1000000;\r\nexport const normalToMili = (value) => value * 1000;\r\n\r\nexport const celsiusToFahrenheit = (value) => value * 9/5 + 32;\r\nexport const celsiusToKelvin = (value) => value + 273.15;","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           App.js\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\nimport './App.css';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport ContentContainer from \"./components/contents/helpers/ContentContainer.jsx\"\r\nimport HeaderButton from \"./components/header/HeaderButton.jsx\"\r\nimport MainDashboard from \"./components/contents/MainDashboard.jsx\"\r\nimport BatteryPack from \"./components/contents/Battery/BatteryPack.jsx\"\r\nimport RawData from \"./components/contents/RawData/RawData.jsx\"\r\nimport SystemConfiguration from \"./components/contents/SystemConfiguration.jsx\"\r\n\r\nimport { normalToMicro, normalToMili, microToMili, microToNormal,\r\n    miliToMicro, miliToNormal,\r\n    celsiusToFahrenheit, celsiusToKelvin} from \"./components/helper-functions/conversions.js\"\r\n\r\nimport \"./css/main.css\"\r\nimport \"./css/light-theme.css\"\r\n\r\nimport PCM from \"./freemaster-libs/freemaster-client.js\"\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pcm: null,\r\n            boardConnected: false,\r\n            demoModeActive: false,\r\n            loading: false,\r\n            freemasterVersion: \"desktop\",\r\n            elfPath: \"Managed from Desktop Application\",\r\n            liteConnection: {\r\n                liteServerUrl: \"localhost:41000\",\r\n                connString: \"Managed from Desktop Application\"\r\n            },\r\n            labels: [],\r\n            packVoltage: [],\r\n            packCurrent: [],\r\n            packTemperature: [],\r\n            packSoC: [],\r\n            cellsNumber: 6,\r\n            cellsData: [],\r\n            indicators: {\r\n                blinkingStatus: [0, 0, 0, 0, 0, 0, 0, 0],\r\n                history: []\r\n            },\r\n            units: {\r\n                systemSocUnits: \"%\",\r\n                systemVoltageUnits: \"V\",\r\n                systemCurrentUnits: \"A\",\r\n                systemTempUnits: \"\\u00b0C\",\r\n                systemPowerUnits: \"W\",\r\n                axis: {\r\n                    voltage: {\r\n                        \"\\u00b5V\": {min: 0, max: 5 * 1000000},\r\n                        \"mV\": {min: 0, max: 5 * 1000},\r\n                        \"V\": {min: 0, max: 5}\r\n                    },\r\n                    current: {\r\n                        \"\\u00b5A\": {min: -2 * 1000000, max: 2 * 1000000},\r\n                        \"mA\": {min: -2 * 1000, max: 2 * 1000},\r\n                        \"A\": {min: -2, max: 2}\r\n                    },\r\n                    balancing: { min: 0, max: 1.5 },\r\n                    temp: {\r\n                        \"\\u00b0C\": {min: -40, max: 80},\r\n                        \"\\u00b0F\": {min: -40, max: 180},\r\n                        \"K\": {min: 230, max: 355}\r\n                    },\r\n                }\r\n            },\r\n            graphSettings: {\r\n                graphAutoscaling: true,\r\n                graphAnimations: true,\r\n                maxOnGraphDataPoints: 10\r\n            },\r\n            variables: {\r\n                PackVoltage: {\r\n                    enabled: true,\r\n                    label: \"Pack Voltage\",\r\n                    name: \"Pack_VoltageIn\",\r\n                    type: {type: \"float\", size: 4}\r\n                },\r\n                PackCurrent: {\r\n                    enabled: true,\r\n                    label: \"Pack Current\",\r\n                    name: \"Pack_CurrentIn\",\r\n                    type: {type: \"float\", size: 4}\r\n                },\r\n                PackTemp: {\r\n                    enabled: true,\r\n                    label: \"Pack Temperature\",\r\n                    name: \"Internal_Temperature\",\r\n                    type: {type: \"float\", size: 4}\r\n                },\r\n                PackSoC: {\r\n                    enabled: true,\r\n                    label: \"Pack SoC\",\r\n                    name: \"PackSOC\",\r\n                    type: {type: \"float\", size: 4}\r\n                },\r\n                CellVoltage: {\r\n                    enabled: true,\r\n                    label: \"Cell Voltage\",\r\n                    name: \"Cell_Voltages\",\r\n                    type: {type: \"float\", size: 4}\r\n                },\r\n                CellTemp: {\r\n                    enabled: true,\r\n                    label: \"Cell Temperature\",\r\n                    name: \"Pack_TemperaturesIn\",\r\n                    type: {type: \"float\", size: 4}\r\n                },\r\n                CellSoC: {\r\n                    enabled: true,\r\n                    label: \"Cell SoC\",\r\n                    name: \"Cell_SOC\",\r\n                    type: {type: \"float\", size: 4}\r\n                },\r\n                CellBalancing: {\r\n                    enabled: true,\r\n                    label: \"Cell Balancing\",\r\n                    name: \"Cell_Balancing\",\r\n                    type: {type: \"uint\", size: 1}\r\n                },\r\n                BMS_Info_OUT: {\r\n                    enabled: true,\r\n                    label: \"Faults Status\",\r\n                    name: \"BMS_Info_OUT\",\r\n                    type: {type: \"uint\", size: 1}\r\n                },\r\n            },\r\n            theme: \"dark\"\r\n        }\r\n        this.passedSeconds = 0;\r\n        this.updateRate = 1000; //in ms\r\n        this.maxSavedGraphDataPoints = 120;\r\n\r\n        this.numberOfCellVariables = 4;\r\n\r\n        this.indicatorsNames = [\r\n            \"Voltage Sensor\",\r\n            \"Over Current\",\r\n            \"High Temp\",\r\n            \"Low Temp\",\r\n            \"Over Voltage\",\r\n            \"Under Voltage\",\r\n            \"Contactor Fault for Charger\",\r\n            \"Contactor Fault for Inverter\"\r\n        ]\r\n\r\n        this.cellsPackButton = React.createRef();\r\n\r\n        this.onClickConnect = this.onClickConnect.bind(this);\r\n        this.onClickDisconnect = this.onClickDisconnect.bind(this);\r\n        this.defineVariables = this.defineVariables.bind(this);\r\n        this.readVariables = this.readVariables.bind(this);\r\n        this.readDEMOvars = this.readDEMOvars.bind(this);\r\n        this.defineDEMOVars = this.defineDEMOVars.bind(this);\r\n        this.changeUnit = this.changeUnit.bind(this);\r\n        this.proccesFaults = this.proccesFaults.bind(this);\r\n        this.setUpDesktopConnectionCheck = this.setUpDesktopConnectionCheck.bind(this);\r\n    }\r\n\r\n    changeUnit(e) {\r\n        if(e === \"uV\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemVoltageUnits: \"\\u00b5\" + e.charAt(1)}}))\r\n        } else if(e === \"mV\" || e === \"V\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemVoltageUnits: e}}))\r\n        } else if(e === \"uA\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemCurrentUnits: \"\\u00b5\" + e.charAt(1)}}))\r\n        }  else if(e === \"mA\" || e === \"A\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemCurrentUnits: e}}))\r\n        } else if(e === \"C\" || e === \"F\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemTempUnits: \"\\u00b0\" + e}}))\r\n        } else if(e === \"K\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemTempUnits: e}}))\r\n        }\r\n    }\r\n\r\n    defineVariables(cellsNumber) {\r\n        let pcm = this.state.pcm\r\n        this.cellsData = [];\r\n        this.labels = [];\r\n        this.packVoltage = [];\r\n        this.packCurrent = [];\r\n        this.packTemperature = [];\r\n        this.packSoC = [];\r\n        let defines = [];\r\n        for(let cellIndex = 0; cellIndex < cellsNumber; cellIndex++) {\r\n            this.cellsData.push({\r\n                labels: [],\r\n                voltage: [],\r\n                balancing: [],\r\n                current: [],\r\n                temp: [],\r\n                soc: []\r\n            })\r\n        }\r\n        Object.keys(this.state.variables).forEach((element) => {\r\n            let variable = this.state.variables[element]\r\n            if(variable.enabled) {\r\n                defines.push(pcm.DefineVariable({name: variable.name, addr: variable.name, ...variable.type}))\r\n            }\r\n        })\r\n        return Promise.all(defines)\r\n    }\r\n\r\n    readVariables() {\r\n        let pcm = this.state.pcm\r\n        let PackVoltage = this.state.variables.PackVoltage;\r\n        let PackCurrent = this.state.variables.PackCurrent;\r\n        let PackTemp = this.state.variables.PackTemp;\r\n        let PackSoC = this.state.variables.PackSoC;\r\n        let CellVoltage = this.state.variables.CellVoltage;\r\n        let CellTemp = this.state.variables.CellTemp;\r\n        let CellSoC = this.state.variables.CellSoC;\r\n        let BMS_CellBalancing = this.state.variables.CellBalancing;\r\n        let BMS_Info_OUT = this.state.variables.BMS_Info_OUT;\r\n        let readingsOrder = [\"PackVoltage\", \"PackCurrent\", \"PackTemp\", \"PackSoC\", \"CellVoltage\", \"CellTemp\", \"BMS_CellBalancing\", \"BMS_Info_OUT\"];\r\n        let readings = [];\r\n        if(PackVoltage.enabled) {\r\n            readings.push(pcm.ReadVariable(PackVoltage.name))\r\n        } else {\r\n            readings.push(Promise.resolve({data: 0}))\r\n        }\r\n        if(PackCurrent.enabled) {\r\n            readings.push(pcm.ReadVariable(PackCurrent.name))\r\n        } else {\r\n            readings.push(Promise.resolve({data: 0}))\r\n        }\r\n        if(PackTemp.enabled) {\r\n            readings.push(pcm.ReadVariable(PackTemp.name))\r\n        } else {\r\n            readings.push(Promise.resolve({data: 0}))\r\n        }\r\n        if(PackSoC.enabled) {\r\n            readings.push(pcm.ReadVariable(PackSoC.name))\r\n        } else {\r\n            readings.push(Promise.resolve({data: 0}))\r\n        }\r\n        if(CellVoltage.enabled) {\r\n            readings.push(pcm.ReadFloatArray(CellVoltage.name, this.state.cellsNumber))\r\n        } else {\r\n            readings.push(Promise.resolve({data: [...Array(this.state.cellsNumber).keys()].map(() => 0)}))\r\n        }\r\n        if(CellTemp.enabled) {\r\n            readings.push(pcm.ReadFloatArray(CellTemp.name, this.state.cellsNumber))\r\n        } else {\r\n            readings.push(Promise.resolve({data: [...Array(this.state.cellsNumber).keys()].map(() => 0)}))\r\n        }\r\n        if(CellSoC.enabled) {\r\n            readings.push(pcm.ReadFloatArray(CellSoC.name, this.state.cellsNumber))\r\n        } else {\r\n            readings.push(Promise.resolve({data: [...Array(this.state.cellsNumber).keys()].map(() => 0)}))\r\n        }\r\n        if(BMS_CellBalancing.enabled) {\r\n            readings.push(pcm.ReadUIntArray(BMS_CellBalancing.name, this.state.cellsNumber, BMS_CellBalancing.type.size))\r\n        } else {\r\n            readings.push(Promise.resolve({data: [...Array(this.state.cellsNumber).keys()].map(() => 0)}))\r\n        }\r\n        if(BMS_Info_OUT.enabled) {\r\n            readings.push(pcm.ReadUIntArray(BMS_Info_OUT.name, 8, BMS_Info_OUT.type.size))\r\n        } else {\r\n            readings.push(Promise.resolve({data: [...Array(8).keys()].map(() => 0)}))\r\n        }\r\n\r\n        //using this polyfill because FreeMASTER desktop Chromium version appears to not have it defined\r\n        let Promise_allSettled_polyfill = function (promises) {\r\n            let mappedPromises = promises.map((p) => {\r\n              return p\r\n                .then((value) => {\r\n                  return {\r\n                    status: 'fulfilled',\r\n                    value,\r\n                  };\r\n                })\r\n                .catch((reason) => {\r\n                  return {\r\n                    status: 'rejected',\r\n                    reason,\r\n                  };\r\n                });\r\n            });\r\n            return Promise.all(mappedPromises);\r\n        };\r\n\r\n        Promise_allSettled_polyfill(readings)\r\n            .then((result) => {\r\n                result = result.map((element, index) => ({index: index, ...element}))\r\n                let failedReadings = result.filter(reading => reading.status === \"rejected\")\r\n                if(failedReadings.length > 0) {\r\n                    throw {failedReadings}\r\n                }\r\n                result = result.map(element => element.value)\r\n                \r\n                for(let index = 0; index < this.state.cellsNumber; index++) {\r\n                    let labels = this.cellsData[index].labels;\r\n                    let voltageSeries = this.cellsData[index].voltage;\r\n                    let balancingSeries = this.cellsData[index].balancing;\r\n                    let tempSeries = this.cellsData[index].temp;\r\n                    let socSeries = this.cellsData[index].soc;\r\n                    labels.push(this.passedSeconds)\r\n    \r\n                    // for voltage data\r\n                    switch(this.state.units.systemVoltageUnits) {\r\n                        case \"\\u00b5V\":\r\n                            voltageSeries.push(normalToMicro(result[4].data[index]))\r\n                            break;\r\n                        case \"mV\":\r\n                            voltageSeries.push(normalToMili(result[4].data[index]))\r\n                            break;\r\n                        case \"V\":\r\n                            voltageSeries.push(result[4].data[index])\r\n                            break;\r\n                    }\r\n                    // for temp data\r\n                    switch(this.state.units.systemTempUnits) {\r\n                        case \"\\u00b0C\":\r\n                            tempSeries.push(result[5].data[index])\r\n                            break;\r\n                        case \"\\u00b0F\":\r\n                            tempSeries.push(celsiusToFahrenheit(result[5].data[index]))\r\n                            break;\r\n                        case \"K\":\r\n                            tempSeries.push(celsiusToKelvin(result[5].data[index]))\r\n                            break;\r\n                    }\r\n                    socSeries.push(result[6].data[index])\r\n                    balancingSeries.push(result[7].data[index])\r\n                    \r\n                    if(voltageSeries.length > this.maxSavedGraphDataPoints) {\r\n                        labels.splice(0, labels.length - this.maxSavedGraphDataPoints)\r\n                        voltageSeries.splice(0, voltageSeries.length - this.maxSavedGraphDataPoints)\r\n                        balancingSeries.splice(0, balancingSeries.length - this.maxSavedGraphDataPoints)\r\n                        tempSeries.splice(0, tempSeries.length - this.maxSavedGraphDataPoints)\r\n                        socSeries.splice(0, socSeries.length - this.maxSavedGraphDataPoints)\r\n                    }\r\n                }                \r\n\r\n                // for voltage data\r\n                switch(this.state.units.systemVoltageUnits) {\r\n                    case \"\\u00b5V\":\r\n                        this.packVoltage.push(normalToMicro(result[0].data))\r\n                        break;\r\n                    case \"mV\":\r\n                        this.packVoltage.push(normalToMili(result[0].data))\r\n                        break;\r\n                    case \"V\":\r\n                        this.packVoltage.push(result[0].data)\r\n                        break;\r\n                }\r\n                // for current data\r\n                switch(this.state.units.systemCurrentUnits) {\r\n                    case \"\\u00b5A\":\r\n                        this.packCurrent.push(normalToMicro(result[1].data))\r\n                        break;\r\n                    case \"mA\":\r\n                        this.packCurrent.push(normalToMili(result[1].data))\r\n                        break;\r\n                    case \"A\":\r\n                        this.packCurrent.push(result[1].data)\r\n                        break;\r\n                }\r\n                // for temp data\r\n                switch(this.state.units.systemTempUnits) {\r\n                    case \"\\u00b0C\":\r\n                        this.packTemperature.push(result[2].data) // in Celsius,\r\n                        break;\r\n                    case \"\\u00b0F\":\r\n                        this.packTemperature.push(celsiusToFahrenheit(result[2].data))\r\n                        break;\r\n                    case \"K\":\r\n                        this.packTemperature.push(celsiusToKelvin(result[2].data))\r\n                        break;\r\n                }\r\n\r\n                this.packSoC.push(result[3].data)\r\n                this.labels.push(this.passedSeconds)\r\n                if(this.packVoltage.length > this.maxSavedGraphDataPoints) {\r\n                    this.packVoltage.splice(0, this.packVoltage.length - this.maxSavedGraphDataPoints)\r\n                    this.packCurrent.splice(0, this.packCurrent.length - this.maxSavedGraphDataPoints)\r\n                    this.packTemperature.splice(0, this.packTemperature.length - this.maxSavedGraphDataPoints)\r\n                    this.packSoC.splice(0, this.packSoC.length - this.maxSavedGraphDataPoints)\r\n                    this.labels.splice(0, this.labels.length - this.maxSavedGraphDataPoints)\r\n                }\r\n                this.setState((prevState) => ({\r\n                    labels: this.labels,\r\n                    packVoltage: this.packVoltage,\r\n                    packCurrent: this.packCurrent,\r\n                    packTemperature: this.packTemperature,\r\n                    packSoC: this.packSoC,\r\n                    cellsData: this.cellsData,\r\n                    indicators: this.proccesFaults(prevState, result)\r\n                }))\r\n                this.passedSeconds++;\r\n                this.readVarsTimeout = setTimeout(this.readVariables, this.updateRate)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                if(err.failedReadings) {\r\n                    toast.error(<div> Reading the following variables failed. {err.failedReadings.map((failedReading) => <><br /> {readingsOrder[failedReading.index]}</>)}</div>)\r\n                } else {\r\n                    toast.error(\" Reading the variables failed.\")\r\n                }\r\n                clearTimeout(this.readVarsTimeout);\r\n                this.setState(() => ({boardConnected: false}));\r\n                //this.setUpDesktopConnectionCheck()\r\n            })\r\n    }\r\n\r\n    proccesFaults(prevState, result) {\r\n        let date = new Date;\r\n        let timeStamp = (date.getHours() < 10 ? '0' : '') + date.getHours() + \":\" + (date.getMinutes() < 10 ? '0' : '') + date.getMinutes() + \":\" + (date.getSeconds() < 10 ? '0' : '') + date.getSeconds()\r\n        let currentFaults = result[8].data\r\n        let changedFaults = prevState.indicators.blinkingStatus.map((indicator, index) => {\r\n            if(indicator !== currentFaults[index]) {\r\n                return 1\r\n            } else {\r\n                return 0\r\n            }\r\n        })\r\n        let newFaultsChanges = []\r\n        changedFaults.forEach((change, index) => {\r\n            if(change) {\r\n                newFaultsChanges.push({\r\n                    time: timeStamp,\r\n                    from: prevState.indicators.blinkingStatus[index],\r\n                    to: currentFaults[index],\r\n                    name: this.indicatorsNames[index]\r\n                })\r\n            }\r\n        })\r\n        return {\r\n            blinkingStatus: currentFaults,\r\n            history: [...prevState.indicators.history, ...newFaultsChanges]\r\n        }\r\n    }\r\n\r\n    defineDEMOVars(newCellsNumber) {\r\n        this.cellsData = [];\r\n        for(let cellIndex = 0; cellIndex < newCellsNumber; cellIndex++) {\r\n            this.cellsData.push({\r\n                labels: [],\r\n                voltage: [],\r\n                balancing: [],\r\n                current: [],\r\n                temp: [],\r\n                soc: []\r\n            })\r\n        }\r\n    }\r\n\r\n    readDEMOvars() {\r\n        for(let cellIndex = 0; cellIndex < this.state.cellsNumber; cellIndex++) {\r\n            let variables = {\r\n                cellVoltage: (Math.random() * (5 - 0) + 0) * 1000000, // in uV\r\n                cellCurrent: (Math.random() * (2 + 2) - 2) * 1000, // in mA\r\n                cellTemp: Math.random() * (70 + 40) -40, // in Celsius\r\n                // cellVoltage: 2000000, // in uV\r\n                // cellCurrent: 2000, // in mA\r\n                // cellTemp: 30, // in Celsius\r\n                CellSoC: Math.random(), // %\r\n                cellBalancing: Math.round(Math.random()) // 0 or 1\r\n            }\r\n            // for voltage data\r\n            switch(this.state.units.systemVoltageUnits) {\r\n                case \"\\u00b5V\":\r\n                    variables.cellVoltage = variables.cellVoltage\r\n                    break;\r\n                case \"mV\":\r\n                    variables.cellVoltage = microToMili(variables.cellVoltage)\r\n                    break;\r\n                case \"V\":\r\n                    variables.cellVoltage = microToNormal(variables.cellVoltage)\r\n                    break;\r\n            }\r\n            // for current data\r\n            switch(this.state.units.systemCurrentUnits) {\r\n                case \"\\u00b5A\":\r\n                    variables.cellCurrent = miliToMicro(variables.cellCurrent)\r\n                    break;\r\n                case \"mA\":\r\n                    variables.cellCurrent = variables.cellCurrent\r\n                    break;\r\n                case \"A\":\r\n                    variables.cellCurrent = miliToNormal(variables.cellCurrent)\r\n                    break;\r\n            }\r\n            // for temp data\r\n            switch(this.state.units.systemTempUnits) {\r\n                case \"\\u00b0C\":\r\n                    variables.cellTemp = variables.cellTemp\r\n                    break;\r\n                case \"\\u00b0F\":\r\n                    variables.cellTemp = celsiusToFahrenheit(variables.cellTemp)\r\n                    break;\r\n                case \"K\":\r\n                    variables.cellTemp = celsiusToKelvin(variables.cellTemp)\r\n                    break;\r\n            }\r\n            this.cellsData[cellIndex].labels.push(this.passedSeconds)\r\n            this.cellsData[cellIndex].voltage.push(variables.cellVoltage)\r\n            this.cellsData[cellIndex].current.push(variables.cellCurrent)\r\n            this.cellsData[cellIndex].balancing.push(variables.cellBalancing)\r\n            this.cellsData[cellIndex].temp.push(variables.cellTemp)\r\n            this.cellsData[cellIndex].soc.push(variables.CellSoC)\r\n\r\n            if(this.cellsData[cellIndex].labels.length > this.maxSavedGraphDataPoints) {\r\n                this.cellsData[cellIndex].labels.splice(0, this.cellsData[cellIndex].labels.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].voltage.splice(0, this.cellsData[cellIndex].voltage.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].current.splice(0, this.cellsData[cellIndex].current.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].balancing.splice(0, this.cellsData[cellIndex].balancing.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].temp.splice(0, this.cellsData[cellIndex].temp.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].soc.splice(0, this.cellsData[cellIndex].soc.length - this.maxSavedGraphDataPoints)\r\n            }\r\n        }\r\n\r\n        // for voltage data\r\n        switch(this.state.units.systemVoltageUnits) {\r\n            case \"\\u00b5V\":\r\n                this.packVoltage.push((Math.random() * (5 - 0) + 0) * 1000000) // in uV,\r\n                break;\r\n            case \"mV\":\r\n                this.packVoltage.push(microToMili((Math.random() * (5 - 0) + 0) * 1000000))\r\n                break;\r\n            case \"V\":\r\n                this.packVoltage.push(microToNormal((Math.random() * (5 - 0) + 0) * 1000000))\r\n                break;\r\n        }\r\n        // for current data\r\n        switch(this.state.units.systemCurrentUnits) {\r\n            case \"\\u00b5A\":\r\n                this.packCurrent.push(miliToMicro((Math.random() * (2 + 2) - 2) * 1000))\r\n                break;\r\n            case \"mA\":\r\n                this.packCurrent.push((Math.random() * (2 + 2) - 2) * 1000) // in mA,\r\n                break;\r\n            case \"A\":\r\n                this.packCurrent.push(miliToNormal((Math.random() * (2 + 2) - 2) * 1000))\r\n                break;\r\n        }\r\n        // for temp data\r\n        switch(this.state.units.systemTempUnits) {\r\n            case \"\\u00b0C\":\r\n                this.packTemperature.push(Math.random() * (70 + 40) -40) // in Celsius,\r\n                break;\r\n            case \"\\u00b0F\":\r\n                this.packTemperature.push(celsiusToFahrenheit(Math.random() * (70 + 40) -40))\r\n                break;\r\n            case \"K\":\r\n                this.packTemperature.push(celsiusToKelvin(Math.random() * (70 + 40) -40))\r\n                break;\r\n        }\r\n\r\n        this.packSoC.push(Math.random()) // %,\r\n        this.labels.push(this.passedSeconds)\r\n        if(this.packVoltage.length > this.maxSavedGraphDataPoints) {\r\n            this.packVoltage.splice(0, this.packVoltage.length - this.maxSavedGraphDataPoints)\r\n            this.packCurrent.splice(0, this.packCurrent.length - this.maxSavedGraphDataPoints)\r\n            this.packTemperature.splice(0, this.packTemperature.length - this.maxSavedGraphDataPoints)\r\n            this.packSoC.splice(0, this.packSoC.length - this.maxSavedGraphDataPoints)\r\n            this.labels.splice(0, this.labels.length - this.maxSavedGraphDataPoints)\r\n        }\r\n        this.setState((prevState) => ({\r\n            labels: this.labels,\r\n            packVoltage: this.packVoltage,\r\n            packCurrent: this.packCurrent,\r\n            packTemperature: this.packTemperature,\r\n            packSoC: this.packSoC,\r\n            cellsData: this.cellsData,\r\n            indicators: this.proccesFaults(prevState, [...Array(12).keys()].map(elem => elem === 4 ? {data: Math.round(Math.random())} : {data: 0}))\r\n        }))\r\n        this.passedSeconds++;\r\n        this.readDEMOVarsTimeout = setTimeout(this.readDEMOvars, 900)\r\n    }\r\n\r\n    onClickDisconnect() {\r\n        let pcm = this.state.pcm\r\n        clearTimeout(this.readVarsTimeout);\r\n        pcm.StopComm()\r\n            .then(() => {\r\n                toast.success(\" Disconnected.\")\r\n                this.setState(() => ({boardConnected: false, pcm: null}));\r\n                this.setUpDesktopConnectionCheck()\r\n            })\r\n            .catch(() => {\r\n                toast.error(\" Stopping the communication failed.\")\r\n            })\r\n    }\r\n\r\n    onClickConnect(options) {\r\n        if(this.state.loading) {\r\n            return\r\n        }\r\n        //if demo mode is active do not allow the user to connect to a board\r\n        if(this.state.demoModeActive) {\r\n            toast.error(\" Disable demo mode before connecting to the board.\")\r\n            return;\r\n        }\r\n        \r\n        var liteServer = options?.liteServer || this.state.liteConnection.liteServerUrl\r\n        var connString = options?.connString || this.state.liteConnection.connString\r\n        \r\n        const on_connect = () => {\r\n            let pcm = this.state.pcm;\r\n            // console.log(\"Go!\")\r\n            \r\n            if(this.state.freemasterVersion === \"desktop\") { //case for desktop freemaster\r\n                pcm.StartComm(\"preset\") // \"preset\" is used for the default connection built in the freemaster app\r\n                    .then(() => {\r\n                        toast.success(\" Successfully connected.\")\r\n                        this.defineVariables(this.state.cellsNumber)\r\n                            .then(() => {\r\n                                this.passedSeconds = 0\r\n                                this.readVariables()\r\n                                this.setState(() => ({boardConnected: true, loading: false}));\r\n                            })\r\n                    })\r\n            } else {\r\n                pcm.StartComm(connString)\r\n                    .then(pcm.IsBoardDetected)\r\n                    .then((response) => {\r\n                        if(response.data === true) {\r\n                            return pcm.GetDetectedBoardInfo()\r\n                        } else {\r\n                            throw new Error(\"Board not detected!\")\r\n                        }\r\n                    })\r\n                    .then((response) => {\r\n                        // console.log(\"Board information: \", response.data)\r\n                        return pcm.ReadELF(this.state.elfPath)\r\n                        // return pcm.ReadTSA()\r\n                    })\r\n                    .catch(() => {\r\n                        return pcm.ReadTSA()\r\n                    })\r\n                    .then(() => {\r\n                        toast.success(\" Successfully connected.\")\r\n                        this.defineVariables(this.state.cellsNumber)\r\n                            .then(() => {\r\n                                this.passedSeconds = 0\r\n                                this.readVariables()\r\n                                this.setState(() => ({boardConnected: true, loading: false}));\r\n                            })\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                        toast.error(\" An error has occurred, check the connection parameters.\")\r\n                        this.setState(() => ({loading: false}));\r\n                    })\r\n            }  \r\n        }\r\n\r\n        const on_close = () => {\r\n            toast.error(\" Connection Closed.\")\r\n            clearTimeout(this.readVarsTimeout);\r\n            this.setState(() => ({boardConnected: false, loading: false}));\r\n        }\r\n\r\n        const on_error = () => {\r\n            toast.error(\" An error has occurred, check the connection.\")\r\n            clearTimeout(this.readVarsTimeout);\r\n            this.setState(() => ({boardConnected: false, loading: false}));\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.pcm = new PCM(liteServer, on_connect, on_close, on_error);\r\n        this.setState(() => ({loading: true}));\r\n    }\r\n\r\n    setUpDesktopConnectionCheck() {\r\n        let checkForDesktopConnection = () => {\r\n            if(this.state.boardConnected === false) {\r\n                let on_connect = () => {\r\n                    testConnection.IsCommPortOpen()\r\n                        .then((response) => {\r\n                            if(response.data === true) {\r\n                                this.onClickConnect()\r\n                            } else {\r\n                                setTimeout(checkForDesktopConnection, 1000)\r\n                            }\r\n                        })\r\n                }\r\n                let testConnection = new PCM(\"localhost:41000\", on_connect)\r\n            }\r\n        }\r\n        checkForDesktopConnection()\r\n    }\r\n\r\n    componentDidMount() {\r\n        //init bootstrap tooltips\r\n        window.$('[data-toggle=\"tooltip\"]').tooltip();\r\n\r\n        this.setUpDesktopConnectionCheck()\r\n\r\n        //read and apply the local saved config\r\n        let on_connect = (conn, configFilePath) => {\r\n            var fileId;\r\n            conn.LocalFileOpen(configFilePath, \"r\")\r\n                .then((response) => {\r\n                    fileId = response.data\r\n                    return conn.LocalFileReadString(fileId, 99999)\r\n                })\r\n                .then((response) => {\r\n                    let contentToParse = response.data\r\n                    contentToParse = contentToParse.replace(/5V/g, \"\\u00b5V\")\r\n                    contentToParse = contentToParse.replace(/5A/g, \"\\u00b5A\")\r\n                    contentToParse = contentToParse.replace(/0C/g, \"\\u00b0C\")\r\n                    contentToParse = contentToParse.replace(/0F/g, \"\\u00b0F\")\r\n                    this.setState(() => JSON.parse(contentToParse))\r\n                })\r\n                .finally(() => conn.LocalFileClose(fileId))\r\n        }\r\n        let liteConn = new PCM(\"localhost:8090\", () => on_connect(liteConn, \".\\\\bms-config.txt\"));\r\n        let desktopConn = new PCM(\"localhost:41000\", () => on_connect(desktopConn, \"..\\\\bms-config.txt\"));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.readVarsTimeout);\r\n        clearTimeout(this.readDEMOVarsTimeout);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"content-area\">\r\n                    <div className=\"container-fluid\">\r\n                        <div id=\"main-container\" className=\"mt-1\">\r\n\r\n                            <div id=\"header-container\" className=\"row\">\r\n                                <div className=\"col-lg-12\">\r\n\r\n                                    <div className=\"row\">\r\n                                        <h2 className=\"ml-3\" style={{fontSize: \"1.7rem\"}}>\r\n                                            Battery Management System { this.state.demoModeActive ? \"(Demo mode active)\" : \"\" }\r\n                                        </h2>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <HeaderButton text=\"Dashboard\" active=\"true\" controls=\"#dashboard-container\" icon=\"fa fa-sliders\" disabled={false}></HeaderButton>\r\n                                        <HeaderButton buttonRef={this.cellsPackButton} text=\"Cells Pack\" controls=\"#cell-pack-container\" icon=\"fa fa-list\" disabled={false}></HeaderButton>\r\n                                        <HeaderButton text=\"Raw Data\" controls=\"#raw-data-container\" icon=\"fa fa-table\" disabled={false}></HeaderButton>\r\n                                        <HeaderButton text=\"System Configuration\" controls=\"#chemistry-container\" icon=\"fa fa-flask\" disabled={false}></HeaderButton>\r\n\r\n                                        <a className=\"btn btn-large white-text-button btn-primary\" style={{position:\"absolute\", right: \"15px\"}} role=\"button\"\r\n                                            onClick={this.state.boardConnected ? this.onClickDisconnect : this.onClickConnect}>\r\n                                                {   (this.state.boardConnected === false && this.state.loading === true) &&\r\n                                                        <React.Fragment>\r\n                                                        <span className=\"spinner-grow mr-2\" style={{width: \"1.4rem\", height: \"1.4rem\"}} role=\"status\" aria-hidden=\"true\"></span>\r\n                                                            Connecting\r\n                                                        </React.Fragment>\r\n                                                }\r\n                                                {   (this.state.boardConnected === true && this.state.loading === false) &&\r\n                                                        <React.Fragment>\r\n                                                            <i className=\"fa fa-exchange mr-2\" style={{width: \"1.4rem\", height: \"1.4rem\"}}></i>\r\n                                                            Disconnect\r\n                                                        </React.Fragment>\r\n                                                }\r\n                                                {   (this.state.boardConnected === false && this.state.loading === false) &&\r\n                                                        <React.Fragment>\r\n                                                            <i className=\"fa fa-exchange mr-2\" style={{width: \"1.4rem\", height: \"1.4rem\"}}></i>\r\n                                                            Connect\r\n                                                        </React.Fragment>\r\n                                                }\r\n\r\n                                        </a>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                            <ContentContainer active=\"true\" id=\"dashboard-container\" dataParent=\"#main-container\">\r\n                                <MainDashboard\r\n                                    cellsNumber={this.state.cellsNumber}\r\n                                    data={{\r\n                                        labels: this.state.labels,\r\n                                        packVoltage: this.state.packVoltage,\r\n                                        packCurrent: this.state.packCurrent,\r\n                                        packTemperature: this.state.packTemperature,\r\n                                        packSoC: this.state.packSoC\r\n                                    }}\r\n                                    indicatorsNames={this.indicatorsNames}\r\n                                    blinkingStatus={this.state.indicators.blinkingStatus}\r\n                                    indicatorsHistory={this.state.indicators.history}\r\n                                    clickCellsPackTab={() => {\r\n                                        this.cellsPackButton.current.click()\r\n                                    }}\r\n                                    boardConnected={this.state.boardConnected}\r\n                                    demoModeActive={this.state.demoModeActive}\r\n                                    units={this.state.units}\r\n                                    theme={this.state.theme}\r\n                                    graphSettings={this.state.graphSettings}\r\n                                />\r\n                            </ContentContainer>\r\n\r\n                            <ContentContainer id=\"cell-pack-container\" dataParent=\"#main-container\">\r\n                                <BatteryPack cellsNumber={this.state.cellsNumber}\r\n                                    cellsData={this.state.cellsData}\r\n                                    passedSeconds={this.passedSeconds}\r\n                                    numberOfCellVariables={this.numberOfCellVariables}\r\n                                    units={this.state.units}\r\n                                    theme={this.state.theme}\r\n                                    graphSettings={this.state.graphSettings} />\r\n                            </ContentContainer>\r\n\r\n                            <ContentContainer id=\"raw-data-container\" dataParent=\"#main-container\">\r\n                                <RawData cellsNumber={this.state.cellsNumber}\r\n                                    cellsData={this.state.cellsData}\r\n                                    units={this.state.units}\r\n                                    theme={this.state.theme} />\r\n                            </ContentContainer>\r\n\r\n                            <ContentContainer id=\"chemistry-container\" dataParent=\"#main-container\">\r\n                                <SystemConfiguration\r\n                                    boardConnected={this.state.boardConnected}\r\n                                    demoModeActive={this.state.demoModeActive}\r\n                                    liteConnection={this.state.liteConnection}\r\n                                    changeLiteConnection={(options) => {\r\n                                        this.setState(() => ({\r\n                                            liteConnection: {\r\n                                                liteServerUrl: options.liteServerUrl || this.state.liteConnection.liteServerUrl,\r\n                                                connString: options.connString || this.state.liteConnection.connString\r\n                                            }\r\n                                        }))\r\n                                    }}\r\n                                    freemasterVersion={this.state.freemasterVersion}\r\n                                    onSelectedFreemasterVersion={(selectedVerion) => {\r\n                                        this.setState(() => ({\r\n                                            freemasterVersion: selectedVerion\r\n                                        }))\r\n                                    }}\r\n                                    elfPath={this.state.elfPath}\r\n                                    changeElfPath={(newPath) => {\r\n                                        this.setState(() => ({\r\n                                            elfPath: newPath\r\n                                        }))\r\n                                    }}\r\n                                    variables={this.state.variables}\r\n                                    changeVariablesConfiguration={(newConfig, callback) => {\r\n                                        this.setState(() => ({\r\n                                            variables: newConfig\r\n                                        }), callback)\r\n                                    }}\r\n                                    graphSettings={this.state.graphSettings}\r\n                                    onToggleAutoScaling={() => {\r\n                                        this.setState((prevState) => ({\r\n                                            graphSettings: {\r\n                                                ...prevState.graphSettings,\r\n                                                graphAutoscaling: !prevState.graphSettings.graphAutoscaling\r\n                                            }\r\n                                        }))\r\n                                    }}\r\n                                    onToggleAnimations={() => {\r\n                                        this.setState((prevState) => ({\r\n                                            graphSettings: {\r\n                                                ...prevState.graphSettings,\r\n                                                graphAnimations: !prevState.graphSettings.graphAnimations\r\n                                            }\r\n                                        }))\r\n                                    }}\r\n                                    onChangeMaxOnGraphDataPoints={(newMaxOnGraphDataPoints) => {\r\n                                        this.setState((prevState) => ({\r\n                                            graphSettings: {\r\n                                                ...prevState.graphSettings,\r\n                                                maxOnGraphDataPoints: newMaxOnGraphDataPoints\r\n                                            }\r\n                                        }))\r\n                                    }}\r\n                                    changeCellsNumber={(newCellsNumber) => {\r\n                                        toast.info(\" Cells number changed to \" + newCellsNumber, {autoClose: 3000})\r\n                                        if(this.state.pcm) {\r\n                                            this.defineVariables(newCellsNumber)\r\n                                            .then(() => {\r\n                                                this.setState(() => ({cellsNumber: newCellsNumber}))\r\n                                            })\r\n                                        } else { //in demo mode\r\n                                            this.defineDEMOVars(newCellsNumber)\r\n                                            this.setState(() => ({cellsNumber: newCellsNumber}))\r\n                                        }\r\n                                    }}\r\n                                    cellsNumber={this.state.cellsNumber}\r\n                                    cellsData={this.state.cellsData}\r\n                                    data={{\r\n                                        labels: this.state.labels,\r\n                                        packVoltage: this.state.packVoltage,\r\n                                        packCurrent: this.state.packCurrent,\r\n                                        packTemperature: this.state.packTemperature,\r\n                                        packSoC: this.state.packSoC\r\n                                    }}\r\n                                    triggerDemoMode={() => {\r\n                                        this.labels = [];\r\n                                        this.cellsData = [];\r\n                                        this.packVoltage = [];\r\n                                        this.packCurrent = [];\r\n                                        this.packTemperature = [];\r\n                                        this.packSoC = [];\r\n                                        this.passedSeconds = 0;\r\n                                        if(this.state.demoModeActive === false) {\r\n                                            this.defineDEMOVars(this.state.cellsNumber)\r\n                                            this.readDEMOvars()\r\n                                            toast.info(\" Demo mode switched ON.\", {autoClose: 3000})\r\n                                        } else {\r\n                                            clearTimeout(this.readDEMOVarsTimeout);\r\n                                            toast.info(\" Demo mode switched OFF.\", {autoClose: 3000})\r\n                                        }\r\n                                        this.setState((prevState) => ({demoModeActive: !prevState.demoModeActive}))\r\n                                    }}\r\n                                    changeUnit={this.changeUnit}\r\n                                    units={this.state.units}\r\n                                    theme={this.state.theme}\r\n                                    changeApplicationTheme={(selectedTheme) => {\r\n                                        this.setState(() => ({theme: selectedTheme}))\r\n                                    }}\r\n                                />\r\n                            </ContentContainer>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12 mt-2 text-center\">\r\n                            {/* Learn More about:  */}\r\n                            <a href=\"https://www.nxp.com/design/software/development-software/freemaster-run-time-debugging-tool:FREEMASTER\"\r\n                                target=\"_blank\" className=\"ml-1\">\r\n                                    Get FreeMASTER\r\n                            </a>\r\n                            <span className=\"ml-1\">\r\n                                -\r\n                            </span>\r\n                            <a href=\"https://community.nxp.com/community/general-purpose-mcus/blog/2020/04/22/register-for-upcoming-freemaster-four-part-webinar-series-how-to-control-and-visualize-data-from-your-embedded-application-with-freemaster\"\r\n                                target=\"_blank\" className=\"ml-1\">\r\n                                    Learn FreeMASTER\r\n                            </a>\r\n                            <span className=\"ml-1\">\r\n                                -\r\n                            </span>\r\n                            <a href=\"https://community.nxp.com/community/freemaster/\"\r\n                                target=\"_blank\" className=\"ml-1\">\r\n                                    FreeMASTER Community\r\n                            </a>\r\n                            <span className=\"ml-1\">\r\n                                -\r\n                            </span>\r\n                            <a href=\"https://community.nxp.com/community/mbdt?tid=community\"\r\n                                target=\"_blank\" className=\"ml-1\">\r\n                                    MBDT Community\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12 text-center\">\r\n                            &copy; 2020 NXP\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <ToastContainer />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}