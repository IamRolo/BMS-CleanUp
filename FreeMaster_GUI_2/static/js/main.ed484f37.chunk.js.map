{"version":3,"sources":["components/contents/helpers/ContentContainer.jsx","components/header/HeaderButton.jsx","components/contents/helpers/CardBoxContainer.jsx","components/contents/Battery/Battery.jsx","components/contents/Battery/Graph.jsx","components/contents/helpers/LabelWithValue.jsx","components/contents/StatusIndicatorWidget/Led/Led.jsx","components/contents/StatusIndicatorWidget/StatusIndicator.jsx","components/contents/StatusIndicatorWidget/StatusIndicatorWidget.jsx","components/contents/StatusIndicatorWidget/StatusIndicatorsHistory.jsx","components/contents/MainDashboard.jsx","components/contents/helpers/CardBoxBatteryContainer.jsx","components/contents/Battery/BatteryWithGraph.jsx","components/contents/Battery/BatteryPack.jsx","components/contents/RawData/TableRowFromVariable.jsx","components/contents/RawData/RawDataTable.jsx","components/contents/RawData/RawData.jsx","components/contents/helpers/ConnectionSettingsWidget.jsx","components/contents/helpers/DataRecorderSettingsWidget.jsx","components/contents/helpers/ChartSettingsWidget.jsx","components/contents/SystemConfiguration.jsx","components/helper-functions/conversions.js","freemaster-libs/simple-jsonrpc-js.js","freemaster-libs/freemaster-client.js","App.js","serviceWorker.js","index.js"],"names":["ContentContainer","props","state","active","Fragment","id","this","className","data-parent","dataParent","children","React","Component","HeaderButton","ref","buttonRef","disabled","href","controls","aria-controls","role","data-toggle","aria-expanded","icon","text","CardBoxContainer","width","onClick","theme","Battery","battery","createRef","liquid","liquidSvgAnimation","batteryText","batteryTextPercentage","batteryTextUnits","updateBattery","bind","batterySoc","level","Math","trunc","current","style","fill","backgroundImage","backgroundPosition","top","backgroundColor","innerText","toFixed","soc","position","positionStyle","sizeStyle","version","xmlns","x","y","height","viewBox","enableBackground","d","isCharging","Graph","data","labels","datasets","borderColor","pointRadius","borderWidth","options","animation","duration","easing","tooltips","enabled","legend","display","scales","xAxes","gridLines","color","ticks","fontColor","beginAtZero","yAxes","zeroLineColor","maintainAspectRatio","chartReference","numberOfPoints","length","chartInstance","min","max","values","graphSettings","graphAutoscaling","undefined","setScales","graphAnimations","update","BatteryPack","paddingRight","paddingLeft","label","value","units","Led","blinking","StatusIndicator","marginBottom","StatusIndicatorsWidget","marginTop","indicatorsNames","map","name","index","boardConnected","demoModeActive","blinkingStatus","StatusIndicatorsHistory","scrolabaleHistoryContainer","scrollTop","scrollHeight","history","filename","cursor","textDecoration","data-placement","title","class","aria-hidden","minHeight","maxHeight","overflowY","historyItem","key","minWidth","to","time","MainDashboard","currentPackStatus","currentPackSoc","packSoC","currentPackVoltage","packVoltage","currentPackCurrent","packCurrent","currentPackTemperature","packTemperature","currentPackPower","clickCellsPackTab","left","LabelWithValue","systemSocUnits","systemVoltageUnits","systemCurrentUnits","systemTempUnits","systemPowerUnits","fontSize","padding","axis","voltage","cellsNumber","indicatorsHistory","CardBoxBatteryContainer","paddingBottom","paddingTop","BatteryWithGraph","dropdownContextMenu","voltageOption","curentOption","tempOption","selectedOption","voltageChartContainer","currentChartContainer","temperatureChartContainer","balancingChartContainer","visible","selectedToShow","contextMenuOpen","menuOptionChange","adjustToSystemUnits","visibilityChange","document","body","addEventListener","classList","remove","e","clientY","clientX","add","preventDefault","target","setState","nextProps","nextState","isVisible","onChange","onContextMenu","data-target","cellData","balancing","temp","tabIndex","aria-labelledby","maxWidth","type","data-dismiss","aria-label","Array","keys","element","cellsData","TableRowFromVariable","scope","noDecimals","RawDataTable","RawData","partialVisibility","ConnectionSettingsWidget","freemasterVersion","liteServerUrlInput","connStringInput","elfPathInput","onInputChange","onelfPathInputChange","defaultValue","liteConnection","liteServerUrl","connString","elfPath","changeLiteConnection","changeElfPath","onSelectedFreemasterVersion","htmlFor","defaultChecked","placeholder","aria-describedby","DataRecorderSettingsWidget","onSelectedRecordParamsToggle","ChartSettingsWidget","onToggleAutoScaling","onToggleAnimations","SystemConfiguration","cellsNr","selectedRecordParam","temperature","recordedData","cellsNumberSelect","onChangeCellsNumber","onChangeUnits","formatRecordedData","changeUnit","Number","changeCellsNumber","push","cellIndex","dataLength","dataIndex","toast","info","autoClose","param","prevState","triggerDemoMode","background","changeApplicationTheme","pcm","loading","microToMili","microToNormal","miliToMicro","miliToNormal","normalToMicro","normalToMili","celsiusToFahrenheit","celsiusToKelvin","_Promise","Promise","root","isUndefined","isArray","isObject","isFunction","isString","isEmpty","idx","hasOwnProperty","forEach","callback","_key","ERRORS","ServerError","code","message","Boolean","prototype","Error","simple_jsonrpc","self","waitingframe","dispatcher","setError","jsonrpcError","exception","error","JSON","parse","stringify","resolver","isError","reject","console","log","isResponse","result","resolve","method","isRequest","request","METHOD_NOT_FOUND","params","fn","call","apply","INVALID_PARAMS","argsValues","arg","Object","toString","thing","then","res","catch","INTERNAL_ERROR","handleRemoteRequest","INVALID_REQUEST","notification","promise","toStream","a","arguments","dispatch","functionName","paramsNameFn","on","off","_call","batch","requests","promises","req","err","all","messageHandler","rawMessage","msg","r","beforeResolve","PARSE_ERROR","customException","WebSocket","PCM","url","onSocketOpen","onSocketClose","onSocketError","jrpc","socket","SendRequest","args","response","success","OnServerError","OnSocketOpen","OnSocketClose","OnSocketError","_msg","send","onopen","event","onclose","onerror","onmessage","GetAppVersion","EnumCommPorts","GetCommPortInfo","StartComm","StopComm","IsCommPortOpen","IsBoardDetected","GetDetectedBoardInfo","GetConfigParamU8","GetConfigParamULEB","GetConfigParamString","len","ReadIntVariable","addr","size","ReadUIntVariable","ReadFloatVariable","ReadDoubleVariable","WriteIntVariable","WriteUIntVariable","WriteFloatVariable","WriteDoubleVariable","ReadIntArray","elSize","ReadUIntArray","ReadFloatArray","ReadDoubleArray","WriteIntArray","WriteUIntArray","WriteFloatArray","WriteDoubleArray","ReadELF","elfFile","ReadTSA","EnumSymbols","GetSymbolInfo","EnumVariables","GetVariableInfo","DefineVariable","variable","DeleteVariable","DeleteAllScriptVariables","ReadVariable","WriteVariable","SetupOscilloscope","vars","GetOscilloscopeData","GetRecorderLimits","SetupRecorder","config","recVars","trgVars","StartRecorder","StopRecorder","GetRecorderStatus","GetRecorderData","PipeOpen","port","txBufferSize","rxBufferSize","PipeClose","PipeFlush","timeout","PipeSetDefaultRxMode","rxAllOrNothing","rxTimeout_ms","PipeSetDefaultStringMode","unicode","PipeGetRxBytes","PipeGetTxBytes","PipeGetTxFree","PipeGetRxBufferSize","PipeGetTxBufferSize","PipeWriteString","str","allOrNothing","PipeWriteIntArray","PipeWriteUIntArray","PipeWriteFloatArray","PipeWriteDoubleArray","PipeReadString","charsToRead","PipeReadIntArray","PipeReadUIntArray","PipeReadFloatArray","PipeReadDoubleArray","LocalFileOpen","file","mode","LocalFileClose","handle","LocalFileReadString","LocalFileWriteString","LogEnable","LogDisable","LogSetPattern","pattern","LogSetVerbosity","verbosity","LogSetServices","mask","services","EnableExtraFeatures","enable","OnBoardDetected","OnCommPortStateChanged","OnVariableChanged","OnRecorderDone","params_array","StartStopComm","start","EnableEvents","SubscribeVariable","interval","UnSubscribeVariable","name_or_id","DefineSymbol","address","GetStructMemberInfo","member","DeleteAllScriptSymbols","RunStimulators","StopStimulators","Exit","ActivateWindow","SelectItem","tab","OpenProject","IsBoardWithActiveContent","EnumHrefLinks","EnumProjectFiles","SetPageReloadOnPortOpen","GetPageReloadOnPortOpen","PipeSetDefaultTxMode","txAllOrNothing","GetAddressInfo","DefineOscilloscope","defStr","DefineRecorder","SendCommand","wait","GetCurrentRecorderState","GetCurrentRecorderData","GetCurrentRecorderSeries","App","indicators","maxOnGraphDataPoints","passedSeconds","updateRate","maxSavedGraphDataPoints","variables","PackVoltage","PackCurrent","PackTemp","PackSoC","CellVoltage","CellCurrent","CellTemp","CellSOC","BMS_CellBalancing","BMS_Info_OUT","numberOfCellVariables","cellsPackButton","onClickConnect","onClickDisconnect","defineVariables","readVariables","readDEMOvars","defineDEMOVars","proccesFaults","setUpDesktopConnectionCheck","charAt","defines","indicatorIndex","readings","initialDataArray","slice","voltageSeries","balancingSeries","tempSeries","socSeries","splice","readVarsTimeout","setTimeout","clearTimeout","date","Date","timeStamp","getHours","getMinutes","getSeconds","currentFaults","elem","i","changedFaults","indicator","newFaultsChanges","change","from","newCellsNumber","cellVoltage","random","cellCurrent","cellTemp","cellSOC","cellBalancing","round","readDEMOVarsTimeout","liteServer","checkForDesktopConnection","testConnection","window","$","tooltip","right","click","selectedVerion","newPath","onChangeMaxOnGraphDataPoints","newMaxOnGraphDataPoints","selectedTheme","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8RAiDeA,G,wDAtBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACTC,OAAQ,EAAKF,MAAME,SAAU,GAHhB,E,qDASjB,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,GAAIC,KAAKL,MAAMI,GAAIE,UAAW,gBAAuC,QAArBD,KAAKJ,MAAMC,OAAmB,QAAU,IACxFK,cAAaF,KAAKL,MAAMQ,YACzB,yBAAKF,UAAU,kBACVD,KAAKL,MAAMS,gB,GAfDC,IAAMC,YCsBtBC,G,wDAnBb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACTC,OAAQ,EAAKF,MAAME,SAAU,GAHhB,E,qDAQjB,OACI,kBAAC,IAAMC,SAAP,KACI,uBAAGU,IAAKR,KAAKL,MAAMc,UAAWR,UAAW,wCAA0CD,KAAKJ,MAAMC,OAAmB,kBAA4D,IAAxBG,KAAKL,MAAMe,SAAoB,YAAc,IAC9LC,KAAMX,KAAKL,MAAMiB,SAAUC,gBAAeb,KAAKL,MAAMiB,SACrDE,KAAK,SAASC,cAAY,WAAWC,gBAAehB,KAAKJ,MAAMC,QACnE,uBAAGI,UAAWD,KAAKL,MAAMsB,OAHzB,IAGqCjB,KAAKL,MAAMuB,W,GAdjCb,IAAMC,YCiBlBa,E,uKAZX,OACI,kBAAC,IAAMrB,SAAP,KACI,yBAAKG,UAAWD,KAAKL,MAAMyB,MAAQ,WAAYC,QAASrB,KAAKL,MAAM0B,SAC/D,yBAAKpB,UAAW,mBAA0C,UAArBD,KAAKL,MAAM2B,MAAoB,oBAAsB,KACjFtB,KAAKL,MAAMS,gB,GAXLC,IAAMC,WC2EtBiB,G,wDAxEb,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IAGD6B,QAAUnB,IAAMoB,YACrB,EAAKC,OAASrB,IAAMoB,YACpB,EAAKE,mBAAqBtB,IAAMoB,YAChC,EAAKG,YAAcvB,IAAMoB,YACzB,EAAKI,sBAAwBxB,IAAMoB,YACnC,EAAKK,iBAAmBzB,IAAMoB,YAE9B,EAAKM,cAAgB,EAAKA,cAAcC,KAAnB,gBAXJ,E,0DAcLC,GACZ,IAAIC,EAAQC,KAAKC,MAAmB,IAAbH,GACpBC,EAAQ,IACPlC,KAAK2B,mBAAmBU,QAAQC,MAAMC,KAAO,MAC7CvC,KAAKwB,QAAQa,QAAQC,MAAME,gBAAkB,qCACvCN,EAAQ,IACdlC,KAAK2B,mBAAmBU,QAAQC,MAAMC,KAAO,SAC7CvC,KAAKwB,QAAQa,QAAQC,MAAME,gBAAkB,wCACvCN,EAAQ,IACdlC,KAAK2B,mBAAmBU,QAAQC,MAAMC,KAAO,aAC7CvC,KAAKwB,QAAQa,QAAQC,MAAME,gBAAkB,6CAE7CxC,KAAK2B,mBAAmBU,QAAQC,MAAMC,KAAO,QAC7CvC,KAAKwB,QAAQa,QAAQC,MAAME,gBAAkB,uCAGjDxC,KAAKwB,QAAQa,QAAQC,MAAMG,mBAAqB,OAAS,IAAMP,GAAS,IACxElC,KAAK4B,YAAYS,QAAQC,MAAMG,mBAAqB,OAAS,IAAMP,GAAS,IAC5ElC,KAAK0B,OAAOW,QAAQC,MAAMI,IAAO,IAAMR,EAAS,IAE5ClC,KAAK0B,OAAOW,QAAQC,MAAMK,gBADjB,MAAVT,EAC6C,QAEA,OAEhDlC,KAAK6B,sBAAsBQ,QAAQO,WAA0B,IAAbX,GAAkBY,QAAQ,K,2CAIrE7C,KAAKL,MAAMmD,KACZ9C,KAAK+B,cAAc/B,KAAKL,MAAMmD,O,+BAKlC,OACI,kBAAC,IAAMhD,SAAP,KAEI,yBAAKC,GAAIC,KAAKL,MAAMI,IAAM,GAAIuC,MAAK,aAAGS,SAAU,YAAe/C,KAAKL,MAAMqD,gBACtE,yBAAKxC,IAAKR,KAAKwB,QAASvB,UAAU,mBAAmBqC,MAAK,eAAMtC,KAAKL,MAAMsD,YACvE,yBAAKzC,IAAKR,KAAK0B,OAAQzB,UAAU,0BAC7B,yBAAKiD,QAAQ,MAAMC,MAAM,6BAA6BC,EAAE,MAAMC,EAAE,MAAMjC,MAAM,QAAQkC,OAAO,MAAMC,QAAQ,YAAYC,iBAAiB,iBAClI,0BAAMhD,IAAKR,KAAK2B,mBAAoB1B,UAAU,OAAOwD,EAAE,2QAMnE,yBAAKjD,IAAKR,KAAK4B,YAAa3B,UAAU,yBAChCD,KAAKL,MAAM+D,YAAc,0BAAMzD,UAAU,uBAAsB,uBAAGA,UAAU,gBAC9E,0BAAMO,IAAKR,KAAK6B,sBAAuB5B,UAAU,eAAoB,2BAAOO,IAAKR,KAAK8B,iBAAkB7B,UAAU,SAA7C,Y,GAhEnEI,IAAMC,Y,QCqFbqD,E,kDApFb,WAAYhE,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAEb,EAAKgE,KAAO,CACRC,OAAQ,GACRC,SAAU,CAAC,CACPF,KAAM,GACNG,YAAa,UACbC,YAAa,EACbzB,MAAM,EACN0B,YAAa,KAGrB,EAAKC,QAAU,CACXC,UAAW,CACPC,SAAU,KACVC,OAAQ,UAEZC,SAAU,CACNC,SAAS,GAEbC,OAAQ,CACJC,SAAS,GAEbC,OAAQ,CACJC,MAAO,CAAC,CACJC,UAAW,CACPC,MAAO,WAEXC,MAAO,CACHC,UAAW,QACXC,aAAa,KAGrBC,MAAO,CAAC,CACJL,UAAW,CACPC,MAAO,UACPK,cAAe,WAEnBJ,MAAO,CACHC,UAAW,YAIvBI,qBAAqB,GAEzB,EAAKC,eAAiB/E,IAAMoB,YA/CX,E,iEAkDG,IAAD,MAYZ,IAXH4D,EAAc,UAAGrF,KAAKL,MAAMiE,KAAKC,cAAnB,aAAG,EAAwByB,QAC1CD,GAAkB,KACjBrF,KAAKoF,eAAe/C,QAAQkD,cAAcrB,QAAQQ,OAAOC,MAAM,GAAGG,MAAMU,IAAMxF,KAAKL,MAAMiE,KAAKC,OAAOwB,EAAiB,GAAK,EAC3HrF,KAAKoF,eAAe/C,QAAQkD,cAAcrB,QAAQQ,OAAOC,MAAM,GAAGG,MAAMW,IAAMzF,KAAKL,MAAMiE,KAAKC,OAAOwB,EAAiB,GAAK,GAE/HrF,KAAKoF,eAAe/C,QAAQkD,cAAc3B,KAAKC,OAAS7D,KAAKL,MAAMiE,KAAKC,OACxE7D,KAAKoF,eAAe/C,QAAQkD,cAAc3B,KAAKE,SAAS,GAAGF,KAAO5D,KAAKL,MAAMiE,KAAK8B,QAEhC,KAA/C,UAAA1F,KAAKL,MAAMgG,qBAAX,eAA0BC,oBACzB5F,KAAKoF,eAAe/C,QAAQkD,cAAcrB,QAAQQ,OAAOO,MAAM,GAAGH,MAAMU,SAAMK,EAC9E7F,KAAKoF,eAAe/C,QAAQkD,cAAcrB,QAAQQ,OAAOO,MAAM,GAAGH,MAAMW,SAAMI,IAE9E7F,KAAKoF,eAAe/C,QAAQkD,cAAcrB,QAAQQ,OAAOO,MAAM,GAAGH,MAAMU,IAAxE,UAA8ExF,KAAKL,MAAMmG,iBAAzF,aAA8E,EAAsBb,MAAMO,IAC1GxF,KAAKoF,eAAe/C,QAAQkD,cAAcrB,QAAQQ,OAAOO,MAAM,GAAGH,MAAMW,IAAxE,UAA8EzF,KAAKL,MAAMmG,iBAAzF,aAA8E,EAAsBb,MAAMQ,MAG7D,KAA9C,UAAAzF,KAAKL,MAAMgG,qBAAX,eAA0BI,iBACzB/F,KAAKoF,eAAe/C,QAAQkD,cAAcS,OAAO,GAEjDhG,KAAKoF,eAAe/C,QAAQkD,cAAcS,W,+BAM9C,OACI,kBAAC,IAAMlG,SAAP,KACI,kBAAC,IAAD,CAAMU,IAAKR,KAAKoF,eAAgBxB,KAAM5D,KAAK4D,KAAMM,QAAO,2BAAMlE,KAAKkE,SAAYlE,KAAKL,MAAMuE,gB,GA/ElF7D,IAAMC,WCoBX2F,E,uKAhBX,OACI,kBAAC,IAAMnG,SAAP,KACI,yBAAKG,UAAU,sBAAsBqC,MAAO,CAAC4D,aAAc,MAAOC,YAAa,QAC3E,0BAAMlG,UAAW,wCAA+D,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,gBAAiBtB,KAAKL,MAAMyG,MAArI,MAGJ,yBAAKnG,UAAU,uCAAuCqC,MAAO,CAAC4D,aAAc,MAAOC,YAAa,SAC5F,0BAAMlG,UAAW,eAAsC,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,gBAAiBtB,KAAKL,MAAM0G,OAC5G,0BAAMpG,UAAW,eAAsC,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,gBAAiBtB,KAAKL,MAAM2G,a,GAdlGjG,IAAMC,WCiBjBiG,G,8KARX,OACI,kBAAC,IAAMzG,SAAP,KACI,yBAAKG,UAAW,mBAAqBD,KAAKL,MAAMkF,OAAS7E,KAAKL,MAAM6G,SAAW,GAAK,6B,GAT9EnG,IAAMC,YC2BTmG,E,uKApBX,OACI,kBAAC,IAAM3G,SAAP,KACI,yBAAKG,UAAU,MAAMqC,MAAO,CAACoE,aAAc,QACvC,yBAAKzG,UAAU,iDACX,kBAAC,EAAD,CAAK4E,MAAO7E,KAAKL,MAAMkF,MACnB2B,SAAUxG,KAAKL,MAAM6G,aAGjC,yBAAKvG,UAAU,MAAOqC,MAAO,CAACoE,aAAc,SACxC,yBAAKzG,UAAU,iDACX,0BAAMA,UAAW,eAAsC,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,gBAC3EtB,KAAKL,MAAMuB,a,GAlBNb,IAAMC,WCmCrBqG,E,uKA5BD,IAAD,OACL,OACI,kBAAC,IAAM7G,SAAP,KACI,yBAAKG,UAAU,OACX,yBAAKA,UAAU,yBACX,uBAAGA,UAAW,eAAsC,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,eACzEgB,MAAO,CAACoE,aAAc,MAAUE,UAAW,UAD/C,mBAMR,yBAAK3G,UAAU,OAEPD,KAAKL,MAAMkH,gBAAgBC,KAAI,SAACC,EAAMC,GAAP,OAC3B,yBAAK/G,UAAU,YACX,kBAAC,EAAD,CAAiBiB,KAAM6F,EACnBlC,MAAO,EAAKlF,MAAMsH,gBAAkB,EAAKtH,MAAMuH,eAAkB,EAAKvH,MAAMwH,eAAeH,GAAS,MAAQ,QAAW,WACvHR,SAAU,EAAK7G,MAAMwH,eAAeH,GACpC1F,MAAO,EAAK3B,MAAM2B,kB,GAzBjBjB,IAAMC,W,QC0C5B8G,E,kDAzCT,WAAYzH,GAAQ,IAAD,8BACjB,cAAMA,IAED0H,2BAA6BhH,IAAMoB,YAHvB,E,iEAOjBzB,KAAKqH,2BAA2BhF,QAAQiF,UAAYtH,KAAKqH,2BAA2BhF,QAAQkF,e,+BAI5F,OACI,kBAAC,IAAMzH,SAAP,KACQ,kBAAC,UAAD,CAAS8D,KAAM5D,KAAKL,MAAM6H,QAASC,SAAU,yBACzCnF,MAAO,CAACoF,OAAQ,OAAQ7C,MAAO,UAAW8C,eAAgB,SACtD,yBAAK1H,UAAU,OACX,yBAAKA,UAAU,yBACX,uBAAGA,UAAW,eAAsC,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,eACzEgB,MAAO,CAACoE,aAAc,OACtB3F,cAAY,UAAU6G,iBAAe,MAAMC,MAAM,iCAFrD,kBAGmB,uBAAGC,MAAM,qBAAqBC,cAAY,aAK7E,yBAAK9H,UAAU,OACX,yBAAKO,IAAKR,KAAKqH,2BAA4BpH,UAAU,MAAMqC,MAAO,CAAC0F,UAAW,QAASC,UAAW,QAASC,UAAW,SAE9GlI,KAAKL,MAAM6H,QAAQV,KAAI,SAACqB,EAAanB,GAAd,OACnB,yBAAKoB,IAAKpB,EAAO1E,MAAO,CAAC+F,SAAU,UAAWxD,MAA2B,IAAnBsD,EAAYG,GAAY,MAAQ,UACjFH,EAAYI,KADjB,MAC0BJ,EAAYpB,MAA4B,IAAnBoB,EAAYG,GAAY,aAAe,uB,GA/BpFjI,IAAMC,WCwK7BkI,E,kDAlKb,WAAY7I,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAYjB,IAKI6I,EALAC,EAAiB1I,KAAKL,MAAMiE,KAAK+E,QAAQrD,OAAS,EAAItF,KAAKL,MAAMiE,KAAK+E,QAAQ3I,KAAKL,MAAMiE,KAAK+E,QAAQrD,OAAS,GAAK,IACpHsD,EAAqB5I,KAAKL,MAAMiE,KAAKiF,YAAYvD,OAAS,EAAItF,KAAKL,MAAMiE,KAAKiF,YAAY7I,KAAKL,MAAMiE,KAAKiF,YAAYvD,OAAS,GAAGzC,QAAQ,GAAK,IAC/IiG,EAAqB9I,KAAKL,MAAMiE,KAAKmF,YAAYzD,OAAS,EAAItF,KAAKL,MAAMiE,KAAKmF,YAAY/I,KAAKL,MAAMiE,KAAKmF,YAAYzD,OAAS,GAAGzC,QAAQ,GAAK,IAC/ImG,EAAyBhJ,KAAKL,MAAMiE,KAAKqF,gBAAgB3D,OAAS,EAAItF,KAAKL,MAAMiE,KAAKqF,gBAAgBjJ,KAAKL,MAAMiE,KAAKqF,gBAAgB3D,OAAS,GAAGzC,QAAQ,GAAK,IAC/JqG,EAAoBlJ,KAAKL,MAAMiE,KAAKiF,YAAYvD,OAAStF,KAAKL,MAAMiE,KAAKmF,YAAYzD,QAAWsD,EAAqBE,GAAoBjG,QAAQ,GAAK,IAGtJ4F,EADDzI,KAAKL,MAAMsH,eACiC,IAAvB6B,EAA2B,OAAUA,EAAqB,EAAI,WAAa,cACzF9I,KAAKL,MAAMuH,eACG,UAEA,eAGxB,IAAIxC,EAAS,CACTC,MAAO,CAAC,CACJC,UAAW,CACPC,MAAO,WAEXC,MAAO,CACHE,aAAa,EACbD,UAAgC,UAArB/E,KAAKL,MAAM2B,MAAoB,QAAU,WAG5D2D,MAAO,CAAC,CACJH,MAAO,CACHC,UAAgC,UAArB/E,KAAKL,MAAM2B,MAAoB,QAAU,SAExDsD,UAAW,CACPC,MAAO,UACPK,cAAe,cAK3B,OACI,kBAAC,IAAMpF,SAAP,KACI,yBAAKG,UAAU,OAEX,kBAAC,EAAD,CAAkBmB,MAAM,WAAWC,QAASrB,KAAKL,MAAMwJ,kBAAmB7H,MAAOtB,KAAKL,MAAM2B,OACxF,yBAAKrB,UAAU,OACX,yBAAKA,UAAU,yBACX,uBAAGA,UAAW,eAAsC,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,eACzEgB,MAAO,CAACoE,aAAc,QAD1B,aAIR,yBAAKzG,UAAU,MAAMqC,MAAO,CAACsE,UAAW,OAAQF,aAAc,SAC1D,yBAAKzG,UAAU,YACX,kBAAC,EAAD,CAASF,GAAG,mBAAmBiD,cAAe,CAACN,IAAK,QAAS0G,KAAM,QAASnG,UAAW,CAAC7B,MAAO,OAAQkC,OAAQ,SAC3GI,WAAYoF,EAAqB,EACjChG,IAAK4F,KAEb,yBAAKzI,UAAU,wBACX,yBAAKA,UAAU,YACX,kBAACoJ,EAAD,CAAgBjD,MAAM,kBAClBC,MAA0B,MAAnBqC,EAAyB,GAAsB,IAAjBA,GAAsB7F,QAAQ,IAAM,EACzEyD,MAAOtG,KAAKL,MAAM2G,MAAMgD,eACxBhI,MAAOtB,KAAKL,MAAM2B,SAG1B,yBAAKrB,UAAU,YACX,kBAACoJ,EAAD,CAAgBjD,MAAM,UAClBC,MAAOuC,EACPtC,MAAOtG,KAAKL,MAAM2G,MAAMiD,mBACxBjI,MAAOtB,KAAKL,MAAM2B,SAG1B,yBAAKrB,UAAU,YACX,kBAACoJ,EAAD,CAAgBjD,MAAM,UAClBC,MAAOyC,EACPxC,MAAOtG,KAAKL,MAAM2G,MAAMkD,mBACxBlI,MAAOtB,KAAKL,MAAM2B,SAG1B,yBAAKrB,UAAU,YACX,kBAACoJ,EAAD,CAAgBjD,MAAM,cAClBC,MAAO2C,EACP1C,MAAOtG,KAAKL,MAAM2G,MAAMmD,gBACxBnI,MAAOtB,KAAKL,MAAM2B,SAG1B,yBAAKrB,UAAU,YACX,kBAACoJ,EAAD,CAAgBjD,MAAM,QAClBC,MAAO6C,EACP5C,MAAOtG,KAAKL,MAAM2G,MAAMoD,iBACxBpI,MAAOtB,KAAKL,MAAM2B,SAG1B,yBAAKrB,UAAU,YACX,kBAACoJ,EAAD,CAAgBjD,MAAM,SAClBC,MAAOoC,EACPnC,MAAO,GACPhF,MAAOtB,KAAKL,MAAM2B,YAOtC,kBAAC,EAAD,CAAkBF,MAAM,WAAWE,MAAOtB,KAAKL,MAAM2B,OACjD,yBAAKrB,UAAU,OACX,yBAAKA,UAAU,WAAWqC,MAAO,CAAC0F,UAAW,UACzC,kBAAC,EAAD,CAAOpE,KAAM,CAACC,OAAQ7D,KAAKL,MAAMiE,KAAKC,OAAQ6B,OAAQ1F,KAAKL,MAAMiE,KAAKiF,aAClE3E,QAAS,CACL2D,MAAO,CAACpD,SAAS,EAAMvD,KAAM,2BAAsBlB,KAAKL,MAAM2G,MAAMiD,mBAAvC,KAA8DxE,UAAgC,UAArB/E,KAAKL,MAAM2B,MAAoB,QAAU,QAASqI,SAAU,GAAIC,QAAS,GAC/KlF,OAAQA,GAEZoB,UAAW,CACPb,MAAO,CACHO,IAAKxF,KAAKL,MAAM2G,MAAMuD,KAAKC,QAAQ9J,KAAKL,MAAM2G,MAAMiD,oBAAoB/D,IAAMxF,KAAKL,MAAMoK,YACzFtE,IAAKzF,KAAKL,MAAM2G,MAAMuD,KAAKC,QAAQ9J,KAAKL,MAAM2G,MAAMiD,oBAAoB9D,IAAMzF,KAAKL,MAAMoK,cAGjGpE,cAAe3F,KAAKL,MAAMgG,iBAElC,yBAAK1F,UAAU,WAAWqC,MAAO,CAAC0F,UAAW,UACzC,kBAAC,EAAD,CAAOpE,KAAM,CAACC,OAAQ7D,KAAKL,MAAMiE,KAAKC,OAAQ6B,OAAQ1F,KAAKL,MAAMiE,KAAKmF,aAClE7E,QAAS,CACL2D,MAAO,CAACpD,SAAS,EAAMvD,KAAM,2BAAsBlB,KAAKL,MAAM2G,MAAMkD,mBAAvC,KAA8DzE,UAAgC,UAArB/E,KAAKL,MAAM2B,MAAoB,QAAU,QAASqI,SAAU,GAAIC,QAAS,GAC/KlF,OAAQA,GAEZoB,UAAW,CACPb,MAAO,CACHO,IAAKxF,KAAKL,MAAM2G,MAAMuD,KAAKxH,QAAQrC,KAAKL,MAAM2G,MAAMkD,oBAAoBhE,IAAMxF,KAAKL,MAAMoK,YACzFtE,IAAKzF,KAAKL,MAAM2G,MAAMuD,KAAKxH,QAAQrC,KAAKL,MAAM2G,MAAMkD,oBAAoB/D,IAAMzF,KAAKL,MAAMoK,cAGjGpE,cAAe3F,KAAKL,MAAMgG,oBAM9C,yBAAK1F,UAAU,OACX,kBAAC,EAAD,CAAkBmB,MAAM,WAAWE,MAAOtB,KAAKL,MAAM2B,OACjD,kBAAC,EAAD,CAAwBuF,gBAAiB7G,KAAKL,MAAMkH,gBAChDM,eAAgBnH,KAAKL,MAAMwH,eAC3BF,eAAgBjH,KAAKL,MAAMsH,eAC3BC,eAAgBlH,KAAKL,MAAMuH,eAC3B5F,MAAOtB,KAAKL,MAAM2B,SAE1B,kBAAC,EAAD,CAAkBF,MAAM,WAAWE,MAAOtB,KAAKL,MAAM2B,OACjD,kBAAC,EAAD,CAAyBkG,QAASxH,KAAKL,MAAMqK,kBAAmB1I,MAAOtB,KAAKL,MAAM2B,e,GA3J1EjB,IAAMC,WCanB2J,E,uKAbX,OACI,kBAAC,IAAMnK,SAAP,KACI,yBAAKG,UAAWD,KAAKL,MAAMyB,MAAQ,YAC/B,yBAAKnB,UAAW,mBAA0C,UAArBD,KAAKL,MAAM2B,MAAoB,oBAAsB,IACtFgB,MAAO,CAAC6D,YAAa,MAAOD,aAAc,OAAQgE,cAAe,MAAOC,WAAY,SAC/EnK,KAAKL,MAAMS,gB,GAZEC,IAAMC,W,iBCiT7B8J,E,kDA3Sb,WAAYzK,GAAQ,IAAD,8BACjB,cAAMA,IAED0K,oBAAsBhK,IAAMoB,YACjC,EAAK6I,cAAgBjK,IAAMoB,YAC3B,EAAK8I,aAAelK,IAAMoB,YAC1B,EAAK+I,WAAanK,IAAMoB,YACxB,EAAKgJ,eAAiBpK,IAAMoB,YAE5B,EAAKiJ,sBAAwBrK,IAAMoB,YACnC,EAAKkJ,sBAAwBtK,IAAMoB,YACnC,EAAKmJ,0BAA4BvK,IAAMoB,YACvC,EAAKoJ,wBAA0BxK,IAAMoB,YAErC,EAAK7B,MAAQ,CACTkL,SAAS,EACTC,eAAgB,UAChBzE,MAAO,EAAK3G,MAAM2G,MAAMiD,oBAE5B,EAAKnE,eAAiB/E,IAAMoB,YAE5B,EAAKuJ,gBAAkB,EAAKA,gBAAgBhJ,KAArB,gBACvB,EAAKiJ,iBAAmB,EAAKA,iBAAiBjJ,KAAtB,gBACxB,EAAKkJ,oBAAsB,EAAKA,oBAAoBlJ,KAAzB,gBAC3B,EAAKmJ,iBAAmB,EAAKA,iBAAiBnJ,KAAtB,gBAxBP,E,gEA2BE,IAAD,OAClBoJ,SAASC,KAAKC,iBAAiB,SAAS,WACjC,EAAKjB,oBAAoBhI,UACxB,EAAKgI,oBAAoBhI,QAAQkJ,UAAUC,OAAO,QAClD,EAAKnB,oBAAoBhI,QAAQC,MAAMmC,QAAU,WAGzD2G,SAASC,KAAKC,iBAAiB,eAAe,WACvC,EAAKjB,oBAAoBhI,UACxB,EAAKgI,oBAAoBhI,QAAQkJ,UAAUC,OAAO,QAClD,EAAKnB,oBAAoBhI,QAAQC,MAAMmC,QAAU,a,sCAK3CgH,GACd,IAAI/I,EAAM+I,EAAEC,QACRtC,EAAOqC,EAAEE,QACb3L,KAAKqK,oBAAoBhI,QAAQC,MAAMI,IAAMA,EAAM,KACnD1C,KAAKqK,oBAAoBhI,QAAQC,MAAM8G,KAAOA,EAAO,KACrDpJ,KAAKqK,oBAAoBhI,QAAQC,MAAMmC,QAAU,QACjDzE,KAAKqK,oBAAoBhI,QAAQkJ,UAAUK,IAAI,QAC/CH,EAAEI,mB,uCAGaJ,GAKf,OAJAzL,KAAKsK,cAAcjI,QAAQkJ,UAAUC,OAAO,UAC5CxL,KAAKuK,aAAalI,QAAQkJ,UAAUC,OAAO,UAC3CxL,KAAKwK,WAAWnI,QAAQkJ,UAAUC,OAAO,UACzCC,EAAEK,OAAOP,UAAUK,IAAI,UAChBH,EAAEK,OAAOlJ,WACZ,IAAK,UACD5C,KAAK0K,sBAAsBrI,QAAQC,MAAMmC,QAAU,QACnDzE,KAAK2K,sBAAsBtI,QAAQC,MAAMmC,QAAU,OACnDzE,KAAK4K,0BAA0BvI,QAAQC,MAAMmC,QAAU,OACvDzE,KAAK6K,wBAAwBxI,QAAQC,MAAMmC,QAAU,OACrDzE,KAAK+L,UAAS,iBAAO,CAAChB,eAAgB,cACtC,MACJ,IAAK,UACD/K,KAAK0K,sBAAsBrI,QAAQC,MAAMmC,QAAU,OACnDzE,KAAK2K,sBAAsBtI,QAAQC,MAAMmC,QAAU,QACnDzE,KAAK4K,0BAA0BvI,QAAQC,MAAMmC,QAAU,OACvDzE,KAAK6K,wBAAwBxI,QAAQC,MAAMmC,QAAU,OACrDzE,KAAK+L,UAAS,iBAAO,CAAChB,eAAgB,cACtC,MACJ,IAAK,cACD/K,KAAK0K,sBAAsBrI,QAAQC,MAAMmC,QAAU,OACnDzE,KAAK2K,sBAAsBtI,QAAQC,MAAMmC,QAAU,OACnDzE,KAAK4K,0BAA0BvI,QAAQC,MAAMmC,QAAU,QACvDzE,KAAK6K,wBAAwBxI,QAAQC,MAAMmC,QAAU,OACrDzE,KAAK+L,UAAS,iBAAO,CAAChB,eAAgB,kBACtC,MACJ,IAAK,YACD/K,KAAK0K,sBAAsBrI,QAAQC,MAAMmC,QAAU,OACnDzE,KAAK2K,sBAAsBtI,QAAQC,MAAMmC,QAAU,OACnDzE,KAAK4K,0BAA0BvI,QAAQC,MAAMmC,QAAU,OACvDzE,KAAK6K,wBAAwBxI,QAAQC,MAAMmC,QAAU,QACrDzE,KAAK+L,UAAS,iBAAO,CAAChB,eAAgB,mB,4CAK1BiB,EAAWC,GAC/B,OAAGjM,KAAKL,MAAM2B,QAAU0K,EAAU1K,OAAStB,KAAKL,MAAMoK,aAAe,GAG1D/J,KAAKJ,MAAMkL,U,4CAUtB,OAAO9K,KAAKJ,MAAMmL,gBACd,IAAK,UACD/K,KAAKJ,MAAM0G,MAAStG,KAAKL,MAAM2G,MAAMiD,mBACrC,MACJ,IAAK,UACDvJ,KAAKJ,MAAM0G,MAAQtG,KAAKL,MAAM2G,MAAMkD,mBACpC,MACJ,IAAK,cACDxJ,KAAKJ,MAAM0G,MAAQtG,KAAKL,MAAM2G,MAAMmD,gBACpC,MACJ,QACIzJ,KAAKJ,MAAM0G,MAAQ,M,uCAIZ4F,GACblM,KAAK+L,UAAS,iBAAO,CAACjB,QAASoB,Q,+BAGzB,IAAD,oCACHhI,EAAU,CACVQ,OAAQ,CACJC,MAAO,CAAC,CACJC,UAAW,CACPC,MAAO,WAEXC,MAAO,CACHE,aAAa,EACbD,UAAgC,UAArB/E,KAAKL,MAAM2B,MAAoB,QAAU,WAG5D2D,MAAO,CAAC,CACJH,MAAO,CACHC,UAAgC,UAArB/E,KAAKL,MAAM2B,MAAoB,QAAU,SAExDsD,UAAW,CACPC,MAAO,UACPK,cAAe,eAM/B,OADAlF,KAAKkL,sBAED,kBAAC,IAAD,CAAkBiB,SAAUnM,KAAKmL,kBACjC,kBAAC,IAAMrL,SAAP,KAEI,yBAAKsM,cAAepM,KAAKgL,gBAAiB/K,UAAU,MAAMc,cAAY,QAAQsL,cAAa,eAAiBrM,KAAKL,MAAMI,IACnH,yBAAKE,UAAU,yBACX,uBAAGA,UAAW,eAAsC,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,gBAA7E,QACUtB,KAAKL,MAAMI,GAAK,EAD1B,IAC6B,0BAAMS,IAAKR,KAAKyK,gBAAiBzK,KAAKJ,MAAMmL,eAA5C,IAA6D/K,KAAKJ,MAAM0G,OAAS,KAC1G,8BAAOtG,KAAKJ,MAAM0G,MAAOtG,KAAKJ,MAAM0G,OAAS,QAKzD,yBAAK8F,cAAepM,KAAKgL,gBAAiB/K,UAAU,MAAMc,cAAY,QAAQsL,cAAa,eAAiBrM,KAAKL,MAAMI,IACnH,yBAAKE,UAAU,YACX,kBAAC,EAAD,CAAS+C,cAAe,CAACN,IAAK,QAAS0G,KAAM,QACzC1F,YAAY,UAAA1D,KAAKL,MAAM2M,gBAAX,eAAqBjK,SAAQ,UAAArC,KAAKL,MAAM2M,gBAAX,eAAqBjK,QAAQiD,QAAS,IAAK,EACpFxC,IAAG,UAAE9C,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBxJ,KAAI,UAAA9C,KAAKL,MAAM2M,gBAAX,eAAqBxJ,IAAIwC,QAAS,MAExE,yBAAKrF,UAAU,wBACX,yBAAKO,IAAKR,KAAK0K,sBAAuBpI,MAAO,CAAC0F,UAAW,UACrD,kBAAC,EAAD,CAAOpE,KAAM,CAACC,OAAM,UAAE7D,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBzI,OAAQ6B,OAAM,UAAE1F,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBxC,SAC5E5F,QAASA,EACT4B,UAAW,CACPb,MAAO,CACHO,IAAKxF,KAAKL,MAAM2G,MAAMuD,KAAKC,QAAQ9J,KAAKL,MAAM2G,MAAMiD,oBAAoB/D,IACxEC,IAAKzF,KAAKL,MAAM2G,MAAMuD,KAAKC,QAAQ9J,KAAKL,MAAM2G,MAAMiD,oBAAoB9D,MAGhFE,cAAe3F,KAAKL,MAAMgG,iBAElC,yBAAKnF,IAAKR,KAAK2K,sBAAuBrI,MAAO,CAACmC,QAAS,OAAQuD,UAAW,UACtE,kBAAC,EAAD,CAAOpE,KAAM,CAACC,OAAM,UAAE7D,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBzI,OAAQ6B,OAAM,UAAE1F,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBjK,SAC5E6B,QAASA,EACT4B,UAAW,CACPb,MAAO,CACHO,IAAKxF,KAAKL,MAAM2G,MAAMuD,KAAKxH,QAAQrC,KAAKL,MAAM2G,MAAMkD,oBAAoBhE,IACxEC,IAAKzF,KAAKL,MAAM2G,MAAMuD,KAAKxH,QAAQrC,KAAKL,MAAM2G,MAAMkD,oBAAoB/D,MAGhFE,cAAe3F,KAAKL,MAAMgG,iBAElC,yBAAKnF,IAAKR,KAAK6K,wBAAyBvI,MAAO,CAACmC,QAAS,OAAQuD,UAAW,UACxE,kBAAC,EAAD,CAAOpE,KAAM,CAACC,OAAM,UAAE7D,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBzI,OAAQ6B,OAAM,UAAE1F,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBC,WAC5ErI,QAASA,EACT4B,UAAW,CACPb,MAAO,CACHO,IAAKxF,KAAKL,MAAM2G,MAAMuD,KAAK0C,UAAU/G,IACrCC,IAAKzF,KAAKL,MAAM2G,MAAMuD,KAAK0C,UAAU9G,MAG7CE,cAAe3F,KAAKL,MAAMgG,iBAElC,yBAAKnF,IAAKR,KAAK4K,0BAA2BtI,MAAO,CAACmC,QAAS,OAAQuD,UAAW,UAC1E,kBAAC,EAAD,CAAOpE,KAAM,CAACC,OAAM,UAAE7D,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBzI,OAAQ6B,OAAM,UAAE1F,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBE,MAC5EtI,QAASA,EACT4B,UAAW,CACPb,MAAO,CACHO,IAAKxF,KAAKL,MAAM2G,MAAMuD,KAAK2C,KAAKxM,KAAKL,MAAM2G,MAAMmD,iBAAiBjE,IAClEC,IAAKzF,KAAKL,MAAM2G,MAAMuD,KAAK2C,KAAKxM,KAAKL,MAAM2G,MAAMmD,iBAAiBhE,MAG1EE,cAAe3F,KAAKL,MAAMgG,mBAK1C,yBAAKnF,IAAKR,KAAKqK,oBAAqBpK,UAAU,sDAC1C,uBAAGA,UAAU,uBAAuBO,IAAKR,KAAKsK,cAAejJ,QAASrB,KAAKiL,kBAA3E,WACA,uBAAGhL,UAAU,gBAAgBO,IAAKR,KAAKuK,aAAclJ,QAASrB,KAAKiL,kBAAnE,aACA,uBAAGhL,UAAU,gBAAgBO,IAAKR,KAAKwK,WAAYnJ,QAASrB,KAAKiL,kBAAjE,gBAIJ,yBAAKhL,UAAU,aAAaF,GAAI,cAAgBC,KAAKL,MAAMI,GAAI0M,SAAS,KAAK3L,KAAK,SAAS4L,kBAAiB,mBAAqB1M,KAAKL,MAAMI,GAAIgI,cAAY,QACxJ,yBAAK9H,UAAU,eAAea,KAAK,WAAWwB,MAAO,CAACqK,SAAU,WAC5D,yBAAK1M,UAAW,iBAAwC,UAArBD,KAAKL,MAAM2B,MAAoB,oBAAsB,KACxF,yBAAKrB,UAAU,gBACX,wBAAIA,UAAW,eAAsC,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,eAAgBvB,GAAI,mBAAqBC,KAAKL,MAAMI,IAAlI,QAA4IC,KAAKL,MAAMI,GAAK,EAA5J,YACA,4BAAQ6M,KAAK,SAAS3M,UAAU,QAAQ4M,eAAa,QAAQC,aAAW,WAI5E,yBAAK7M,UAAU,cACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,WAAWqC,MAAO,CAAC0F,UAAW,UACzC,kBAAC,EAAD,CAAOpE,KAAM,CAACC,OAAM,UAAE7D,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBzI,OAAQ6B,OAAM,UAAE1F,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBxC,SAC5E5F,QAAO,2BAAMA,GAAN,IACH2D,MAAO,CAACpD,SAAS,EAAMvD,KAAM,2BAAsBlB,KAAKL,MAAM2G,MAAMiD,mBAAvC,KAA8DxE,UAAgC,UAArB/E,KAAKL,MAAM2B,MAAoB,QAAU,QAASqI,SAAU,QAEtK7D,UAAW,CACPb,MAAO,CACHO,IAAKxF,KAAKL,MAAM2G,MAAMuD,KAAKC,QAAQ9J,KAAKL,MAAM2G,MAAMiD,oBAAoB/D,IACxEC,IAAKzF,KAAKL,MAAM2G,MAAMuD,KAAKC,QAAQ9J,KAAKL,MAAM2G,MAAMiD,oBAAoB9D,MAGhFE,cAAe3F,KAAKL,MAAMgG,iBAElC,yBAAK1F,UAAU,WAAWqC,MAAO,CAAC0F,UAAW,UACzC,kBAAC,EAAD,CAAOpE,KAAM,CAACC,OAAM,UAAE7D,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBzI,OAAQ6B,OAAM,UAAE1F,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBC,WAC5ErI,QAAO,2BAAMA,GAAN,IACH2D,MAAO,CAACpD,SAAS,EAAMvD,KAAM,kBAAmB6D,UAAgC,UAArB/E,KAAKL,MAAM2B,MAAoB,QAAU,QAASqI,SAAU,QAE3H7D,UAAW,CACPb,MAAO,CACHO,IAAKxF,KAAKL,MAAM2G,MAAMuD,KAAK0C,UAAU/G,IACrCC,IAAKzF,KAAKL,MAAM2G,MAAMuD,KAAK0C,UAAU9G,MAG7CE,cAAe3F,KAAKL,MAAMgG,iBAelC,yBAAK1F,UAAU,WAAWqC,MAAO,CAAC0F,UAAW,UACzC,kBAAC,EAAD,CAAOpE,KAAM,CAACC,OAAM,UAAE7D,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBzI,OAAQ6B,OAAM,UAAE1F,KAAKL,MAAM2M,gBAAb,aAAE,EAAqBE,MAC5EtI,QAAO,2BAAMA,GAAN,IACH2D,MAAO,CAACpD,SAAS,EAAMvD,KAAM,+BAA0BlB,KAAKL,MAAM2G,MAAMmD,gBAA3C,KAA+D1E,UAAgC,UAArB/E,KAAKL,MAAM2B,MAAoB,QAAU,QAASqI,SAAU,QAEvK7D,UAAW,CACPb,MAAO,CACHO,IAAKxF,KAAKL,MAAM2G,MAAMuD,KAAK2C,KAAKxM,KAAKL,MAAM2G,MAAMmD,iBAAiBjE,IAClEC,IAAKzF,KAAKL,MAAM2G,MAAMuD,KAAK2C,KAAKxM,KAAKL,MAAM2G,MAAMmD,iBAAiBhE,MAG1EE,cAAe3F,KAAKL,MAAMgG,4B,GA1R/BtF,IAAMC,WC8BtB2F,E,uKA3BH,IAAD,OAEP,OACI,kBAAC,IAAMnG,SAAP,KACI,yBAAKG,UAAU,OAEP,YAAI8M,MAAM/M,KAAKL,MAAMoK,aAAaiD,QAAQlG,KAAI,SAACmG,GAC3C,OACI,kBAAC,EAAD,CAAyB7E,IAAK6E,EAAS7L,MAAM,WAAWE,MAAO,EAAK3B,MAAM2B,OACtE,kBAAC,EAAD,CAAkBvB,GAAIkN,EAClBlD,YAAa,EAAKpK,MAAMoK,YACxBuC,SAAU,EAAK3M,MAAMuN,UAAUD,GAC/B3G,MAAO,EAAK3G,MAAM2G,MAClBhF,MAAO,EAAK3B,MAAM2B,MAClB2F,eAAgB,EAAKtH,MAAMsH,eAC3BC,eAAgB,EAAKvH,MAAMuH,eAC3BvB,cAAe,EAAKhG,MAAMgG,0B,GArBpCtF,IAAMC,WCoBjB6M,E,uKAjBX,OACI,kBAAC,IAAMrN,SAAP,KACI,4BACI,wBAAIsN,MAAM,OAAV,QAAsBpN,KAAKL,MAAMI,GAAK,GAG9BC,KAAKL,MAAM+F,QAAU1F,KAAKL,MAAM+F,OAAOJ,OAAS,EAC5C,4BAAKtF,KAAKL,MAAM+F,OAAO1F,KAAKL,MAAM+F,OAAOJ,OAAS,GAAGzC,QAAQ7C,KAAKL,MAAM0N,WAAa,EAAI,IAAW,IAG1GrN,KAAKL,MAAM2G,OAAS,4BAAKtG,KAAKL,MAAM2G,a,GAhBvBjG,IAAMC,WCmC1BgN,E,uKA5BH,IAAD,OACP,OACI,kBAAC,IAAMxN,SAAP,KACI,2BAAOG,UAAW,4CAAmE,UAArBD,KAAKL,MAAM2B,MAAoB,GAAK,gBAChG,+BACI,4BACI,wBAAI8L,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACEpN,KAAKL,MAAM2G,OAAS,wBAAI8G,MAAM,OAAV,WAG9B,+BAEQ,YAAIL,MAAM/M,KAAKL,MAAMoK,aAAaiD,QAAQlG,KAAI,SAACmG,GAAD,OAC1C,kBAAC,EAAD,CAAsBlN,GAAIkN,EAAS7E,IAAK6E,EACpClG,KAAM,EAAKpH,MAAMoH,KACjBsG,WAAY,EAAK1N,MAAM0N,WACvB3H,OAAQ,EAAK/F,MAAMuN,UAAUD,GAC7B3G,MAAO,EAAK3G,MAAM2G,kB,GAvBvBjG,IAAMC,WC2FlBiN,E,kDAvFb,WAAY5N,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACTkL,SAAS,GAGb,EAAKK,iBAAmB,EAAKA,iBAAiBnJ,KAAtB,gBANP,E,kEASGgK,EAAWC,GAC/B,OAAGjM,KAAKL,MAAM2B,QAAU0K,EAAU1K,OAGvBtB,KAAKJ,MAAMkL,U,uCAIPoB,GACflM,KAAK+L,UAAS,iBAAO,CAACjB,QAASoB,Q,+BAI/B,OACI,kBAAC,IAAD,CAAkBC,SAAUnM,KAAKmL,iBAAkBqC,mBAAmB,GACtE,kBAAC,IAAM1N,SAAP,KACI,yBAAKG,UAAU,OACX,kBAAC,EAAD,CAAkBmB,MAAM,WAAWE,MAAOtB,KAAKL,MAAM2B,OACjD,yBAAKrB,UAAU,OACX,0BAAMA,UAAU,gCAAgCqC,MAAO,CAACqH,SAAU,SAC9D,uBAAG1J,UAAU,oBADjB,YAKJ,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAc8J,YAAa/J,KAAKL,MAAMoK,YAAamD,UAAWlN,KAAKL,MAAMuN,UAAUpG,KAAI,SAAAmG,GAAO,OAAIA,EAAQnD,WACtG/C,KAAK,UAAUT,MAAOtG,KAAKL,MAAM2G,MAAMiD,mBAAoBjI,MAAOtB,KAAKL,MAAM2B,UAIzF,kBAAC,EAAD,CAAkBF,MAAM,WAAWE,MAAOtB,KAAKL,MAAM2B,OACjD,yBAAKrB,UAAU,OACX,0BAAMA,UAAU,gCAAgCqC,MAAO,CAACqH,SAAU,SAC9D,uBAAG1J,UAAU,gCADjB,gBAKJ,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAc8J,YAAa/J,KAAKL,MAAMoK,YAAamD,UAAWlN,KAAKL,MAAMuN,UAAUpG,KAAI,SAAAmG,GAAO,OAAIA,EAAQT,QACtGzF,KAAK,cAAcT,MAAOtG,KAAKL,MAAM2G,MAAMmD,gBAAiBnI,MAAOtB,KAAKL,MAAM2B,UAI1F,kBAAC,EAAD,CAAkBF,MAAM,WAAWE,MAAOtB,KAAKL,MAAM2B,OACjD,yBAAKrB,UAAU,OACX,0BAAMA,UAAU,gCAAgCqC,MAAO,CAACqH,SAAU,SAC9D,uBAAG1J,UAAU,6BADjB,cAKJ,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAc8J,YAAa/J,KAAKL,MAAMoK,YAAamD,UAAWlN,KAAKL,MAAMuN,UAAUpG,KAAI,SAAAmG,GAAO,OAAIA,EAAQV,aACtGxF,KAAK,YAAYsG,YAAY,EAAM/G,MAAO,GAAIhF,MAAOtB,KAAKL,MAAM2B,iB,GA9DtEjB,IAAMC,WCsIbmN,E,kDAxIb,WAAY9N,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACT8N,kBAAmB,QAGvB,EAAKC,mBAAqBtN,IAAMoB,YAChC,EAAKmM,gBAAkBvN,IAAMoB,YAC7B,EAAKoM,aAAexN,IAAMoB,YAE1B,EAAKqM,cAAgB,EAAKA,cAAc9L,KAAnB,gBACrB,EAAK+L,qBAAuB,EAAKA,qBAAqB/L,KAA1B,gBAXX,E,gEAejBhC,KAAK2N,mBAAmBtL,QAAQ2L,aAAehO,KAAKL,MAAMsO,eAAeC,cACzElO,KAAK4N,gBAAgBvL,QAAQ2L,aAAehO,KAAKL,MAAMsO,eAAeE,WAEtEnO,KAAK6N,aAAaxL,QAAQ2L,aAAehO,KAAKL,MAAMyO,U,2CAId,YAAjCpO,KAAKJ,MAAM8N,oBACZ1N,KAAK2N,mBAAmBtL,QAAQ2L,aAAe,kBAC/ChO,KAAK4N,gBAAgBvL,QAAQ2L,aAAe,mCAC5ChO,KAAK6N,aAAaxL,QAAQ2L,aAAe,oCAEP,SAAjChO,KAAKJ,MAAM8N,oBACZ1N,KAAK2N,mBAAmBtL,QAAQ2L,aAAe,iBAC/ChO,KAAK4N,gBAAgBvL,QAAQ2L,aAAe,iCAC5ChO,KAAK6N,aAAaxL,QAAQ2L,aAAe,sB,sCAK7ChO,KAAKL,MAAM0O,qBAAqB,CAC5BH,cAAelO,KAAK2N,mBAAmBtL,QAAQgE,MAC/C8H,WAAYnO,KAAK4N,gBAAgBvL,QAAQgE,U,6CAK3CrG,KAAKL,MAAM2O,cAActO,KAAK6N,aAAaxL,QAAQgE,S,+BAG7C,IAAD,OACP,OACI,kBAAC,IAAMvG,SAAP,KAEI,8BACI,qDACA,yBAAKG,UAAU,iBACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,qBACX,2BAAOA,UAAU,mBAAmB2M,KAAK,QAAQ7F,KAAK,oBAAoBhH,GAAG,eAAesG,MAAM,UAC9FhF,QAAS,WACL,EAAK0K,SAAS,CAAC2B,kBAAmB,YAClC,EAAK/N,MAAM4O,4BAA4B,cAE/C,2BAAOtO,UAAU,mBAAmBuO,QAAQ,gBAA5C,YAKJ,yBAAKvO,UAAU,qBACX,2BAAOA,UAAU,mBAAmB2M,KAAK,QAAQ7F,KAAK,oBAAoBhH,GAAG,YAAYsG,MAAM,OAAOoI,gBAAc,EAChHpN,QAAS,WACL,EAAK0K,SAAS,CAAC2B,kBAAmB,SAClC,EAAK/N,MAAM4O,4BAA4B,QACvC,EAAK5O,MAAM0O,qBAAqB,CAC5BH,cAAe,iBACfC,WAAY,mCAEhB,EAAKxO,MAAM2O,cAAc,uBAEjC,2BAAOrO,UAAU,mBAAmBuO,QAAQ,aAA5C,WAMZ,wDACA,yBAAKvO,UAAU,YACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,mBAAmBF,GAAG,gBAClC,uBAAGE,UAAU,mBAGrB,2BAAOO,IAAKR,KAAK2N,mBAAoBf,KAAK,OACtClM,SAA2C,YAAjCV,KAAKJ,MAAM8N,kBACrBvB,SAAUnM,KAAK8N,cACf7N,UAAU,eACVyO,YAAY,4CACZ5B,aAAW,SAAS6B,mBAAiB,mBAGjD,oDACA,yBAAK1O,UAAU,YACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,mBAAmBF,GAAG,oBAClC,uBAAGE,UAAU,iBAGrB,2BAAOO,IAAKR,KAAK4N,gBAAiBhB,KAAK,OACnClM,SAA2C,YAAjCV,KAAKJ,MAAM8N,kBACrBvB,SAAUnM,KAAK8N,cACf7N,UAAU,eACVyO,YAAY,uDACZ5B,aAAW,mBAAmB6B,mBAAiB,uBAG3D,2CACA,yBAAK1O,UAAU,YACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,mBAAmBF,GAAG,iBAClC,uBAAGE,UAAU,iBAGrB,2BAAOO,IAAKR,KAAK6N,aAAcjB,KAAK,OAChClM,SAA2C,YAAjCV,KAAKJ,MAAM8N,kBACrBvB,SAAUnM,KAAK+N,qBACf9N,UAAU,eACVyO,YAAY,mBACZ5B,aAAW,UAAU6B,mBAAiB,0B,GA/H3BtO,IAAMC,WCuD9BsO,E,uKAhDH,IAAD,OACP,OACI,kBAAC,IAAM9O,SAAP,KAEI,8BACI,sDACA,yBAAKG,UAAU,YACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,qBACX,2BAAOA,UAAU,mBAAmB2M,KAAK,WAAW7F,KAAK,iBAAiBhH,GAAG,kBAAkBsG,MAAM,UAAUoI,gBAAc,EACzHpN,QAAS,kBAAM,EAAK1B,MAAMkP,6BAA6B,cAC3D,2BAAO5O,UAAU,mBAAmBuO,QAAQ,mBAA5C,YAKJ,yBAAKvO,UAAU,qBACX,2BAAOA,UAAU,mBAAmB2M,KAAK,WAAW7F,KAAK,iBAAiBhH,GAAG,kBAAkBsG,MAAM,UAAUoI,gBAAc,EACzHpN,QAAS,kBAAM,EAAK1B,MAAMkP,6BAA6B,cAC3D,2BAAO5O,UAAU,mBAAmBuO,QAAQ,mBAA5C,YAKJ,yBAAKvO,UAAU,qBACX,2BAAOA,UAAU,mBAAmB2M,KAAK,WAAW7F,KAAK,iBAAiBhH,GAAG,sBAAsBsG,MAAM,cAAcoI,gBAAc,EACjIpN,QAAS,kBAAM,EAAK1B,MAAMkP,6BAA6B,kBAC3D,2BAAO5O,UAAU,mBAAmBuO,QAAQ,uBAA5C,gBAKJ,yBAAKvO,UAAU,qBACX,2BAAOA,UAAU,mBAAmB2M,KAAK,WAAW7F,KAAK,iBAAiBhH,GAAG,cAAcsG,MAAM,MAAMoI,gBAAc,EACjHpN,QAAS,kBAAM,EAAK1B,MAAMkP,6BAA6B,UAC3D,2BAAO5O,UAAU,mBAAmBuO,QAAQ,eAA5C,gB,GA1CanO,IAAMC,WCgChCwO,E,kDAhCb,WAAYnP,GAAQ,uCACZA,G,qDAGE,IAAD,OACP,OACI,kBAAC,IAAMG,SAAP,KAEI,yBAAKG,UAAU,YACX,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,qBACX,2BAAOA,UAAU,mBAAmB2M,KAAK,WAAW7F,KAAK,cAAchH,GAAG,sBAAsBsG,MAAM,cAAcoI,gBAAc,EAC9HpN,QAAS,kBAAM,EAAK1B,MAAMoP,yBAC9B,2BAAO9O,UAAU,mBAAmBuO,QAAQ,uBAA5C,sBAIJ,yBAAKvO,UAAU,qBACX,2BAAOA,UAAU,mBAAmB2M,KAAK,WAAW7F,KAAK,cAAchH,GAAG,qBAAqBsG,MAAM,aAAaoI,gBAAc,EAC5HpN,QAAS,kBAAM,EAAK1B,MAAMqP,wBAC9B,2BAAO/O,UAAU,mBAAmBuO,QAAQ,sBAA5C,sB,GArBUnO,IAAMC,WCyTzB2O,E,kDAhTb,WAAYtP,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACTsP,QAAS,EACTC,oBAAqB,CACjBrF,SAAS,EACTzH,SAAS,EACT+M,aAAa,EACbtM,KAAK,GAETuM,aAAc,CACV,CAAC,UAAW,UAAW,cAAe,SAI9C,EAAKC,kBAAoBjP,IAAMoB,YAE/B,EAAK8N,oBAAsB,EAAKA,oBAAoBvN,KAAzB,gBAC3B,EAAKwN,cAAgB,EAAKA,cAAcxN,KAAnB,gBACrB,EAAKyN,mBAAqB,EAAKA,mBAAmBzN,KAAxB,gBAnBT,E,0DAsBLyJ,GACVzL,KAAKL,MAAM+P,WAAWjE,EAAEK,OAAOzF,S,0CAGfoF,GACfkE,OAAO3P,KAAKsP,kBAAkBjN,QAAQgE,QAAUsJ,OAAO3P,KAAKsP,kBAAkBjN,QAAQgE,QAAUrG,KAAKJ,MAAMsP,UAC1GlP,KAAKJ,MAAMsP,QAAUS,OAAO3P,KAAKsP,kBAAkBjN,QAAQgE,OAC3DrG,KAAKL,MAAMiQ,kBAAkBD,OAAO3P,KAAKsP,kBAAkBjN,QAAQgE,SAEvEoF,EAAEI,mB,2CAGkB,IAAD,EACfwD,EAAe,CAAC,IACpBA,EAAa,GAAGQ,KAAK,QAElB7P,KAAKJ,MAAMuP,oBAAoBrF,SAC9BuF,EAAa,GAAGQ,KAAK,gBAAkB7P,KAAKL,MAAM2G,MAAMiD,mBAAqB,KAE9EvJ,KAAKJ,MAAMuP,oBAAoB9M,SAC9BgN,EAAa,GAAGQ,KAAK,gBAAkB7P,KAAKL,MAAM2G,MAAMkD,mBAAqB,KAE9ExJ,KAAKJ,MAAMuP,oBAAoBC,aAC9BC,EAAa,GAAGQ,KAAK,oBAAsB7P,KAAKL,MAAM2G,MAAMmD,gBAAkB,KAE/EzJ,KAAKJ,MAAMuP,oBAAoBrM,KAC9BuM,EAAa,GAAGQ,KAAK,YAAc7P,KAAKL,MAAM2G,MAAMgD,eAAiB,KAGzE,IAAI,IAAIwG,EAAY,EAAGA,GAAa9P,KAAKL,MAAMoK,YAAa+F,IACrD9P,KAAKJ,MAAMuP,oBAAoBrF,SAC9BuF,EAAa,GAAGQ,KAAK,QAAUC,EAAY,aAAe9P,KAAKL,MAAM2G,MAAMiD,mBAAqB,KAEjGvJ,KAAKJ,MAAMuP,oBAAoB9M,SAC9BgN,EAAa,GAAGQ,KAAK,QAAUC,EAAY,aAAe9P,KAAKL,MAAM2G,MAAMkD,mBAAqB,KAEjGxJ,KAAKJ,MAAMuP,oBAAoBC,aAC9BC,EAAa,GAAGQ,KAAK,QAAUC,EAAY,iBAAmB9P,KAAKL,MAAM2G,MAAMmD,gBAAkB,KAElGzJ,KAAKJ,MAAMuP,oBAAoBrM,KAC9BuM,EAAa,GAAGQ,KAAK,QAAUC,EAAY,SAAW9P,KAAKL,MAAM2G,MAAMgD,eAAiB,KAQhG,IAFA,IAAIgD,EAAWtM,KAAKL,MAAMuN,UACtB6C,GAAa,UAAAzD,EAAS,UAAT,eAAazI,OAAOyB,SAAU,EACvC0K,EAAY,EAAGA,EAAYD,EAAYC,IAAa,CACxDX,EAAaQ,KAAK,IAElBR,EAAaW,EAAY,GAAGH,KAAKvD,EAAS,GAAGzI,OAAOmM,IACjDhQ,KAAKJ,MAAMuP,oBAAoBrF,SAC9BuF,EAAaW,EAAY,GAAGH,KAAK7P,KAAKL,MAAMiE,KAAKiF,YAAYmH,IAE9DhQ,KAAKJ,MAAMuP,oBAAoB9M,SAC9BgN,EAAaW,EAAY,GAAGH,KAAK7P,KAAKL,MAAMiE,KAAKmF,YAAYiH,IAE9DhQ,KAAKJ,MAAMuP,oBAAoBC,aAC9BC,EAAaW,EAAY,GAAGH,KAAK7P,KAAKL,MAAMiE,KAAKqF,gBAAgB+G,IAElEhQ,KAAKJ,MAAMuP,oBAAoBrM,KAC9BuM,EAAaW,EAAY,GAAGH,KAAK7P,KAAKL,MAAMiE,KAAK+E,QAAQqH,IAE7D,IAAI,IAAIF,EAAY,EAAGA,EAAY9P,KAAKL,MAAMoK,YAAa+F,IACpD9P,KAAKJ,MAAMuP,oBAAoBrF,SAC9BuF,EAAaW,EAAY,GAAGH,KAAKvD,EAASwD,GAAWhG,QAAQkG,IAE9DhQ,KAAKJ,MAAMuP,oBAAoB9M,SAC9BgN,EAAaW,EAAY,GAAGH,KAAKvD,EAASwD,GAAWzN,QAAQ2N,IAE9DhQ,KAAKJ,MAAMuP,oBAAoBC,aAC9BC,EAAaW,EAAY,GAAGH,KAAKvD,EAASwD,GAAWtD,KAAKwD,IAE3DhQ,KAAKJ,MAAMuP,oBAAoBrM,KAC9BuM,EAAaW,EAAY,GAAGH,KAAKvD,EAASwD,GAAWhN,IAAIkN,IAKrEhQ,KAAK+L,UAAS,iBAAO,CACjBsD,aAAcA,MAElBY,IAAMC,KAAK,kBAAmB,CAACC,UAAW,Q,+BAGlC,IAAD,OACP,OACI,kBAAC,IAAMrQ,SAAP,KAEI,yBAAKG,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAkBmB,MAAM,YAAYE,MAAOtB,KAAKL,MAAM2B,OAClD,uBAAGrB,UAAW,2BAAkD,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,eACrFgB,MAAO,CAACoE,aAAc,SAD1B,kBAEA,8BACI,+DACA,yBAAKzG,UAAU,YACX,4BAAQA,UAAU,wBACd,4BAAQ+N,cAAY,GAApB,2CACA,4BAAQ3H,MAAM,KAAd,oBACA,4BAAQA,MAAM,KAAd,OACA,4BAAQA,MAAM,KAAd,SAGR,2BAAOpG,UAAU,QAAjB,mBACA,yBAAKA,UAAU,YACX,4BAAQO,IAAKR,KAAKsP,kBAAmBjO,QAASrB,KAAKuP,oBAAqBtP,UAAU,wBAC9E,4BAAQ+N,cAAY,EAAC3H,MAAM,KAA3B,8BAEI,YAAI0G,MAAM,IAAIC,QAAQlG,KAAI,SAACmG,GAAD,OACtB,4BAAQ5G,MAAO4G,EAAU,EAAG7E,IAAK6E,GAAUA,EAAU,UAQ7E,kBAAC,EAAD,CAAkB7L,MAAM,YAAYE,MAAOtB,KAAKL,MAAM2B,OAClD,uBAAGrB,UAAW,2BAAkD,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,eACrFgB,MAAO,CAACoE,aAAc,SAD1B,0BAEA,kBAAC,EAAD,CACImI,6BAA8B,SAACuB,GAC3B,OAAOA,GACH,IAAK,UACD,EAAKrE,UAAS,SAACsE,GAAD,MAAgB,CAC1BlB,oBAAoB,2BACbkB,EAAUlB,qBADE,IAEfrF,SAAUuG,EAAUlB,oBAAoBrF,cAGhD,MACJ,IAAK,UACD,EAAKiC,UAAS,SAACsE,GAAD,MAAgB,CAC1BlB,oBAAoB,2BACbkB,EAAUlB,qBADE,IAEf9M,SAAUgO,EAAUlB,oBAAoB9M,cAGhD,MACJ,IAAK,cACD,EAAK0J,UAAS,SAACsE,GAAD,MAAgB,CAC1BlB,oBAAoB,2BACbkB,EAAUlB,qBADE,IAEfC,aAAciB,EAAUlB,oBAAoBC,kBAGpD,MACJ,IAAK,MACD,EAAKrD,UAAS,SAACsE,GAAD,MAAgB,CAC1BlB,oBAAoB,2BACbkB,EAAUlB,qBADE,IAEfrM,KAAMuN,EAAUlB,oBAAoBrM,cAM5D,yBAAK7C,UAAU,OACX,yBAAKA,UAAU,mBACf,kBAAC,UAAD,CAAS2D,KAAM5D,KAAKJ,MAAMyP,aAAc5H,SAAU,8BAC9CpG,QAASrB,KAAKyP,mBACdxP,UAAU,wBAFd,0BAUhB,yBAAKA,UAAU,YACX,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAkBmB,MAAM,YAAYE,MAAOtB,KAAKL,MAAM2B,OAClD,uBAAGrB,UAAW,2BAAkD,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,eACrFgB,MAAO,CAACoE,aAAc,SAD1B,yBAEA,2DACA,yBAAKzG,UAAU,YACX,4BAAQoB,QAASrB,KAAKwP,cAAevP,UAAU,wBAC3C,4BAAQ+N,cAAY,GAApB,uCACA,4BAAQ3H,MAAM,MAAd,SACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,KAAd,OAGR,2BAAOpG,UAAU,QAAjB,4BACA,yBAAKA,UAAU,YACX,4BAAQoB,QAASrB,KAAKwP,cAAevP,UAAU,wBAC3C,4BAAQ+N,cAAY,GAApB,uCACA,4BAAQ3H,MAAM,MAAd,SACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,KAAd,OAGR,2BAAOpG,UAAU,QAAjB,gCACA,yBAAKA,UAAU,YACX,4BAAQoB,QAASrB,KAAKwP,cAAevP,UAAU,wBAC3C,4BAAQ+N,cAAY,GAApB,2CACA,4BAAQ3H,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,QAKZ,kBAAC,EAAD,CAAkBjF,MAAM,YAAYE,MAAOtB,KAAKL,MAAM2B,OAClD,uBAAGrB,UAAW,2BAAkD,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,eACrFgB,MAAO,CAACoE,aAAc,SAD1B,wBAEA,yBAAKzG,UAAU,YACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,cACX,2BAAOoB,QAASrB,KAAKL,MAAM2Q,gBAAiB5P,SAAUV,KAAKL,MAAMsH,eAAgBlH,GAAG,mBAChFE,UAAU,mBAAmB2M,KAAK,aACtC,2BAAO3M,UAAU,mBAAmBuO,QAAQ,oBAA5C,aACgBxO,KAAKL,MAAMuH,eAAiB,YAAc,kBAMtE,yBAAKjH,UAAU,YACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,cACf,2BAAOA,UAAU,mBAAmB2M,KAAK,QAAQ7F,KAAK,cAAchH,GAAG,iBAAiBsG,MAAM,YAAYoI,gBAAc,EACpHpN,QAAS,WACL+J,SAASC,KAAK/I,MAAMiO,WAAa,UACjC,EAAK5Q,MAAM6Q,uBAAuB,WAE1C,2BAAOvQ,UAAU,mBAAmBuO,QAAQ,kBAA5C,eAKJ,yBAAKvO,UAAU,cACX,2BAAOA,UAAU,mBAAmB2M,KAAK,QAAQ7F,KAAK,cAAchH,GAAG,kBAAkBsG,MAAM,aAC3FhF,QAAS,WACL+J,SAASC,KAAK/I,MAAMiO,WAAa,UACjC,EAAK5Q,MAAM6Q,uBAAuB,YAE1C,2BAAOvQ,UAAU,mBAAmBuO,QAAQ,mBAA5C,qBAUpB,yBAAKvO,UAAU,YACX,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAkBmB,MAAM,YAAYE,MAAOtB,KAAKL,MAAM2B,OAClD,uBAAGrB,UAAW,2BAAkD,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,eAAgBgB,MAAO,CAACoE,aAAc,SAA/H,yBACA,kBAAC,EAAD,CAA0B+J,IAAKzQ,KAAKJ,MAAM6Q,IACtCxJ,eAAgBjH,KAAKL,MAAMsH,eAC3BC,eAAgBlH,KAAKL,MAAMuH,eAC3BwJ,QAAS1Q,KAAKL,MAAM+Q,QACpBzC,eAAgBjO,KAAKL,MAAMsO,eAC3BG,QAASpO,KAAKL,MAAMyO,QACpBG,4BAA6BvO,KAAKL,MAAM4O,4BACxCD,cAAetO,KAAKL,MAAM2O,cAC1BD,qBAAsBrO,KAAKL,MAAM0O,wBAGzC,kBAAC,EAAD,CAAkBjN,MAAM,YAAYE,MAAOtB,KAAKL,MAAM2B,OAClD,uBAAGrB,UAAW,2BAAkD,UAArBD,KAAKL,MAAM2B,MAAoB,aAAe,eACrFgB,MAAO,CAACoE,aAAc,SAD1B,mBAEA,kBAAC,EAAD,CACIqI,oBAAqB/O,KAAKL,MAAMoP,oBAChCC,mBAAoBhP,KAAKL,MAAMqP,8B,GArS7B3O,IAAMC,WCX3BqQ,EAAc,SAACtK,GAAD,OAAWA,EAAQ,KACjCuK,EAAgB,SAACvK,GAAD,OAAWA,EAAQ,KAEnCwK,EAAc,SAACxK,GAAD,OAAmB,IAARA,GACzByK,EAAe,SAACzK,GAAD,OAAWA,EAAQ,KAElC0K,EAAgB,SAAC1K,GAAD,OAAmB,IAARA,GAC3B2K,EAAe,SAAC3K,GAAD,OAAmB,IAARA,GAE1B4K,EAAsB,SAAC5K,GAAD,OAAmB,EAARA,EAAU,EAAI,IAC/C6K,EAAkB,SAAC7K,GAAD,OAAWA,EAAQ,QCZ9C8K,G,cAAWC,SAMf,GAJwB,qBAAbD,IACPA,EAAWE,KAAKD,cAGHvL,IAAbsL,EACA,KAAM,gFAGV,IAAIG,EAAc,SAAUjL,GACxB,YAAiBR,IAAVQ,GAGPkL,EAAUxE,MAAMwE,QAEhBC,EAAW,SAAUnL,GACrB,IAAIuG,SAAcvG,EAClB,OAAgB,MAATA,IAA0B,UAARuG,GAA4B,YAARA,IAG7C6E,EAAa,SAAU3F,GACvB,MAAyB,oBAAXA,GAGd4F,EAAW,SAAUrL,GACrB,MAAwB,kBAAVA,GAGdsL,GAAU,SAAUtL,GACpB,GAAImL,EAASnL,GAAQ,CACjB,IAAK,IAAIuL,KAAOvL,EACZ,GAAIA,EAAMwL,eAAeD,GACrB,OAAO,EAGf,OAAO,EAEX,OAAIL,EAAQlL,IACAA,EAAMf,QAEVe,GAGRyL,GAAU,SAAUhG,EAAQiG,GAC5B,GAAIR,EAAQzF,GACR,OAAOA,EAAOhF,IAAIiL,GAGlB,IAAK,IAAIC,KAAQlG,EACTA,EAAO+F,eAAeG,IACtBD,EAASjG,EAAOkG,KAU5BC,GAAS,CACT,YAAe,CACX,MAAS,MACT,QAAW,yGAEf,gBAAmB,CACf,MAAS,MACT,QAAW,iEAEf,iBAAoB,CAChB,MAAS,MACT,QAAW,mEAEf,eAAkB,CACd,MAAS,MACT,QAAW,gDAEf,eAAkB,CACd,MAAS,MACT,QAAW,6CAInB,SAASC,GAAYC,EAAMC,EAASxO,GAChC5D,KAAKoS,QAAUA,GAAW,GAC1BpS,KAAKmS,KAAOA,IAAS,KAEjBE,QAAQzO,KACR5D,KAAK4D,KAAOA,GAIpBsO,GAAYI,UAAY,IAAIC,MAE5B,IAuWeC,GAvWM,WAEjB,IAAIC,EAAOzS,KACP0S,EAAe,GACf3S,EAAK,EACL4S,EAAa,GAGjB,SAASC,EAASC,EAAcC,GAC5B,IA/CczM,EA+CV0M,GA/CU1M,EA+CIwM,EA9CfG,KAAKC,MAAMD,KAAKE,UAAU7M,KAiE7B,OAlBMyM,IACEtB,EAASsB,IAAcA,EAAUjB,eAAe,WAChDkB,EAAMnP,KAAOkP,EAAUV,QAElBV,EAASoB,KACdC,EAAMnP,KAAOkP,GAGbA,aAAqBZ,KACrBa,EAAQ,CACJX,QAASU,EAAUV,QACnBD,KAAMW,EAAUX,MAEhBW,EAAUjB,eAAe,UACzBkB,EAAMnP,KAAOkP,EAAUlP,QAI5BmP,EAkDX,SAASI,EAASf,GACd,IACI,OA7CR,SAAiBA,GACb,QAASA,EAAQW,MA4CTK,CAAQhB,IAuBGW,EAtBUX,OAuBzBM,EAAab,eAAekB,EAAMhT,IAClC2S,EAAaK,EAAMhT,IAAIsT,OAAON,EAAMA,OAGpCO,QAAQC,IAAI,kBAAmBR,KAjEvC,SAAoBX,GAChB,OAAOA,EAAQP,eAAe,WAAaO,EAAQP,eAAe,MAuCrD2B,CAAWpB,IA6BJqB,EA5BUrB,OA6B1BM,EAAab,eAAe4B,EAAO1T,KACnC2S,EAAae,EAAO1T,IAAI2T,QAAQD,EAAOA,eAChCf,EAAae,EAAO1T,KAG3BuT,QAAQC,IAAI,kBAAmBE,KA/EvC,SAAmBrB,GACf,QAASA,EAAQuB,OA8CJC,CAAUxB,GAoC3B,SAA6ByB,GAEzB,GADAP,QAAQC,IAAI,0CACRZ,EAAWd,eAAegC,EAAQF,QAiGlC,OAAOxC,EAASuC,QAAQ,CACpB,QAAW,MACX,GAAMG,EAAQ9T,GACd,MAAS6S,EAASX,GAAO6B,iBAAkB,CACvC1B,QAASyB,EAAQF,WApGzB,IACI,IAAIF,EAEJ,GAAII,EAAQhC,eAAe,WACvB,GAAyC,QAArCc,EAAWkB,EAAQF,QAAQI,OAC3BN,EAASd,EAAWkB,EAAQF,QAAQK,GAAGC,KAAKtB,EAAYkB,EAAQE,aAE/D,GAAIxC,EAAQsC,EAAQE,QACrBN,EAASd,EAAWkB,EAAQF,QAAQK,GAAGE,MAAMvB,EAAYkB,EAAQE,aAEhE,GAAIvC,EAASqC,EAAQE,QAAS,CAC/B,KAAIpB,EAAWkB,EAAQF,QAAQI,kBAAkBhH,OA2B7C,OAAOoE,EAASuC,QAAQ,CACpB,QAAW,MACX,GAAMG,EAAQ9T,GACd,MAAS6S,EAASX,GAAOkC,eAAgB,sCAAwCN,EAAQF,UA7B7F,IAAIS,EAAa,GAYjB,GAXAzB,EAAWkB,EAAQF,QAAQI,OAAOjC,SAAQ,SAAUuC,GAE5CR,EAAQE,OAAOlC,eAAewC,IAC9BD,EAAWvE,KAAKgE,EAAQE,OAAOM,WACxBR,EAAQE,OAAOM,IAGtBD,EAAWvE,UAAKhK,MAIpByO,OAAOtH,KAAK6G,EAAQE,QAAQzO,OAAS,EACrC,OAAO6L,EAASuC,QAAQ,CACpB,QAAW,MACX,GAAMG,EAAQ9T,GACd,MAAS6S,EAASX,GAAOkC,eAAgB,CACrC/B,QAAS,WAAakC,OAAOtH,KAAK6G,EAAQE,QAAQQ,WAAa,gBAKvEd,EAASd,EAAWkB,EAAQF,QAAQK,GAAGE,MAAMvB,EAAYyB,SAarEX,EAASd,EAAWkB,EAAQF,QAAQK,KAGxC,OAAIH,EAAQhC,eAAe,OAhJpB2C,EAiJWf,IAhJR,oBAAsBe,EAAMC,KAiJvBhB,EAAOgB,MAAK,SAAUC,GAIzB,OAHIpD,EAAYoD,KACZA,GAAM,GAEH,CACH,QAAW,MACX,GAAMb,EAAQ9T,GACd,OAAU2U,MAGbC,OAAM,SAAUlJ,GACb,MAAO,CACH,QAAW,MACX,GAAMoI,EAAQ9T,GACd,MAAS6S,EAASX,GAAO2C,eAAgBnJ,QAMjD6F,EAAYmC,KACZA,GAAS,GAGNtC,EAASuC,QAAQ,CACpB,QAAW,MACX,GAAMG,EAAQ9T,GACd,OAAU0T,KAKXtC,EAASuC,UAGxB,MAAOjI,GACH,OAAO0F,EAASuC,QAAQ,CACpB,QAAW,MACX,GAAMG,EAAQ9T,GACd,MAAS6S,EAASX,GAAO2C,eAAgBnJ,KAzLzD,IAAmB+I,EAwDAK,CAAoBzC,GAGpBjB,EAASuC,QAAQ,CACpB,GAAM,KACN,QAAW,MACX,MAASd,EAASX,GAAO6C,mBAIrC,MAAOrJ,GAEH,OADA6H,QAAQP,MAAM,kBAAoBtH,EAAE2G,QAAS3G,GACtC0F,EAASkC,OAAO5H,GAa/B,IAAwBgI,EATDV,EAgIvB,SAASgC,EAAapB,EAAQI,GAC1B,IAAI3B,EAAU,CACV,QAAW,MACX,OAAUuB,EACV,OAAUI,GAOd,OAJIvC,EAASuC,KAAYpC,GAAQoC,KAC7B3B,EAAQ2B,OAASA,GAGd3B,EAGX,SAAS6B,EAAKN,EAAQI,GAElB,IAAI3B,EAAU,CACV,QAAW,MACX,OAAUuB,EACV,GAJJ5T,GAAM,GAWN,OAJIyR,EAASuC,KAAYpC,GAAQoC,KAC7B3B,EAAQ2B,OAASA,GAGd,CACHiB,QAAS,IAAI7D,GAAS,SAAUuC,EAASL,GACrCX,EAAa3S,EAAGwU,YAAc,CAC1Bb,QAASA,EACTL,OAAQA,MAGhBjB,QAASA,GAIjBK,EAAKwC,SAAW,SAAUC,GACtB5B,QAAQC,IAAI,8CACZD,QAAQC,IAAI4B,YAGhB1C,EAAK2C,SAAW,SAAUC,EAAcC,EAActB,GAElD,GAAItC,EAAS2D,IAAiC,QAAhBC,GAA0B7D,EAAWuC,GAC/DrB,EAAW0C,GAAgB,CACvBrB,GAAIA,EACJD,OAAQuB,QAGX,GAAI5D,EAAS2D,IAAiB9D,EAAQ+D,IAAiB7D,EAAWuC,GACnErB,EAAW0C,GAAgB,CACvBrB,GAAIA,EACJD,OAAQuB,OAGX,MAAI5D,EAAS2D,IAAiB5D,EAAW6D,IAAiBhE,EAAY0C,IAOvE,MAAM,IAAIzB,MAAM,uFANhBI,EAAW0C,GAAgB,CACvBrB,GAAIsB,EACJvB,OAAQ,QAQpBtB,EAAK8C,GAAK9C,EAAK2C,SAEf3C,EAAK+C,IAAM,SAAUH,UACZ1C,EAAW0C,IAGpB5C,EAAKwB,KAAO,SAAUN,EAAQI,GAC1B,IAAI0B,EAAQxB,EAAKN,EAAQI,GAEzB,OADAtB,EAAKwC,SAASjC,KAAKE,UAAUuC,EAAMrD,UAC5BqD,EAAMT,SAGjBvC,EAAKsC,aAAe,SAAUpB,EAAQI,GAClCtB,EAAKwC,SAASjC,KAAKE,UAAU6B,EAAapB,EAAQI,MAGtDtB,EAAKiD,MAAQ,SAAUC,GACnB,IAAIC,EAAW,GACXxD,EAAU,GAmBd,OAjBAN,GAAQ6D,GAAU,SAAUE,GACxB,GAAIA,EAAIhE,eAAe,QAAS,CAC5B,IAAI4D,EAAQxB,EAAK4B,EAAI5B,KAAKN,OAAQkC,EAAI5B,KAAKF,QAC3C3B,EAAQvC,KAAK4F,EAAMrD,SAEnBwD,EAAS/F,KAAK4F,EAAMT,QAAQP,MAAK,SAAUC,GACvC,OAAOA,KACR,SAAUoB,GACT,OAAOA,WAGND,EAAIhE,eAAe,iBACxBO,EAAQvC,KAAKkF,EAAac,EAAId,aAAapB,OAAQkC,EAAId,aAAahB,YAI5EtB,EAAKwC,SAASjC,KAAKE,UAAUd,IACtBjB,EAAS4E,IAAIH,IAGxBnD,EAAKuD,eAAiB,SAAUC,GAC5B,IAEI,OAtSR,SAAuB7D,GACnB,IAAIwD,EAAW,GAUf,OATIrE,EAAQa,GACRN,GAAQM,GAAS,SAAU8D,GACvBN,EAAS/F,KAAKsD,EAAS+C,OAGtB1E,EAASY,IACdwD,EAAS/F,KAAKsD,EAASf,IAGpBjB,EAAS4E,IAAIH,GACfnB,MAAK,SAAUhB,GAEZ,IAAIwB,EAAW,GAaf,OAZAnD,GAAQ2B,GAAQ,SAAU0C,GACjB7E,EAAY6E,IACblB,EAASpF,KAAKsG,MAIE,IAApBlB,EAAS3P,OACTmN,EAAKwC,SAASjC,KAAKE,UAAU+B,EAAS,KAEjCA,EAAS3P,OAAS,GACvBmN,EAAKwC,SAASjC,KAAKE,UAAU+B,IAE1BxB,KA2QJ2C,CADOpD,KAAKC,MAAMgD,IAG7B,MAAOxK,GAOH,OANA6H,QAAQC,IAAI,8BAA+B9H,GAC3CgH,EAAKwC,SAASjC,KAAKE,UAAU,CACzB,GAAM,KACN,QAAW,MACX,MAASjB,GAAOoE,eAEblF,EAASkC,OAAO5H,KAI/BgH,EAAK6D,gBAAkB,SAAUnE,EAAMC,EAASxO,GAC5C,OAAO,IAAIsO,GAAYC,EAAMC,EAASxO,KChW1CyN,GAAO,GACXA,GAAKmB,eAAiBA,GACtBnB,GAAKkF,UAAYA,UAGjB,IAmoDeC,GAnoDL,SAASC,EAAKC,EAAcC,EAAeC,GAEjD,IAAIC,EAAO,IAAIxF,GAAKmB,eAChBsE,EAAS,IAAIzF,GAAKkF,UAAU,QAAUE,GA2B1C,SAASM,EAAYpD,EAAQqD,GAAO,IAAD,OAC/B,OAAO,IAAI5F,SAAQ,SAACsC,EAASL,GACzBwD,EAAK5C,KAAKN,EAAQqD,GACbvC,MAAK,SAACwC,GACAA,EAASC,QACRxD,EAAQuD,GAER5D,EAAO4D,EAASlE,UAEtB4B,OAAM,SAAC5B,GACJ,EAAKoE,cAAcpE,SAnCpC/S,KAAKmX,cAAgB7D,QAAQC,IAC7BvT,KAAKoX,aAAeV,GAAgBpD,QAAQC,IAC5CvT,KAAKqX,cAAgBV,GAAiBrD,QAAQC,IAC9CvT,KAAKsX,cAAgBV,GAAiBtD,QAAQC,IAE9CsD,EAAK5B,SAAW,SAASsC,GACrBT,EAAOU,KAAKD,IAGhBT,EAAOW,OAAS,SAASC,GACrB1X,KAAKoX,aAAaM,IACpB1V,KAAKhC,MAEP8W,EAAOa,QAAU,SAASD,GACtB1X,KAAKqX,cAAcK,IACrB1V,KAAKhC,MAEP8W,EAAOc,QAAU,SAASF,GACtB1X,KAAKsX,cAAcI,IACrB1V,KAAKhC,MAEP8W,EAAOe,UAAY,SAASH,GACxBb,EAAKb,eAAe0B,EAAM9T,OA0B9B5D,KAAK8X,cAAgB,WACjB,OAAOf,EAAY9C,KAAKjU,KAAM,kBAsBlCA,KAAK+X,cAAgB,SAAS/Q,GAC1B,OAAO+P,EAAY9C,KAAKjU,KAAM,gBAAiB,CAACgH,KAiBpDhH,KAAKgY,gBAAkB,SAASjR,GAC5B,OAAOgQ,EAAY9C,KAAKjU,KAAM,kBAAmB,CAAC+G,KAYtD/G,KAAKiY,UAAY,SAASlR,GACtB,OAAOgQ,EAAY9C,KAAKjU,KAAM,YAAa,CAAC+G,KAWhD/G,KAAKkY,SAAW,WACZ,OAAOnB,EAAY9C,KAAKjU,KAAM,aAWlCA,KAAKmY,eAAiB,WAClB,OAAOpB,EAAY9C,KAAKjU,KAAM,mBAWlCA,KAAKoY,gBAAkB,WACnB,OAAOrB,EAAY9C,KAAKjU,KAAM,oBAalCA,KAAKqY,qBAAuB,WACxB,OAAOtB,EAAY9C,KAAKjU,KAAM,yBAmBlCA,KAAKsY,iBAAmB,SAASvR,GAC7B,OAAOgQ,EAAY9C,KAAKjU,KAAM,mBAAoB,CAAC+G,KAiBvD/G,KAAKuY,mBAAqB,SAASxR,GAC/B,OAAOgQ,EAAY9C,KAAKjU,KAAM,qBAAsB,CAAC+G,KAoBzD/G,KAAKwY,qBAAuB,SAASzR,EAAM0R,GACvC,OAAO1B,EAAY9C,KAAKjU,KAAM,uBAAwB,CAAC+G,EAAM0R,KAajEzY,KAAK0Y,gBAAkB,SAASC,EAAMC,GAClC,OAAO7B,EAAY9C,KAAKjU,KAAM,kBAAmB,CAAC2Y,EAAMC,KAa5D5Y,KAAK6Y,iBAAmB,SAASF,EAAMC,GACnC,OAAO7B,EAAY9C,KAAKjU,KAAM,mBAAoB,CAAC2Y,EAAMC,KAY7D5Y,KAAK8Y,kBAAoB,SAASH,GAC9B,OAAO5B,EAAY9C,KAAKjU,KAAM,oBAAqB,CAAC2Y,KAYxD3Y,KAAK+Y,mBAAqB,SAASJ,GAC/B,OAAO5B,EAAY9C,KAAKjU,KAAM,qBAAsB,CAAC2Y,KAczD3Y,KAAKgZ,iBAAmB,SAASL,EAAMC,EAAMhV,GACzC,OAAOmT,EAAY9C,KAAKjU,KAAM,mBAAoB,CAAC2Y,EAAMC,EAAMhV,KAcnE5D,KAAKiZ,kBAAoB,SAASN,EAAMC,EAAMhV,GAC1C,OAAOmT,EAAY9C,KAAKjU,KAAM,oBAAqB,CAAC2Y,EAAMC,EAAMhV,KAapE5D,KAAKkZ,mBAAqB,SAASP,EAAM/U,GACrC,OAAOmT,EAAY9C,KAAKjU,KAAM,qBAAsB,CAAC2Y,EAAM/U,KAa/D5D,KAAKmZ,oBAAsB,SAASR,EAAM/U,GACtC,OAAOmT,EAAY9C,KAAKjU,KAAM,sBAAuB,CAAC2Y,EAAM/U,KAehE5D,KAAKoZ,aAAe,SAAST,EAAMC,EAAMS,GACrC,OAAOtC,EAAY9C,KAAKjU,KAAM,eAAgB,CAAC2Y,EAAMC,EAAMS,KAe/DrZ,KAAKsZ,cAAgB,SAASX,EAAMC,EAAMS,GACtC,OAAOtC,EAAY9C,KAAKjU,KAAM,gBAAiB,CAAC2Y,EAAMC,EAAMS,KAchErZ,KAAKuZ,eAAiB,SAASZ,EAAMC,GACjC,OAAO7B,EAAY9C,KAAKjU,KAAM,iBAAkB,CAAC2Y,EAAMC,KAc3D5Y,KAAKwZ,gBAAkB,SAASb,EAAMC,GAClC,OAAO7B,EAAY9C,KAAKjU,KAAM,kBAAmB,CAAC2Y,EAAMC,KAc5D5Y,KAAKyZ,cAAgB,SAASd,EAAMU,EAAQzV,GACxC,OAAOmT,EAAY9C,KAAKjU,KAAM,gBAAiB,CAAC2Y,EAAMU,EAAQzV,KAclE5D,KAAK0Z,eAAiB,SAASf,EAAMU,EAAQzV,GACzC,OAAOmT,EAAY9C,KAAKjU,KAAM,iBAAkB,CAAC2Y,EAAMU,EAAQzV,KAanE5D,KAAK2Z,gBAAkB,SAAShB,EAAM/U,GAClC,OAAOmT,EAAY9C,KAAKjU,KAAM,kBAAmB,CAAC2Y,EAAM/U,KAa5D5D,KAAK4Z,iBAAmB,SAASjB,EAAM/U,GACnC,OAAOmT,EAAY9C,KAAKjU,KAAM,mBAAoB,CAAC2Y,EAAM/U,KAY7D5D,KAAK6Z,QAAU,SAASC,GACpB,OAAO/C,EAAY9C,KAAKjU,KAAM,UAAW,CAAC8Z,KAY9C9Z,KAAK+Z,QAAU,WACX,OAAOhD,EAAY9C,KAAKjU,KAAM,YAwBlCA,KAAKga,YAAc,SAAShT,GACxB,OAAO+P,EAAY9C,KAAKjU,KAAM,cAAe,CAACgH,KAiBlDhH,KAAKia,cAAgB,SAASlT,GAC1B,OAAOgQ,EAAY9C,KAAKjU,KAAM,gBAAiB,CAAC+G,KAuBpD/G,KAAKka,cAAgB,SAASlT,GAC1B,OAAO+P,EAAY9C,KAAKjU,KAAM,gBAAiB,CAACgH,KAiBpDhH,KAAKma,gBAAkB,SAASpT,GAC5B,OAAOgQ,EAAY9C,KAAKjU,KAAM,kBAAmB,CAAC+G,KAatD/G,KAAKoa,eAAiB,SAASC,GAC3B,OAAOtD,EAAY9C,KAAKjU,KAAM,iBAAkB,CAACqa,KAYrDra,KAAKsa,eAAiB,SAASvT,GAC3B,OAAOgQ,EAAY9C,KAAKjU,KAAM,iBAAkB,CAAC+G,KAWrD/G,KAAKua,yBAA2B,WAC5B,OAAOxD,EAAY9C,KAAKjU,KAAM,6BAalCA,KAAKwa,aAAe,SAASzT,GACzB,OAAOgQ,EAAY9C,KAAKjU,KAAM,eAAgB,CAAC+G,KAanD/G,KAAKya,cAAgB,SAAS1T,EAAMV,GAChC,OAAO0Q,EAAY9C,KAAKjU,KAAM,gBAAiB,CAAC+G,EAAMV,KAsB1DrG,KAAK0a,kBAAoB,SAAS3a,EAAI4a,GAClC,OAAO5D,EAAY9C,KAAKjU,KAAM,oBAAqB,CAACD,EAAI4a,KAoB5D3a,KAAK4a,oBAAsB,SAAS7a,GAChC,OAAOgX,EAAY9C,KAAKjU,KAAM,sBAAuB,CAACD,KAa1DC,KAAK6a,kBAAoB,SAAS9a,GAC9B,OAAOgX,EAAY9C,KAAKjU,KAAM,oBAAqB,CAACD,KA4BxDC,KAAK8a,cAAgB,SAAS/a,EAAIgb,EAAQC,EAASC,GAC/C,OAAOlE,EAAY9C,KAAKjU,KAAM,gBAAiB,CAACD,EAAIgb,EAAQC,EAASC,KAazEjb,KAAKkb,cAAgB,SAASnb,GAC1B,OAAOgX,EAAY9C,KAAKjU,KAAM,gBAAiB,CAACD,KAcpDC,KAAKmb,aAAe,SAASpb,GACzB,OAAOgX,EAAY9C,KAAKjU,KAAM,eAAgB,CAACD,KAsBnDC,KAAKob,kBAAoB,SAASrb,GAC9B,OAAOgX,EAAY9C,KAAKjU,KAAM,oBAAqB,CAACD,KAYxDC,KAAKqb,gBAAkB,SAAStb,GAC5B,OAAOgX,EAAY9C,KAAKjU,KAAM,kBAAmB,CAACD,KActDC,KAAKsb,SAAW,SAASC,EAAMC,EAAcC,GACzC,OAAO1E,EAAY9C,KAAKjU,KAAM,WAAY,CAACub,EAAMC,EAAcC,KAYnEzb,KAAK0b,UAAY,SAASH,GACtB,OAAOxE,EAAY9C,KAAKjU,KAAM,YAAa,CAACub,KAYhDvb,KAAK2b,UAAY,SAASJ,EAAMK,GAC5B,OAAO7E,EAAY9C,KAAKjU,KAAM,YAAa,CAACub,EAAMK,KAatD5b,KAAK6b,qBAAuB,SAASC,EAAgBC,GACjD,OAAOhF,EAAY9C,KAAKjU,KAAM,uBAAwB,CAAC8b,EAAgBC,KAY3E/b,KAAKgc,yBAA2B,SAASC,GACrC,OAAOlF,EAAY9C,KAAKjU,KAAM,2BAA4B,CAACic,KAY/Djc,KAAKkc,eAAiB,SAASX,GAC3B,OAAOxE,EAAY9C,KAAKjU,KAAM,iBAAkB,CAACub,KAYrDvb,KAAKmc,eAAiB,SAASZ,GAC3B,OAAOxE,EAAY9C,KAAKjU,KAAM,iBAAkB,CAACub,KAYrDvb,KAAKoc,cAAgB,SAASb,GAC1B,OAAOxE,EAAY9C,KAAKjU,KAAM,gBAAiB,CAACub,KAYpDvb,KAAKqc,oBAAsB,SAASd,GAChC,OAAOxE,EAAY9C,KAAKjU,KAAM,sBAAuB,CAACub,KAY1Dvb,KAAKsc,oBAAsB,SAASf,GAChC,OAAOxE,EAAY9C,KAAKjU,KAAM,sBAAuB,CAACub,KAe1Dvb,KAAKuc,gBAAkB,SAAShB,EAAMiB,EAAKC,EAAcR,GACrD,OAAOlF,EAAY9C,KAAKjU,KAAM,kBAAmB,CAACub,EAAMiB,EAAKC,EAAcR,KAe/Ejc,KAAK0c,kBAAoB,SAASnB,EAAMlC,EAAQzV,EAAM6Y,GAClD,OAAO1F,EAAY9C,KAAKjU,KAAM,oBAAqB,CAACub,EAAMlC,EAAQzV,EAAM6Y,KAe5Ezc,KAAK2c,mBAAqB,SAASpB,EAAMlC,EAAQzV,EAAM6Y,GACnD,OAAO1F,EAAY9C,KAAKjU,KAAM,qBAAsB,CAACub,EAAMlC,EAAQzV,EAAM6Y,KAc7Ezc,KAAK4c,oBAAsB,SAASrB,EAAM3X,EAAM6Y,GAC5C,OAAO1F,EAAY9C,KAAKjU,KAAM,sBAAuB,CAACub,EAAM3X,EAAM6Y,KActEzc,KAAK6c,qBAAuB,SAAStB,EAAM3X,EAAM6Y,GAC7C,OAAO1F,EAAY9C,KAAKjU,KAAM,uBAAwB,CAACub,EAAM3X,EAAM6Y,KAgBvEzc,KAAK8c,eAAiB,SAASvB,EAAMQ,EAAcgB,EAAaN,EAAcR,GAC1E,OAAOlF,EAAY9C,KAAKjU,KAAM,iBAAkB,CAACub,EAAMQ,EAAcgB,EAAaN,EAAcR,KAgBpGjc,KAAKgd,iBAAmB,SAASzB,EAAMlC,EAAQ0C,EAAcnD,EAAM6D,GAC/D,OAAO1F,EAAY9C,KAAKjU,KAAM,mBAAoB,CAACub,EAAMlC,EAAQ0C,EAAcnD,EAAM6D,KAgBzFzc,KAAKid,kBAAoB,SAAS1B,EAAMlC,EAAQ0C,EAAcnD,EAAM6D,GAChE,OAAO1F,EAAY9C,KAAKjU,KAAM,oBAAqB,CAACub,EAAMlC,EAAQ0C,EAAcnD,EAAM6D,KAe1Fzc,KAAKkd,mBAAqB,SAAS3B,EAAMQ,EAAcnD,EAAM6D,GACzD,OAAO1F,EAAY9C,KAAKjU,KAAM,qBAAsB,CAACub,EAAMQ,EAAcnD,EAAM6D,KAenFzc,KAAKmd,oBAAsB,SAAS5B,EAAMQ,EAAcnD,EAAM6D,GAC1D,OAAO1F,EAAY9C,KAAKjU,KAAM,sBAAuB,CAACub,EAAMQ,EAAcnD,EAAM6D,KAcpFzc,KAAKod,cAAgB,SAASC,EAAMC,GAChC,OAAOvG,EAAY9C,KAAKjU,KAAM,gBAAiB,CAACqd,EAAMC,KAa1Dtd,KAAKud,eAAiB,SAASC,GAC3B,OAAOzG,EAAY9C,KAAKjU,KAAM,iBAAkB,CAACwd,KAerDxd,KAAKyd,oBAAsB,SAASD,EAAQT,EAAad,GACrD,OAAOlF,EAAY9C,KAAKjU,KAAM,sBAAuB,CAACwd,EAAQT,EAAad,KAgB/Ejc,KAAK0d,qBAAuB,SAASF,EAAQhB,EAAKP,EAASrD,GACvD,OAAO7B,EAAY9C,KAAKjU,KAAM,uBAAwB,CAACwd,EAAQhB,EAAKP,EAASrD,KAcjF5Y,KAAK2d,UAAY,SAAS5W,EAAMsW,GAC5B,OAAOtG,EAAY9C,KAAKjU,KAAM,YAAa,CAAC+G,EAAMsW,KAYtDrd,KAAK4d,WAAa,WACd,OAAO7G,EAAY9C,KAAKjU,KAAM,eAYlCA,KAAK6d,cAAgB,SAASC,GAC1B,OAAO/G,EAAY9C,KAAKjU,KAAM,gBAAiB,CAAC8d,KAqBpD9d,KAAK+d,gBAAkB,SAASC,GAC5B,OAAOjH,EAAY9C,KAAKjU,KAAM,kBAAmB,CAACge,KA6BtDhe,KAAKie,eAAiB,SAASC,EAAMC,GACjC,OAAOpH,EAAY9C,KAAKjU,KAAM,iBAAkB,CAACke,EAAMC,KAa3Dne,KAAKoe,oBAAsB,SAASC,GAAS,IAAD,OAExC,GAAGA,EAcCre,KAAKse,kBACLte,KAAKse,gBAAkB,WACnBhL,QAAQC,IAAI,kDAIhBvT,KAAKue,yBACLve,KAAKue,uBAAyB,SAAS3e,GACnC0T,QAAQC,IAAI,qDAAuD3T,EAAQ,OAI/EI,KAAKwe,oBACLxe,KAAKwe,kBAAoB,SAASzX,EAAMhH,EAAIsG,GACxCiN,QAAQC,IAAI,iDAAoDxM,EAAO,MAAShH,EAAK,KAAOsG,EAAQ,OAIxGrG,KAAKye,iBACLze,KAAKye,eAAiB,WAClBnL,QAAQC,IAAI,iDAKpBsD,EAAKzB,SAAS,kBAAmB,QAAQ,SAACsJ,GAAD,OAAkB,EAAKJ,gBAAgBpK,MAAM,KAAMwK,MAC5F7H,EAAKzB,SAAS,yBAA0B,QAAQ,SAACsJ,GAAD,OAAkB,EAAKH,uBAAuBrK,MAAM,KAAMwK,MAC1G7H,EAAKzB,SAAS,oBAAqB,QAAQ,SAACsJ,GAAD,OAAkB,EAAKF,kBAAkBtK,MAAM,KAAMwK,MAChG7H,EAAKzB,SAAS,iBAAkB,QAAQ,SAACsJ,GAAD,OAAkB,EAAKD,eAAevK,MAAM,KAAMwK,MAY1F1e,KAAK2e,cAAgB,SAASC,GAC1B,OAAO7H,EAAY9C,KAAKjU,KAAM,gBAAiB,CAAC4e,KAgBpD5e,KAAK6e,aAAe,SAASR,GACzB,OAAOtH,EAAY9C,KAAKjU,KAAM,eAAgB,CAACqe,KAoBnDre,KAAK8e,kBAAoB,SAAS/X,EAAMgY,GACpC,OAAOhI,EAAY9C,KAAKjU,KAAM,oBAAqB,CAAC+G,EAAMgY,KAY9D/e,KAAKgf,oBAAsB,SAASC,GAChC,OAAOlI,EAAY9C,KAAKjU,KAAM,sBAAuB,CAACif,KAe1Djf,KAAKkf,aAAe,SAASnY,EAAMoY,EAASvS,EAAMgM,GAC9C,OAAO7B,EAAY9C,KAAKjU,KAAM,eAAgB,CAAC+G,EAAMoY,EAASvS,EAAMgM,KAYxE5Y,KAAKia,cAAgB,SAASlT,GAC1B,OAAOgQ,EAAY9C,KAAKjU,KAAM,gBAAiB,CAAC+G,KAcpD/G,KAAKof,oBAAsB,SAASxS,EAAMyS,GACtC,OAAOtI,EAAY9C,KAAKjU,KAAM,sBAAuB,CAAC4M,EAAMyS,KAWhErf,KAAKsf,uBAAyB,WAC1B,OAAOvI,EAAY9C,KAAKjU,KAAM,2BAYlCA,KAAKuf,eAAiB,SAASxY,GAC3B,OAAOgQ,EAAY9C,KAAKjU,KAAM,iBAAkB,CAAC+G,KAYrD/G,KAAKwf,gBAAkB,SAASzY,GAC5B,OAAOgQ,EAAY9C,KAAKjU,KAAM,kBAAmB,CAAC+G,KAWtD/G,KAAKyf,KAAO,WACR,OAAO1I,EAAY9C,KAAKjU,KAAM,SAWlCA,KAAK0f,eAAiB,WAClB,OAAO3I,EAAY9C,KAAKjU,KAAM,mBAalCA,KAAK2f,WAAa,SAAS5Y,EAAM6Y,GAC7B,OAAO7I,EAAY9C,KAAKjU,KAAM,aAAc,CAAC+G,EAAM6Y,KAYvD5f,KAAK6f,YAAc,SAAS9Y,GACxB,OAAOgQ,EAAY9C,KAAKjU,KAAM,cAAe,CAAC+G,KAWlD/G,KAAK8f,yBAA2B,WAC5B,OAAO/I,EAAY9C,KAAKjU,KAAM,6BAkBlCA,KAAK+f,cAAgB,SAAS/Y,GAC1B,OAAO+P,EAAY9C,KAAKjU,KAAM,gBAAiB,CAACgH,KAkBpDhH,KAAKggB,iBAAmB,SAAShZ,GAC7B,OAAO+P,EAAY9C,KAAKjU,KAAM,mBAAoB,CAACgH,KAWvDhH,KAAKigB,wBAA0B,SAAS5Z,GACpC,OAAO0Q,EAAY9C,KAAKjU,KAAM,0BAA2B,CAACqG,KAW9DrG,KAAKkgB,wBAA0B,WAC3B,OAAOnJ,EAAY9C,KAAKjU,KAAM,4BAYlCA,KAAKmgB,qBAAuB,SAASC,GACjC,OAAOrJ,EAAY9C,KAAKjU,KAAM,uBAAwB,CAACogB,KAa3DpgB,KAAKqgB,eAAiB,SAAS1H,EAAMC,GACjC,OAAO7B,EAAY9C,KAAKjU,KAAM,iBAAkB,CAAC2Y,EAAMC,KAa3D5Y,KAAKsgB,mBAAqB,SAASvZ,EAAMwZ,GACrC,OAAOxJ,EAAY9C,KAAKjU,KAAM,qBAAsB,CAAC+G,EAAMwZ,KAa/DvgB,KAAKwgB,eAAiB,SAASzZ,EAAMwZ,GACjC,OAAOxJ,EAAY9C,KAAKjU,KAAM,iBAAkB,CAAC+G,EAAMwZ,KAa3DvgB,KAAKygB,YAAc,SAASjJ,EAAMkJ,GAC9B,OAAO3J,EAAY9C,KAAKjU,KAAM,cAAe,CAACwX,EAAMkJ,KAWxD1gB,KAAK2gB,wBAA0B,WAC3B,OAAO5J,EAAY9C,KAAKjU,KAAM,4BAWlCA,KAAK4gB,uBAAyB,WAC1B,OAAO7J,EAAY9C,KAAKjU,KAAM,2BAYlCA,KAAK6gB,yBAA2B,SAAS9Z,GACrC,OAAOgQ,EAAY9C,KAAKjU,KAAM,2BAA4B,CAAC+G,UA9Z3D,GAAG/G,KAAK6e,aACJ,KAAM,mDC1ePiC,G,kDAr0BX,WAAYnhB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACT6Q,IAAK,KACLxJ,gBAAgB,EAChBC,gBAAgB,EAChBwJ,SAAS,EACThD,kBAAmB,OACnBU,QAAS,mBACTH,eAAgB,CACZC,cAAe,iBACfC,WAAY,kCAEhBtK,OAAQ,GACRgF,YAAa,GACbE,YAAa,GACbE,gBAAiB,GACjBN,QAAS,GACToB,YAAa,EACbmD,UAAW,GACX6T,WAAY,CACR5Z,eAAgB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtCK,QAAS,IAEblB,MAAO,CACHgD,eAAgB,IAChBC,mBAAoB,IACpBC,mBAAoB,IACpBC,gBAAiB,QACjBC,iBAAkB,IAClBG,KAAM,CACFC,QAAS,CACL,QAAW,CAACtE,IAAK,EAAGC,IAAK,KACzB,GAAM,CAACD,IAAK,EAAGC,IAAK,KACpB,EAAK,CAACD,IAAK,EAAGC,IAAK,IAEvBpD,QAAS,CACL,QAAW,CAACmD,KAAK,IAAcC,IAAK,KACpC,GAAM,CAACD,KAAK,IAAWC,IAAK,KAC5B,EAAK,CAACD,KAAM,EAAGC,IAAK,IAExB8G,UAAW,CAAE/G,IAAK,EAAGC,IAAK,KAC1B+G,KAAM,CACF,QAAW,CAAChH,KAAM,GAAIC,IAAK,IAC3B,QAAW,CAACD,KAAM,GAAIC,IAAK,KAC3B,EAAK,CAACD,IAAK,IAAKC,IAAK,QAIjCE,cAAe,CACXC,kBAAkB,EAClBG,iBAAiB,EACjBib,qBAAsB,IAE1B1f,MAAO,QAEX,EAAK2f,cAAgB,EACrB,EAAKC,WAAa,IAClB,EAAKC,wBAA0B,IAE/B,EAAKC,UAAY,CACbra,KAAM,CACFsa,YAAa,iBACbC,YAAa,iBACbC,SAAU,uBACVC,QAAS,UACTC,YAAa,gBACbC,YAAa,eACbC,SAAU,mBACVC,QAAS,WACTC,kBAAmB,iBACnBC,aAAc,gBAElBlV,KAAM,CACFyU,YAAa,CAACzU,KAAM,QAASgM,KAAM,GACnC0I,YAAa,CAAC1U,KAAM,QAASgM,KAAM,GACnC2I,SAAU,CAAC3U,KAAM,QAASgM,KAAM,GAChC4I,QAAS,CAAC5U,KAAM,QAASgM,KAAM,GAC/B6I,YAAa,CAAC7U,KAAM,QAASgM,KAAM,GACnC8I,YAAa,CAAC9U,KAAM,QAASgM,KAAM,GACnC+I,SAAU,CAAC/U,KAAM,QAASgM,KAAM,GAChCgJ,QAAS,CAAChV,KAAM,QAASgM,KAAM,GAC/BiJ,kBAAmB,CAACjV,KAAM,OAAQgM,KAAM,GACxCkJ,aAAc,CAAClV,KAAM,OAAQgM,KAAM,KAG3C,EAAKmJ,sBAAwB,EAE7B,EAAKlb,gBAAkB,CACnB,iBACA,eACA,YACA,WACA,eACA,gBACA,8BACA,gCAGJ,EAAKmb,gBAAkB3hB,IAAMoB,YAE7B,EAAKwgB,eAAiB,EAAKA,eAAejgB,KAApB,gBACtB,EAAKkgB,kBAAoB,EAAKA,kBAAkBlgB,KAAvB,gBACzB,EAAKmgB,gBAAkB,EAAKA,gBAAgBngB,KAArB,gBACvB,EAAKogB,cAAgB,EAAKA,cAAcpgB,KAAnB,gBACrB,EAAKqgB,aAAe,EAAKA,aAAargB,KAAlB,gBACpB,EAAKsgB,eAAiB,EAAKA,eAAetgB,KAApB,gBACtB,EAAK0N,WAAa,EAAKA,WAAW1N,KAAhB,gBAClB,EAAKugB,cAAgB,EAAKA,cAAcvgB,KAAnB,gBACrB,EAAKwgB,4BAA8B,EAAKA,4BAA4BxgB,KAAjC,gBA7GpB,E,uDAgHRyJ,GACE,OAANA,EACCzL,KAAK+L,UAAS,SAACsE,GAAD,MAAgB,CAAC/J,MAAM,2BAAK+J,EAAU/J,OAAhB,IAAuBiD,mBAAoB,OAAWkC,EAAEgX,OAAO,SACvF,OAANhX,GAAoB,MAANA,EACpBzL,KAAK+L,UAAS,SAACsE,GAAD,MAAgB,CAAC/J,MAAM,2BAAK+J,EAAU/J,OAAhB,IAAuBiD,mBAAoBkC,QACnE,OAANA,EACNzL,KAAK+L,UAAS,SAACsE,GAAD,MAAgB,CAAC/J,MAAM,2BAAK+J,EAAU/J,OAAhB,IAAuBkD,mBAAoB,OAAWiC,EAAEgX,OAAO,SACtF,OAANhX,GAAoB,MAANA,EACrBzL,KAAK+L,UAAS,SAACsE,GAAD,MAAgB,CAAC/J,MAAM,2BAAK+J,EAAU/J,OAAhB,IAAuBkD,mBAAoBiC,QACnE,MAANA,GAAmB,MAANA,EACnBzL,KAAK+L,UAAS,SAACsE,GAAD,MAAgB,CAAC/J,MAAM,2BAAK+J,EAAU/J,OAAhB,IAAuBmD,gBAAiB,OAAWgC,QAC3E,MAANA,GACNzL,KAAK+L,UAAS,SAACsE,GAAD,MAAgB,CAAC/J,MAAM,2BAAK+J,EAAU/J,OAAhB,IAAuBmD,gBAAiBgC,U,sCAIpE1B,GACZ,IAAI0G,EAAMzQ,KAAKJ,MAAM6Q,IACjB4Q,EAAcrhB,KAAKohB,UAAUra,KAAKsa,YAClCC,EAActhB,KAAKohB,UAAUra,KAAKua,YAClCC,EAAWvhB,KAAKohB,UAAUra,KAAKwa,SAC/BC,EAAUxhB,KAAKohB,UAAUra,KAAKya,QAC9BC,EAAczhB,KAAKohB,UAAUra,KAAK0a,YAElCE,GADc3hB,KAAKohB,UAAUra,KAAK2a,YACvB1hB,KAAKohB,UAAUra,KAAK4a,UAC/BC,EAAU5hB,KAAKohB,UAAUra,KAAK6a,QAC9BC,EAAoB7hB,KAAKohB,UAAUra,KAAK8a,kBACxCC,EAAe9hB,KAAKohB,UAAUra,KAAK+a,aACnCY,EAAU,GACd1iB,KAAKkN,UAAY,GACjBlN,KAAK6D,OAAS,GACd7D,KAAK6I,YAAc,GACnB7I,KAAK+I,YAAc,GACnB/I,KAAKiJ,gBAAkB,GACvBjJ,KAAK2I,QAAU,GACf+Z,EAAQ7S,KAAR,MAAA6S,EAAgB,CACZjS,EAAI2J,eAAJ,aAAoBrT,KAAMsa,EAAa1I,KAAM0I,GAAgBrhB,KAAKohB,UAAUxU,KAAKyU,cACjF5Q,EAAI2J,eAAJ,aAAoBrT,KAAMua,EAAa3I,KAAM2I,GAAgBthB,KAAKohB,UAAUxU,KAAK0U,cACjF7Q,EAAI2J,eAAJ,aAAoBrT,KAAMwa,EAAU5I,KAAM4I,GAAavhB,KAAKohB,UAAUxU,KAAK2U,WAC3E9Q,EAAI2J,eAAJ,aAAoBrT,KAAMya,EAAS7I,KAAM6I,GAAYxhB,KAAKohB,UAAUxU,KAAK4U,YAE7E,IAAI,IAAImB,EAAiB,EAAGA,EAAiB,EAAGA,IAC5CD,EAAQ7S,KAAR,MAAA6S,EAAgB,CACZjS,EAAI2J,eAAJ,aAAqBrT,KAAM+a,EAAY,WAAOa,EAAP,KAA0BhK,KAAMmJ,EAAY,WAAOa,EAAP,MAA6B3iB,KAAKohB,UAAUxU,KAAKkV,iBAG5I,IAAI,IAAIhS,EAAY,EAAGA,EAAY/F,EAAa+F,IAC5C9P,KAAKkN,UAAU2C,KAAK,CAChBhM,OAAQ,GACRiG,QAAS,GACTyC,UAAW,GACXlK,QAAS,GACTmK,KAAM,GACN1J,IAAK,KAET4f,EAAQ7S,KAAR,MAAA6S,EAAgB,CACZjS,EAAI2J,eAAJ,aAAqBrT,KAAM0a,EAAW,WAAO3R,EAAP,KAAqB6I,KAAM8I,EAAW,WAAO3R,EAAP,MAAwB9P,KAAKohB,UAAUxU,KAAK6U,cACxHhR,EAAI2J,eAAJ,aAAqBrT,KAAM8a,EAAiB,WAAO/R,EAAP,KAAqB6I,KAAOkJ,EAAiB,WAAO/R,EAAP,MAAwB9P,KAAKohB,UAAUxU,KAAKiV,oBACrIpR,EAAI2J,eAAJ,aAAqBrT,KAAM4a,EAAQ,WAAO7R,EAAP,KAAqB6I,KAAMgJ,EAAQ,WAAO7R,EAAP,MAAwB9P,KAAKohB,UAAUxU,KAAK+U,WAClHlR,EAAI2J,eAAJ,aAAqBrT,KAAM6a,EAAO,WAAO9R,EAAP,KAAqB6I,KAAMiJ,EAAO,WAAO9R,EAAP,MAAwB9P,KAAKohB,UAAUxU,KAAKgV,YAGxH,OAAOxQ,QAAQ2E,IAAI2M,K,sCAGN,IAAD,OACRjS,EAAMzQ,KAAKJ,MAAM6Q,IACjB4Q,EAAcrhB,KAAKohB,UAAUra,KAAKsa,YAClCC,EAActhB,KAAKohB,UAAUra,KAAKua,YAClCC,EAAWvhB,KAAKohB,UAAUra,KAAKwa,SAC/BC,EAAUxhB,KAAKohB,UAAUra,KAAKya,QAC9BC,EAAczhB,KAAKohB,UAAUra,KAAK0a,YAElCE,GADc3hB,KAAKohB,UAAUra,KAAK2a,YACvB1hB,KAAKohB,UAAUra,KAAK4a,UAC/BC,EAAU5hB,KAAKohB,UAAUra,KAAK6a,QAC9BC,EAAoB7hB,KAAKohB,UAAUra,KAAK8a,kBACxCC,EAAe9hB,KAAKohB,UAAUra,KAAK+a,aACnCc,EAAW,GACfA,EAAS/S,KAAT,MAAA+S,EAAiB,CACbnS,EAAI+J,aAAa6G,GACjB5Q,EAAI+J,aAAa8G,GACjB7Q,EAAI+J,aAAa+G,GACjB9Q,EAAI+J,aAAagH,KAErB,IAAI,IAAImB,EAAiB,EAAGA,EAAiB,EAAGA,IAC5CC,EAAS/S,KAAT,MAAA+S,EAAiB,CACbnS,EAAI+J,aAAasH,EAAY,WAAOa,EAAP,QAGrC,IAAI,IAAI7S,EAAY,EAAGA,EAAY9P,KAAKJ,MAAMmK,YAAa+F,IACvD8S,EAAS/S,KAAT,MAAA+S,EAAiB,CACbnS,EAAI+J,aAAaiH,EAAW,WAAO3R,EAAP,MAC5BW,EAAI+J,aAAaqH,EAAiB,WAAO/R,EAAP,MAClCW,EAAI+J,aAAamH,EAAQ,WAAO7R,EAAP,MACzBW,EAAI+J,aAAaoH,EAAO,WAAO9R,EAAP,QAGhCsB,QAAQ2E,IAAI6M,GACPnO,MAAK,SAAChB,GAEH,IADA,IAAIoP,EAAmBpP,EAAOqP,MAAM,IAAOhc,KAAI,SAAA2E,GAAC,OAAIA,EAAE7H,QAC9CoD,EAAQ,EAAGA,EAAQ6b,EAAiBvd,OAAQ0B,GAAgB,EAAK+a,sBAAuB,CAE5F,IAAIle,EAAS,EAAKqJ,UAAUlG,EAAQ,EAAK+a,uBAAuBle,OAC5Dkf,EAAgB,EAAK7V,UAAUlG,EAAQ,EAAK+a,uBAAuBjY,QAEnEkZ,EAAkB,EAAK9V,UAAUlG,EAAQ,EAAK+a,uBAAuBxV,UACrE0W,EAAa,EAAK/V,UAAUlG,EAAQ,EAAK+a,uBAAuBvV,KAChE0W,EAAY,EAAKhW,UAAUlG,EAAQ,EAAK+a,uBAAuBjf,IAInE,OAHAe,EAAOgM,KAAK,EAAKoR,eAGV,EAAKrhB,MAAM0G,MAAMiD,oBACpB,IAAK,QACDwZ,EAAclT,KAAKkB,EAAc8R,EAAiB7b,KAClD,MACJ,IAAK,KACD+b,EAAclT,KAAKmB,EAAa6R,EAAiB7b,KACjD,MACJ,IAAK,IACD+b,EAAclT,KAAKgT,EAAiB7b,IAiB5C,OAFAgc,EAAgBnT,KAAKgT,EAAiB7b,EAAQ,IAEvC,EAAKpH,MAAM0G,MAAMmD,iBACpB,IAAK,QACDwZ,EAAWpT,KAAKgT,EAAiB7b,EAAQ,IACzC,MACJ,IAAK,QACDic,EAAWpT,KAAKoB,EAAoB4R,EAAiB7b,EAAQ,KAC7D,MACJ,IAAK,IACDic,EAAWpT,KAAKqB,EAAgB2R,EAAiB7b,EAAQ,KAIjEkc,EAAUrT,KAAKgT,EAAiB7b,EAAQ,IACrC+b,EAAczd,OAAS,EAAK6b,0BAC3Btd,EAAOsf,OAAO,EAAGtf,EAAOyB,OAAS,EAAK6b,yBACtC4B,EAAcI,OAAO,EAAGJ,EAAczd,OAAS,EAAK6b,yBAEpD6B,EAAgBG,OAAO,EAAGH,EAAgB1d,OAAS,EAAK6b,yBACxD8B,EAAWE,OAAO,EAAGF,EAAW3d,OAAS,EAAK6b,yBAC9C+B,EAAUC,OAAO,EAAGD,EAAU5d,OAAS,EAAK6b,0BAKpD,OAAO,EAAKvhB,MAAM0G,MAAMiD,oBACpB,IAAK,QACD,EAAKV,YAAYgH,KAAKkB,EAAc0C,EAAO,GAAG7P,OAC9C,MACJ,IAAK,KACD,EAAKiF,YAAYgH,KAAKmB,EAAayC,EAAO,GAAG7P,OAC7C,MACJ,IAAK,IACD,EAAKiF,YAAYgH,KAAK4D,EAAO,GAAG7P,MAIxC,OAAO,EAAKhE,MAAM0G,MAAMkD,oBACpB,IAAK,QACD,EAAKT,YAAY8G,KAAKkB,EAAc0C,EAAO,GAAG7P,OAC9C,MACJ,IAAK,KACD,EAAKmF,YAAY8G,KAAKmB,EAAayC,EAAO,GAAG7P,OAC7C,MACJ,IAAK,IACD,EAAKmF,YAAY8G,KAAK4D,EAAO,GAAG7P,MAIxC,OAAO,EAAKhE,MAAM0G,MAAMmD,iBACpB,IAAK,QACD,EAAKR,gBAAgB4G,KAAK4D,EAAO,GAAG7P,MACpC,MACJ,IAAK,QACD,EAAKqF,gBAAgB4G,KAAKoB,EAAoBwC,EAAO,GAAG7P,OACxD,MACJ,IAAK,IACD,EAAKqF,gBAAgB4G,KAAKqB,EAAgBuC,EAAO,GAAG7P,OAI5D,EAAK+E,QAAQkH,KAAK4D,EAAO,GAAG7P,MAC5B,EAAKC,OAAOgM,KAAK,EAAKoR,eACnB,EAAKpY,YAAYvD,OAAS,EAAK6b,0BAC9B,EAAKtY,YAAYsa,OAAO,EAAG,EAAKta,YAAYvD,OAAS,EAAK6b,yBAC1D,EAAKpY,YAAYoa,OAAO,EAAG,EAAKpa,YAAYzD,OAAS,EAAK6b,yBAC1D,EAAKlY,gBAAgBka,OAAO,EAAG,EAAKla,gBAAgB3D,OAAS,EAAK6b,yBAClE,EAAKxY,QAAQwa,OAAO,EAAG,EAAKxa,QAAQrD,OAAS,EAAK6b,yBAClD,EAAKtd,OAAOsf,OAAO,EAAG,EAAKtf,OAAOyB,OAAS,EAAK6b,0BAEpD,EAAKpV,UAAS,SAACsE,GAAD,MAAgB,CAC1BxM,OAAQ,EAAKA,OACbgF,YAAa,EAAKA,YAClBE,YAAa,EAAKA,YAClBE,gBAAiB,EAAKA,gBACtBN,QAAS,EAAKA,QACduE,UAAW,EAAKA,UAChB6T,WAAY,EAAKwB,cAAclS,EAAWoD,OAE9C,EAAKwN,gBACL,EAAKmC,gBAAkBC,WAAW,EAAKjB,cAAe,EAAKlB,eAE9DvM,OAAM,SAACmB,GACJxC,QAAQC,IAAIuC,GACZ7F,IAAM8C,MAAM,kCACZuQ,aAAa,EAAKF,iBAClB,EAAKrX,UAAS,iBAAO,CAAC9E,gBAAgB,MACtC,EAAKub,mC,oCAIHnS,EAAWoD,GAAS,IAAD,OACzB8P,EAAO,IAAIC,KACXC,GAAaF,EAAKG,WAAa,GAAK,IAAM,IAAMH,EAAKG,WAAa,KAAOH,EAAKI,aAAe,GAAK,IAAM,IAAMJ,EAAKI,aAAe,KAAOJ,EAAKK,aAAe,GAAK,IAAM,IAAML,EAAKK,aACnLC,EAAgB,YAAI9W,MAAM,GAAGC,QAAQlG,KAAI,SAAAgd,GAAI,OAAIA,EAAO,KAAGhd,KAAI,SAAAid,GAAC,OAAItQ,EAAOsQ,GAAGngB,QAC9EogB,EAAgB3T,EAAU0Q,WAAW5Z,eAAeL,KAAI,SAACmd,EAAWjd,GACpE,OAAGid,IAAcJ,EAAc7c,GACpB,EAEA,KAGXkd,EAAmB,GAWvB,OAVAF,EAAclS,SAAQ,SAACqS,EAAQnd,GACxBmd,GACCD,EAAiBrU,KAAK,CAClBtH,KAAMkb,EACNW,KAAM/T,EAAU0Q,WAAW5Z,eAAeH,GAC1CsB,GAAIub,EAAc7c,GAClBD,KAAM,EAAKF,gBAAgBG,QAIhC,CACHG,eAAgB0c,EAChBrc,QAAQ,GAAD,mBAAM6I,EAAU0Q,WAAWvZ,SAAY0c,M,qCAIvCG,GACXrkB,KAAKkN,UAAY,GACjB,IAAI,IAAI4C,EAAY,EAAGA,EAAYuU,EAAgBvU,IAC/C9P,KAAKkN,UAAU2C,KAAK,CAChBhM,OAAQ,GACRiG,QAAS,GACTyC,UAAW,GACXlK,QAAS,GACTmK,KAAM,GACN1J,IAAK,O,qCAMb,IADY,IAAD,OACHgN,EAAY,EAAGA,EAAY9P,KAAKJ,MAAMmK,YAAa+F,IAAa,CACpE,IAAIsR,EAAY,CACZkD,YAA6C,KAA/B,EAAAniB,KAAKoiB,SAAqB,GACxCC,YAA6C,KAA/B,EAAAriB,KAAKoiB,SAAqB,GACxCE,SAAU,IAAAtiB,KAAKoiB,SAAsB,GAIrCG,QAASviB,KAAKoiB,SACdI,cAAexiB,KAAKyiB,MAAMziB,KAAKoiB,WAGnC,OAAOvkB,KAAKJ,MAAM0G,MAAMiD,oBACpB,IAAK,QACD6X,EAAUkD,YAAclD,EAAUkD,YAClC,MACJ,IAAK,KACDlD,EAAUkD,YAAc3T,EAAYyQ,EAAUkD,aAC9C,MACJ,IAAK,IACDlD,EAAUkD,YAAc1T,EAAcwQ,EAAUkD,aAIxD,OAAOtkB,KAAKJ,MAAM0G,MAAMkD,oBACpB,IAAK,QACD4X,EAAUoD,YAAc3T,EAAYuQ,EAAUoD,aAC9C,MACJ,IAAK,KACDpD,EAAUoD,YAAcpD,EAAUoD,YAClC,MACJ,IAAK,IACDpD,EAAUoD,YAAc1T,EAAasQ,EAAUoD,aAIvD,OAAOxkB,KAAKJ,MAAM0G,MAAMmD,iBACpB,IAAK,QACD2X,EAAUqD,SAAWrD,EAAUqD,SAC/B,MACJ,IAAK,QACDrD,EAAUqD,SAAWxT,EAAoBmQ,EAAUqD,UACnD,MACJ,IAAK,IACDrD,EAAUqD,SAAWvT,EAAgBkQ,EAAUqD,UAGvDzkB,KAAKkN,UAAU4C,GAAWjM,OAAOgM,KAAK7P,KAAKihB,eAC3CjhB,KAAKkN,UAAU4C,GAAWhG,QAAQ+F,KAAKuR,EAAUkD,aACjDtkB,KAAKkN,UAAU4C,GAAWzN,QAAQwN,KAAKuR,EAAUoD,aACjDxkB,KAAKkN,UAAU4C,GAAWvD,UAAUsD,KAAKuR,EAAUuD,eACnD3kB,KAAKkN,UAAU4C,GAAWtD,KAAKqD,KAAKuR,EAAUqD,UAC9CzkB,KAAKkN,UAAU4C,GAAWhN,IAAI+M,KAAKuR,EAAUsD,SAE1C1kB,KAAKkN,UAAU4C,GAAWjM,OAAOyB,OAAStF,KAAKmhB,0BAC9CnhB,KAAKkN,UAAU4C,GAAWjM,OAAOsf,OAAO,EAAGnjB,KAAKkN,UAAU4C,GAAWjM,OAAOyB,OAAStF,KAAKmhB,yBAC1FnhB,KAAKkN,UAAU4C,GAAWhG,QAAQqZ,OAAO,EAAGnjB,KAAKkN,UAAU4C,GAAWhG,QAAQxE,OAAStF,KAAKmhB,yBAC5FnhB,KAAKkN,UAAU4C,GAAWzN,QAAQ8gB,OAAO,EAAGnjB,KAAKkN,UAAU4C,GAAWzN,QAAQiD,OAAStF,KAAKmhB,yBAC5FnhB,KAAKkN,UAAU4C,GAAWvD,UAAU4W,OAAO,EAAGnjB,KAAKkN,UAAU4C,GAAWvD,UAAUjH,OAAStF,KAAKmhB,yBAChGnhB,KAAKkN,UAAU4C,GAAWtD,KAAK2W,OAAO,EAAGnjB,KAAKkN,UAAU4C,GAAWtD,KAAKlH,OAAStF,KAAKmhB,yBACtFnhB,KAAKkN,UAAU4C,GAAWhN,IAAIqgB,OAAO,EAAGnjB,KAAKkN,UAAU4C,GAAWhN,IAAIwC,OAAStF,KAAKmhB,0BAK5F,OAAOnhB,KAAKJ,MAAM0G,MAAMiD,oBACpB,IAAK,QACDvJ,KAAK6I,YAAYgH,KAAqC,KAA/B,EAAA1N,KAAKoiB,SAAqB,IACjD,MACJ,IAAK,KACDvkB,KAAK6I,YAAYgH,KAAKc,EAA4C,KAA/B,EAAAxO,KAAKoiB,SAAqB,KAC7D,MACJ,IAAK,IACDvkB,KAAK6I,YAAYgH,KAAKe,EAA8C,KAA/B,EAAAzO,KAAKoiB,SAAqB,KAIvE,OAAOvkB,KAAKJ,MAAM0G,MAAMkD,oBACpB,IAAK,QACDxJ,KAAK+I,YAAY8G,KAAKgB,EAA4C,KAA/B,EAAA1O,KAAKoiB,SAAqB,KAC7D,MACJ,IAAK,KACDvkB,KAAK+I,YAAY8G,KAAqC,KAA/B,EAAA1N,KAAKoiB,SAAqB,IACjD,MACJ,IAAK,IACDvkB,KAAK+I,YAAY8G,KAAKiB,EAA6C,KAA/B,EAAA3O,KAAKoiB,SAAqB,KAItE,OAAOvkB,KAAKJ,MAAM0G,MAAMmD,iBACpB,IAAK,QACDzJ,KAAKiJ,gBAAgB4G,KAAK,IAAA1N,KAAKoiB,SAAsB,IACrD,MACJ,IAAK,QACDvkB,KAAKiJ,gBAAgB4G,KAAKoB,EAAoB,IAAA9O,KAAKoiB,SAAsB,KACzE,MACJ,IAAK,IACDvkB,KAAKiJ,gBAAgB4G,KAAKqB,EAAgB,IAAA/O,KAAKoiB,SAAsB,KAI7EvkB,KAAK2I,QAAQkH,KAAK1N,KAAKoiB,UACvBvkB,KAAK6D,OAAOgM,KAAK7P,KAAKihB,eACnBjhB,KAAK6I,YAAYvD,OAAStF,KAAKmhB,0BAC9BnhB,KAAK6I,YAAYsa,OAAO,EAAGnjB,KAAK6I,YAAYvD,OAAStF,KAAKmhB,yBAC1DnhB,KAAK+I,YAAYoa,OAAO,EAAGnjB,KAAK+I,YAAYzD,OAAStF,KAAKmhB,yBAC1DnhB,KAAKiJ,gBAAgBka,OAAO,EAAGnjB,KAAKiJ,gBAAgB3D,OAAStF,KAAKmhB,yBAClEnhB,KAAK2I,QAAQwa,OAAO,EAAGnjB,KAAK2I,QAAQrD,OAAStF,KAAKmhB,yBAClDnhB,KAAK6D,OAAOsf,OAAO,EAAGnjB,KAAK6D,OAAOyB,OAAStF,KAAKmhB,0BAEpDnhB,KAAK+L,UAAS,SAACsE,GAAD,MAAgB,CAC1BxM,OAAQ,EAAKA,OACbgF,YAAa,EAAKA,YAClBE,YAAa,EAAKA,YAClBE,gBAAiB,EAAKA,gBACtBN,QAAS,EAAKA,QACduE,UAAW,EAAKA,UAChB6T,WAAY,EAAKwB,cAAclS,EAAW,YAAItD,MAAM,IAAIC,QAAQlG,KAAI,SAAAgd,GAAI,OAAa,IAATA,EAAa,CAAClgB,KAAMzB,KAAKyiB,MAAMziB,KAAKoiB,WAAa,CAAC3gB,KAAM,WAExI5D,KAAKihB,gBACLjhB,KAAK6kB,oBAAsBxB,WAAWrjB,KAAKqiB,aAAc,O,0CAGxC,IAAD,OACZ5R,EAAMzQ,KAAKJ,MAAM6Q,IACrB6S,aAAatjB,KAAKojB,iBAClB3S,EAAIyH,WACCzD,MAAK,WACFxE,IAAMiH,QAAQ,kBACd,EAAKnL,UAAS,iBAAO,CAAC9E,gBAAgB,EAAOwJ,IAAK,SAClD,EAAK+R,iCAER7N,OAAM,WACH1E,IAAM8C,MAAM,4C,qCAIT7O,GAAU,IAAD,OACpB,IAAGlE,KAAKJ,MAAM8Q,QAId,GAAG1Q,KAAKJ,MAAMsH,eACV+I,IAAM8C,MAAM,0DADhB,CAKA,IAAI+R,GAAoB,OAAP5gB,QAAO,IAAPA,OAAA,EAAAA,EAAS4gB,aAAc9kB,KAAKJ,MAAMqO,eAAeC,cAC9DC,GAAoB,OAAPjK,QAAO,IAAPA,OAAA,EAAAA,EAASiK,aAAcnO,KAAKJ,MAAMqO,eAAeE,WA2ElEnO,KAAKJ,MAAM6Q,IAAM,IAAI+F,GAAIsO,GAzEN,WACf,IAAIrU,EAAM,EAAK7Q,MAAM6Q,IAGe,YAAjC,EAAK7Q,MAAM8N,kBACV+C,EAAIwH,UAAU,UACTxD,MAAK,WACFxE,IAAMiH,QAAQ,4BACd,EAAK+J,cAAgB,EACrB,EAAKpd,OAAS,GACd,EAAKqJ,UAAY,GACjB,EAAKrE,YAAc,GACnB,EAAKE,YAAc,GACnB,EAAKE,gBAAkB,GACvB,EAAKN,QAAU,GACf,IAAI,IAAImH,EAAY,EAAGA,EAAY,EAAKlQ,MAAMmK,YAAa+F,IACvD,EAAK5C,UAAU2C,KAAK,CAChBhM,OAAQ,GACRiG,QAAS,GACTyC,UAAW,GACXlK,QAAS,GACTmK,KAAM,GACN1J,IAAK,KAGb,EAAKsf,gBACL,EAAKrW,UAAS,iBAAO,CAAC9E,gBAAgB,EAAMyJ,SAAS,SAG7DD,EAAIwH,UAAU9J,GACTsG,KAAKhE,EAAI2H,iBACT3D,MAAK,SAACwC,GACH,IAAqB,IAAlBA,EAASrT,KACR,OAAO6M,EAAI4H,uBAEX,MAAM,IAAI9F,MAAM,0BAGvBkC,MAAK,SAACwC,GAEH,OAAOxG,EAAIoJ,QAAQ,EAAKja,MAAMwO,YAGjCqG,MAAK,WACFxE,IAAMiH,QAAQ,4BACd,EAAKiL,gBAAgB,EAAKviB,MAAMmK,aAC3B0K,MAAK,WACF,EAAKwM,cAAgB,EACrB,EAAKmB,gBACL,EAAKrW,UAAS,iBAAO,CAAC9E,gBAAgB,EAAMyJ,SAAS,YAGhEiE,OAAM,SAAC5B,GACJO,QAAQC,IAAIR,GACZ9C,IAAM8C,MAAM,4DACZ,EAAKhH,UAAS,iBAAO,CAAC2E,SAAS,YAK9B,WACbT,IAAM8C,MAAM,uBACZuQ,aAAa,EAAKF,iBAClB,EAAKrX,UAAS,iBAAO,CAAC9E,gBAAgB,EAAOyJ,SAAS,SAGzC,WACbT,IAAM8C,MAAM,iDACZuQ,aAAa,EAAKF,iBAClB,EAAKrX,UAAS,iBAAO,CAAC9E,gBAAgB,EAAOyJ,SAAS,SAK1D1Q,KAAK+L,UAAS,iBAAO,CAAC2E,SAAS,S,oDAGJ,IAAD,QACM,SAA5BqU,IACA,IAAiC,IAA9B,EAAKnlB,MAAMqH,eACV,IAUI+d,EAAiB,IAAIxO,GAAI,mBAVZ,WACbwO,EAAe7M,iBACV1D,MAAK,SAACwC,IACkB,IAAlBA,EAASrT,KACR,EAAKqe,iBAELoB,WAAW0B,EAA2B,WAO9DA,K,0CAKAE,OAAOC,EAAE,2BAA2BC,UAEpCnlB,KAAKwiB,gC,6CAILc,aAAatjB,KAAKojB,iBAClBE,aAAatjB,KAAK6kB,uB,+BAGZ,IAAD,OACL,OACI,kBAAC,IAAM/kB,SAAP,KACI,yBAAKG,UAAU,gBACX,yBAAKA,UAAU,mBACX,yBAAKF,GAAG,iBAAiBE,UAAU,QAE/B,yBAAKF,GAAG,mBAAmBE,UAAU,OACjC,yBAAKA,UAAU,aAEX,yBAAKA,UAAU,OACX,wBAAIA,UAAU,QAAd,6BAAiDD,KAAKJ,MAAMsH,eAAiB,qBAAuB,KAGxG,yBAAKjH,UAAU,OACX,kBAAC,EAAD,CAAciB,KAAK,YAAYrB,OAAO,OAAOe,SAAS,uBAAuBK,KAAK,gBAAgBP,UAAU,IAC5G,kBAAC,EAAD,CAAcD,UAAWT,KAAKgiB,gBAAiB9gB,KAAK,aAAaN,SAAS,uBAAuBK,KAAK,aAAaP,UAAU,IAC7H,kBAAC,EAAD,CAAcQ,KAAK,WAAWN,SAAS,sBAAsBK,KAAK,cAAcP,UAAU,IAC1F,kBAAC,EAAD,CAAcQ,KAAK,uBAAuBN,SAAS,uBAAuBK,KAAK,cAAcP,UAAU,IAEvG,uBAAGT,UAAU,8CAA8CqC,MAAO,CAACS,SAAS,WAAYqiB,MAAO,QAAStkB,KAAK,SACzGO,QAASrB,KAAKJ,MAAMqH,eAAiBjH,KAAKkiB,kBAAoBliB,KAAKiiB,iBAC5B,IAA9BjiB,KAAKJ,MAAMqH,iBAAmD,IAAvBjH,KAAKJ,MAAM8Q,SAC/C,kBAAC,IAAM5Q,SAAP,KACA,0BAAMG,UAAU,oBAAoBqC,MAAO,CAAClB,MAAO,SAAUkC,OAAQ,UAAWxC,KAAK,SAASiH,cAAY,SAD1G,eAK2B,IAA9B/H,KAAKJ,MAAMqH,iBAAkD,IAAvBjH,KAAKJ,MAAM8Q,SAC9C,kBAAC,IAAM5Q,SAAP,KACI,uBAAGG,UAAU,sBAAsBqC,MAAO,CAAClB,MAAO,SAAUkC,OAAQ,YADxE,eAK2B,IAA9BtD,KAAKJ,MAAMqH,iBAAmD,IAAvBjH,KAAKJ,MAAM8Q,SAC/C,kBAAC,IAAM5Q,SAAP,KACI,uBAAGG,UAAU,sBAAsBqC,MAAO,CAAClB,MAAO,SAAUkC,OAAQ,YADxE,eAY5B,kBAAC,EAAD,CAAkBzD,OAAO,OAAOE,GAAG,sBAAsBI,WAAW,mBAChE,kBAAC,EAAD,CACI4J,YAAa/J,KAAKJ,MAAMmK,YACxBnG,KAAM,CACFC,OAAQ7D,KAAKJ,MAAMiE,OACnBgF,YAAa7I,KAAKJ,MAAMiJ,YACxBE,YAAa/I,KAAKJ,MAAMmJ,YACxBE,gBAAiBjJ,KAAKJ,MAAMqJ,gBAC5BN,QAAS3I,KAAKJ,MAAM+I,SAExB9B,gBAAiB7G,KAAK6G,gBACtBM,eAAgBnH,KAAKJ,MAAMmhB,WAAW5Z,eACtC6C,kBAAmBhK,KAAKJ,MAAMmhB,WAAWvZ,QACzC2B,kBAAmB,WACf,EAAK6Y,gBAAgB3f,QAAQgjB,SAEjCpe,eAAgBjH,KAAKJ,MAAMqH,eAC3BC,eAAgBlH,KAAKJ,MAAMsH,eAC3BZ,MAAOtG,KAAKJ,MAAM0G,MAClBhF,MAAOtB,KAAKJ,MAAM0B,MAClBqE,cAAe3F,KAAKJ,MAAM+F,iBAIlC,kBAAC,EAAD,CAAkB5F,GAAG,sBAAsBI,WAAW,mBAClD,kBAAC,EAAD,CAAa4J,YAAa/J,KAAKJ,MAAMmK,YACjCmD,UAAWlN,KAAKJ,MAAMsN,UACtB+T,cAAejhB,KAAKihB,cACpBc,sBAAuB/hB,KAAK+hB,sBAC5Bzb,MAAOtG,KAAKJ,MAAM0G,MAClBhF,MAAOtB,KAAKJ,MAAM0B,MAClBqE,cAAe3F,KAAKJ,MAAM+F,iBAGlC,kBAAC,EAAD,CAAkB5F,GAAG,qBAAqBI,WAAW,mBACjD,kBAAC,EAAD,CAAS4J,YAAa/J,KAAKJ,MAAMmK,YAC7BmD,UAAWlN,KAAKJ,MAAMsN,UACtB5G,MAAOtG,KAAKJ,MAAM0G,MAClBhF,MAAOtB,KAAKJ,MAAM0B,SAG1B,kBAAC,EAAD,CAAkBvB,GAAG,sBAAsBI,WAAW,mBAClD,kBAAC,EAAD,CACI8G,eAAgBjH,KAAKJ,MAAMqH,eAC3BC,eAAgBlH,KAAKJ,MAAMsH,eAC3B+G,eAAgBjO,KAAKJ,MAAMqO,eAC3BI,qBAAsB,SAACnK,GACnB,EAAK6H,UAAS,iBAAO,CACjBkC,eAAgB,CACZC,cAAehK,EAAQgK,eAAiB,EAAKtO,MAAMqO,eAAeC,cAClEC,WAAYjK,EAAQiK,YAAc,EAAKvO,MAAMqO,eAAeE,iBAIxEI,4BAA6B,SAAC+W,GAC1B,EAAKvZ,UAAS,iBAAO,CACjB2B,kBAAmB4X,OAG3BlX,QAASpO,KAAKJ,MAAMwO,QACpBE,cAAe,SAACiX,GACZ,EAAKxZ,UAAS,iBAAO,CACjBqC,QAASmX,OAGjBxW,oBAAqB,WACjB,EAAKhD,UAAS,SAACsE,GAAD,MAAgB,CAC1B1K,cAAc,2BACP0K,EAAU1K,eADJ,IAETC,kBAAmByK,EAAU1K,cAAcC,wBAIvDoJ,mBAAoB,WAChB,EAAKjD,UAAS,SAACsE,GAAD,MAAgB,CAC1B1K,cAAc,2BACP0K,EAAU1K,eADJ,IAETI,iBAAkBsK,EAAU1K,cAAcI,uBAItDyf,6BAA8B,SAACC,GAC3B,EAAK1Z,UAAS,SAACsE,GAAD,MAAgB,CAC1B1K,cAAc,2BACP0K,EAAU1K,eADJ,IAETqb,qBAAsByE,SAIlC7V,kBAAmB,SAACyU,GAChBpU,IAAMC,KAAK,4BAA8BmU,EAAgB,CAAClU,UAAW,MAClE,EAAKvQ,MAAM6Q,IACV,EAAK0R,gBAAgBkC,GACpB5P,MAAK,WACF,EAAK1I,UAAS,iBAAO,CAAChC,YAAasa,UAGvC,EAAK/B,eAAe+B,GACpB,EAAKtY,UAAS,iBAAO,CAAChC,YAAasa,QAG3Cta,YAAa/J,KAAKJ,MAAMmK,YACxBmD,UAAWlN,KAAKJ,MAAMsN,UACtBtJ,KAAM,CACFC,OAAQ7D,KAAKJ,MAAMiE,OACnBgF,YAAa7I,KAAKJ,MAAMiJ,YACxBE,YAAa/I,KAAKJ,MAAMmJ,YACxBE,gBAAiBjJ,KAAKJ,MAAMqJ,gBAC5BN,QAAS3I,KAAKJ,MAAM+I,SAExB2H,gBAAiB,WACb,EAAKzM,OAAS,GACd,EAAKqJ,UAAY,GACjB,EAAKrE,YAAc,GACnB,EAAKE,YAAc,GACnB,EAAKE,gBAAkB,GACvB,EAAKN,QAAU,GACf,EAAKsY,cAAgB,GACY,IAA9B,EAAKrhB,MAAMsH,gBACV,EAAKob,eAAe,EAAK1iB,MAAMmK,aAC/B,EAAKsY,eACLpS,IAAMC,KAAK,0BAA2B,CAACC,UAAW,QAElDmT,aAAa,EAAKuB,qBAClB5U,IAAMC,KAAK,2BAA4B,CAACC,UAAW,OAEvD,EAAKpE,UAAS,SAACsE,GAAD,MAAgB,CAACnJ,gBAAiBmJ,EAAUnJ,oBAE9DwI,WAAY1P,KAAK0P,WACjBpJ,MAAOtG,KAAKJ,MAAM0G,MAClBhF,MAAOtB,KAAKJ,MAAM0B,MAClBkP,uBAAwB,SAACkV,GACrB,EAAK3Z,UAAS,iBAAO,CAACzK,MAAOokB,YAOjD,yBAAKzlB,UAAU,OACX,yBAAKA,UAAU,8BAAf,mBAKR,kBAAC,IAAD,W,GAh0BEI,IAAMC,WClCJ+R,QACW,cAA7B4S,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEF5a,SAAS6a,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3R,MAAK,SAAA4R,GACJA,EAAaC,gBAEd3R,OAAM,SAAA5B,GACLO,QAAQP,MAAMA,EAAMX,a","file":"static/js/main.ed484f37.chunk.js","sourcesContent":["/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           ContentContainer.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass ContentContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        active: this.props.active || false\r\n    };\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div id={this.props.id} className={\"row collapse\" + (this.state.active == \"true\" ? \" show\" : \"\")} \r\n                 data-parent={this.props.dataParent}>\r\n                <div className=\"col-lg-12 mt-1\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ContentContainer;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           HeaderButton.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport \"../../css/buttons.css\"\r\n\r\nclass HeaderButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        active: this.props.active || false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <a ref={this.props.buttonRef} className={\"btn btn-large ml-3 white-text-button\" + (this.state.active == \"true\" ? \" btn-primary\" : \" btn-primary\") + (this.props.disabled === true ? \" disabled\" : \"\")} \r\n                href={this.props.controls} aria-controls={this.props.controls}\r\n                role=\"button\" data-toggle=\"collapse\" aria-expanded={this.state.active}>\r\n            <i className={this.props.icon}></i> {this.props.text}</a>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default HeaderButton;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           CardBoxContainer.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass CardBoxContainer extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className={this.props.width + \" mx-auto\"} onClick={this.props.onClick}>\r\n                <div className={\"box shadow mt-3\" + (this.props.theme === \"light\" ? \" light-background\" : \"\")}>\r\n                        {this.props.children}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default CardBoxContainer;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           Battery.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport \"../../../css/styled-battery.css\"\r\n\r\nclass Battery extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //refs for the battery animation state\r\n    this.battery = React.createRef();\r\n    this.liquid = React.createRef();\r\n    this.liquidSvgAnimation = React.createRef();\r\n    this.batteryText = React.createRef();\r\n    this.batteryTextPercentage = React.createRef();\r\n    this.batteryTextUnits = React.createRef();\r\n\r\n    this.updateBattery = this.updateBattery.bind(this);\r\n  }\r\n\r\n  updateBattery(batterySoc) {\r\n    let level = Math.trunc(batterySoc * 100)\r\n    if(level < 20) {\r\n        this.liquidSvgAnimation.current.style.fill = \"red\"\r\n        this.battery.current.style.backgroundImage = \"linear-gradient(red 50%, #444 0%)\"\r\n    } else if(level < 50) {\r\n        this.liquidSvgAnimation.current.style.fill = \"yellow\"\r\n        this.battery.current.style.backgroundImage = \"linear-gradient(yellow 50%, #444 0%)\"\r\n    } else if(level < 75) {\r\n        this.liquidSvgAnimation.current.style.fill = \"chartreuse\"\r\n        this.battery.current.style.backgroundImage = \"linear-gradient(chartreuse 50%, #444 0%)\"\r\n    } else {\r\n        this.liquidSvgAnimation.current.style.fill = \"green\"\r\n        this.battery.current.style.backgroundImage = \"linear-gradient(green 50%, #444 0%)\"\r\n    }\r\n\r\n    this.battery.current.style.backgroundPosition = '0 -' + (100 - level) + '%';\r\n    this.batteryText.current.style.backgroundPosition = '0 -' + (100 - level) + '%';\r\n    this.liquid.current.style.top = (100 - level) + '%';\r\n    if(level === 100) {\r\n        this.liquid.current.style.backgroundColor = 'green';\r\n    } else {\r\n        this.liquid.current.style.backgroundColor = '#444';\r\n    }\r\n    this.batteryTextPercentage.current.innerText = (batterySoc * 100).toFixed(1);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n      if(this.props.soc) {\r\n        this.updateBattery(this.props.soc)\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n                \r\n            <div id={this.props.id || \"\"} style={{position: \"absolute\", ...this.props.positionStyle}}>\r\n                <div ref={this.battery} className=\"battery onscreen\" style={{...this.props.sizeStyle}}>\r\n                    <div ref={this.liquid} className=\"liquid liquid-bg-color\">\r\n                        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" width=\"300px\" height=\"5px\" viewBox=\"0 0 300 5\" enableBackground=\"new 0 0 300 5\">\r\n                            <path ref={this.liquidSvgAnimation} className=\"wave\" d=\"M300,300V2.5c0,0-0.6-0.1-1.1-0.1c0,0-25.5-2.3-40.5-2.4c-15,0-40.6,2.4-40.6,2.4\r\n                            c-12.3,1.1-30.3,1.8-31.9,1.9c-2-0.1-19.7-0.8-32-1.9c0,0-25.8-2.3-40.8-2.4c-15,0-40.8,2.4-40.8,2.4c-12.3,1.1-30.4,1.8-32,1.9\r\n                            c-2-0.1-20-0.8-32.2-1.9c0,0-3.1-0.3-8.1-0.7V300H300z\" />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div ref={this.batteryText} className=\"battery-text onscreen\">\r\n                    { this.props.isCharging && <span className=\"isChargingIndicator\"><i className=\"fa fa-bolt\"></i></span>}\r\n                    <span ref={this.batteryTextPercentage} className=\"percentage\"></span><small ref={this.batteryTextUnits} className=\"units\">%</small>\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Battery;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           Graph.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nclass Graph extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    }\r\n    this.data = {\r\n        labels: [],\r\n        datasets: [{\r\n            data: [],\r\n            borderColor: \"#008FFB\",\r\n            pointRadius: 0,\r\n            fill: false,\r\n            borderWidth: 4\r\n        }]\r\n    }\r\n    this.options = {\r\n        animation: {\r\n            duration: 1500,\r\n            easing: \"linear\"\r\n        },\r\n        tooltips: {\r\n            enabled: false\r\n        },\r\n        legend: {\r\n            display: false\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                gridLines: {\r\n                    color: \"#90A4AE\",\r\n                },\r\n                ticks: {\r\n                    fontColor: \"white\",\r\n                    beginAtZero: true\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                gridLines: {\r\n                    color: \"#90A4AE\",\r\n                    zeroLineColor: \"#90A4AE\"\r\n                },\r\n                ticks: {\r\n                    fontColor: \"white\"\r\n                }   \r\n            }]\r\n        },\r\n        maintainAspectRatio: false\r\n    }\r\n    this.chartReference = React.createRef();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let numberOfPoints = this.props.data.labels?.length\r\n    if(numberOfPoints >= 12) {\r\n        this.chartReference.current.chartInstance.options.scales.xAxes[0].ticks.min = this.props.data.labels[numberOfPoints - 1] - 9\r\n        this.chartReference.current.chartInstance.options.scales.xAxes[0].ticks.max = this.props.data.labels[numberOfPoints - 1] - 1\r\n    }\r\n    this.chartReference.current.chartInstance.data.labels = this.props.data.labels;\r\n    this.chartReference.current.chartInstance.data.datasets[0].data = this.props.data.values;\r\n\r\n    if(this.props.graphSettings?.graphAutoscaling === true) {\r\n        this.chartReference.current.chartInstance.options.scales.yAxes[0].ticks.min = undefined\r\n        this.chartReference.current.chartInstance.options.scales.yAxes[0].ticks.max = undefined\r\n    } else {\r\n        this.chartReference.current.chartInstance.options.scales.yAxes[0].ticks.min = this.props.setScales?.yAxes.min\r\n        this.chartReference.current.chartInstance.options.scales.yAxes[0].ticks.max = this.props.setScales?.yAxes.max\r\n    }\r\n\r\n    if(this.props.graphSettings?.graphAnimations === false) {\r\n        this.chartReference.current.chartInstance.update(0);\r\n    } else {\r\n        this.chartReference.current.chartInstance.update();\r\n    }\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <Line ref={this.chartReference} data={this.data} options={{...this.options, ...this.props.options}}></Line>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           LabelWithValue.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass BatteryPack extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"col-lg-6 text-right\" style={{paddingRight: \"0px\", paddingLeft: \"0px\"}}>\r\n                <span className={\"custom-font mr-2 custom-light-weight\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>{this.props.label} </span>\r\n            </div>\r\n\r\n            <div className=\"col-lg-5 text-left align-self-center\" style={{paddingRight: \"0px\", paddingLeft: \"10px\"}}>\r\n                <span className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>{this.props.value}</span>\r\n                <span className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>{this.props.units}</span>\r\n            </div>\r\n            \r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default BatteryPack;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           Led.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport './Led.css';\r\n\r\nclass Led extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className={\"statusIndicator \" + this.props.color + (this.props.blinking ? \"\" : \" removedAnimations\")}></div>\r\n        </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Led;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           StatusIndicator.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport Led from \"./Led/Led.jsx\"\r\n\r\nclass StatusIndicator extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"row\" style={{marginBottom: \"5px\"}}>\r\n                <div className=\"col d-flex justify-content-center text-center\">\r\n                    <Led color={this.props.color}\r\n                        blinking={this.props.blinking} />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\"  style={{marginBottom: \"10px\"}}>\r\n                <div className=\"col d-flex justify-content-center text-center\">\r\n                    <span className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>\r\n                        {this.props.text}\r\n                    </span>\r\n                </div>\r\n            </div>         \r\n        </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatusIndicator;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           StatusIndicatorWidget.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport StatusIndicator from \"./StatusIndicator.jsx\"\r\n\r\nclass StatusIndicatorsWidget extends React.Component {\r\n    //   constructor(props) {\r\n    //     super(props);\r\n\r\n    //   }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12 text-center\">\r\n                        <p className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                            style={{marginBottom: 3 + \"px\", marginTop: \"-15px\"}} >\r\n                            Faults Status\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {\r\n                        this.props.indicatorsNames.map((name, index) => (\r\n                            <div className=\"col-md-3\">\r\n                                <StatusIndicator text={name}\r\n                                    color={this.props.boardConnected || this.props.demoModeActive ? (this.props.blinkingStatus[index] ? \"red\" : \"green\") : \"disabled\"}\r\n                                    blinking={this.props.blinkingStatus[index]}\r\n                                    theme={this.props.theme} />\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusIndicatorsWidget;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           StatusIndicatorsHistory.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nclass StatusIndicatorsHistory extends React.Component {\r\n      constructor(props) {\r\n        super(props);\r\n\r\n        this.scrolabaleHistoryContainer = React.createRef();\r\n      }\r\n\r\n    componentDidUpdate() {\r\n        this.scrolabaleHistoryContainer.current.scrollTop = this.scrolabaleHistoryContainer.current.scrollHeight;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                    <CSVLink data={this.props.history} filename={\"BMS_faults_history.csv\"}\r\n                        style={{cursor: \"text\", color: \"inherit\", textDecoration: \"none\"}} >\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12 text-center\">\r\n                                    <p className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                        style={{marginBottom: 3 + \"px\"}}\r\n                                        data-toggle=\"tooltip\" data-placement=\"top\" title=\"Click to download the history\" >\r\n                                        Faults History <i class=\"fa fa-history ml-1\" aria-hidden=\"true\"></i>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                    </CSVLink>\r\n                    <div className=\"row\">\r\n                        <div ref={this.scrolabaleHistoryContainer} className=\"col\" style={{minHeight: \"147px\", maxHeight: \"148px\", overflowY: \"auto\"}}>\r\n                            {\r\n                                this.props.history.map((historyItem, index) => (\r\n                                    <div key={index} style={{minWidth: \"inherit\", color: (historyItem.to === 1) ? \"red\" : \"green\"}}>\r\n                                        {historyItem.time} - {historyItem.name + ((historyItem.to === 1) ? \" triggered\" : \" cleared\")} \r\n                                    </div>\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatusIndicatorsHistory;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           MainDashboard.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport CardBoxContainer from \"./helpers/CardBoxContainer.jsx\"\r\nimport Battery from \"./Battery/Battery.jsx\"\r\nimport Graph from \"./Battery/Graph.jsx\"\r\nimport LabelWithValue from \"./helpers/LabelWithValue.jsx\"\r\nimport StatusIndicatorsWidget from \"./StatusIndicatorWidget/StatusIndicatorWidget.jsx\"\r\nimport StatusIndicatorsHistory from \"./StatusIndicatorWidget/StatusIndicatorsHistory.jsx\"\r\n\r\nclass MainDashboard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n    }\r\n    \r\n  }\r\n\r\n//   componentDidUpdate() {\r\n//       console.log(this.props.data)\r\n//   }\r\n\r\n  render() {\r\n    let currentPackSoc = this.props.data.packSoC.length > 0 ? this.props.data.packSoC[this.props.data.packSoC.length - 1] : \"0\"\r\n    let currentPackVoltage = this.props.data.packVoltage.length > 0 ? this.props.data.packVoltage[this.props.data.packVoltage.length - 1].toFixed(2) : \"0\" \r\n    let currentPackCurrent = this.props.data.packCurrent.length > 0 ? this.props.data.packCurrent[this.props.data.packCurrent.length - 1].toFixed(2) : \"0\" \r\n    let currentPackTemperature = this.props.data.packTemperature.length > 0 ? this.props.data.packTemperature[this.props.data.packTemperature.length - 1].toFixed(2) : \"0\" \r\n    let currentPackPower = (this.props.data.packVoltage.length & this.props.data.packCurrent.length) ? (currentPackVoltage * currentPackCurrent).toFixed(2) : \"0\"\r\n    let currentPackStatus\r\n    if(this.props.boardConnected) {\r\n        currentPackStatus = currentPackCurrent === 0 ? \"Idle\" : (currentPackCurrent > 0 ? \"Charging\" : \"Discharging\")\r\n    } else if(this.props.demoModeActive) {\r\n        currentPackStatus = \"Demoing\"\r\n    } else {\r\n        currentPackStatus = \"Disconnected\"\r\n    }\r\n\r\n    let scales = {\r\n        xAxes: [{\r\n            gridLines: {\r\n                color: \"#90A4AE\",\r\n            },\r\n            ticks: {\r\n                beginAtZero: true,\r\n                fontColor: this.props.theme === \"light\" ? \"black\" : \"white\"\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            ticks: {\r\n                fontColor: this.props.theme === \"light\" ? \"black\" : \"white\"\r\n            },\r\n            gridLines: {\r\n                color: \"#90A4AE\",\r\n                zeroLineColor: \"#90A4AE\"\r\n            }   \r\n        }]\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"row\">\r\n\r\n                <CardBoxContainer width=\"col-md-4\" onClick={this.props.clickCellsPackTab} theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12 text-center\">\r\n                            <p className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 0 + \"px\"}}>Summary</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\" style={{marginTop: \"38px\", marginBottom: \"27px\"}}>\r\n                        <div className=\"col-md-3\">\r\n                            <Battery id=\"dashboardBattery\" positionStyle={{top: \"178px\", left: \"60px\"}} sizeStyle={{width: \"95px\", height: \"195px\"}}\r\n                                isCharging={currentPackCurrent > 0 ? true : false}\r\n                                soc={currentPackSoc} />\r\n                        </div>\r\n                        <div className=\"col-md-7 offset-md-1\">\r\n                            <div className=\"row mt-4\">\r\n                                <LabelWithValue label=\"State of charge\"\r\n                                    value={currentPackSoc === \"0\" ? 0 : (currentPackSoc * 100).toFixed(2) || 0}\r\n                                    units={this.props.units.systemSocUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Voltage\"\r\n                                    value={currentPackVoltage}\r\n                                    units={this.props.units.systemVoltageUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Current\"\r\n                                    value={currentPackCurrent}\r\n                                    units={this.props.units.systemCurrentUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Temperature\"\r\n                                    value={currentPackTemperature}\r\n                                    units={this.props.units.systemTempUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Power\"\r\n                                    value={currentPackPower}\r\n                                    units={this.props.units.systemPowerUnits}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                            <div className=\"row mt-2\">\r\n                                <LabelWithValue label=\"Status\"\r\n                                    value={currentPackStatus}\r\n                                    units={\"\"}\r\n                                    theme={this.props.theme}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </CardBoxContainer>\r\n\r\n                <CardBoxContainer width=\"col-md-8\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\" style={{minHeight: \"295px\"}}>\r\n                            <Graph data={{labels: this.props.data.labels, values: this.props.data.packVoltage}} \r\n                                options={{\r\n                                    title: {display: true, text: \"Pack Voltage \" + `(${this.props.units.systemVoltageUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: 14, padding: 5},\r\n                                    scales: scales\r\n                                }}\r\n                                setScales={{\r\n                                    yAxes: {\r\n                                        min: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].min * this.props.cellsNumber,\r\n                                        max: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].max * this.props.cellsNumber,\r\n                                    }\r\n                                }}\r\n                                graphSettings={this.props.graphSettings} />\r\n                        </div>\r\n                        <div className=\"col-md-6\" style={{minHeight: \"295px\"}}>\r\n                            <Graph data={{labels: this.props.data.labels, values: this.props.data.packCurrent}} \r\n                                options={{\r\n                                    title: {display: true, text: \"Pack Current \" + `(${this.props.units.systemCurrentUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: 14, padding: 5},\r\n                                    scales: scales\r\n                                }}\r\n                                setScales={{\r\n                                    yAxes: {\r\n                                        min: this.props.units.axis.current[this.props.units.systemCurrentUnits].min * this.props.cellsNumber,\r\n                                        max: this.props.units.axis.current[this.props.units.systemCurrentUnits].max * this.props.cellsNumber,\r\n                                    }\r\n                                }}\r\n                                graphSettings={this.props.graphSettings} />\r\n                        </div>\r\n                    </div>\r\n                </CardBoxContainer>\r\n\r\n            </div>\r\n            <div className=\"row\">\r\n                <CardBoxContainer width=\"col-md-7\" theme={this.props.theme}>\r\n                    <StatusIndicatorsWidget indicatorsNames={this.props.indicatorsNames}\r\n                        blinkingStatus={this.props.blinkingStatus}\r\n                        boardConnected={this.props.boardConnected}\r\n                        demoModeActive={this.props.demoModeActive}\r\n                        theme={this.props.theme} />\r\n                </CardBoxContainer>\r\n                <CardBoxContainer width=\"col-md-5\" theme={this.props.theme}>\r\n                    <StatusIndicatorsHistory history={this.props.indicatorsHistory} theme={this.props.theme} />\r\n                </CardBoxContainer>\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default MainDashboard;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           CardBoxBatteryContainer.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass CardBoxBatteryContainer extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className={this.props.width + \" mx-auto\"}>\r\n                <div className={\"box shadow mt-3\" + (this.props.theme === \"light\" ? \" light-background\" : \"\")}\r\n                    style={{paddingLeft: \"0px\", paddingRight: \"10px\", paddingBottom: \"0px\", paddingTop: \"10px\"}} >\r\n                        {this.props.children}\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default CardBoxBatteryContainer;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           BatteryWithGraph.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport VisibilitySensor from 'react-visibility-sensor'\r\n\r\nimport Battery from \"./Battery.jsx\"\r\nimport Graph from \"./Graph.jsx\"\r\n\r\nclass BatteryWithGraph extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.dropdownContextMenu = React.createRef();\r\n    this.voltageOption = React.createRef();\r\n    this.curentOption = React.createRef();\r\n    this.tempOption = React.createRef();\r\n    this.selectedOption = React.createRef();\r\n\r\n    this.voltageChartContainer = React.createRef();\r\n    this.currentChartContainer = React.createRef();\r\n    this.temperatureChartContainer = React.createRef();\r\n    this.balancingChartContainer = React.createRef();\r\n\r\n    this.state = {\r\n        visible: false,\r\n        selectedToShow: \"Voltage\",\r\n        units: this.props.units.systemVoltageUnits\r\n    }\r\n    this.chartReference = React.createRef();\r\n\r\n    this.contextMenuOpen = this.contextMenuOpen.bind(this);\r\n    this.menuOptionChange = this.menuOptionChange.bind(this);\r\n    this.adjustToSystemUnits = this.adjustToSystemUnits.bind(this);\r\n    this.visibilityChange = this.visibilityChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.body.addEventListener('click', () => {\r\n        if(this.dropdownContextMenu.current) {\r\n            this.dropdownContextMenu.current.classList.remove('show');\r\n            this.dropdownContextMenu.current.style.display = \"none\";\r\n        }\r\n    });\r\n    document.body.addEventListener('contextmenu', () => {\r\n        if(this.dropdownContextMenu.current) {\r\n            this.dropdownContextMenu.current.classList.remove('show');\r\n            this.dropdownContextMenu.current.style.display = \"none\";\r\n        }\r\n    });\r\n  }\r\n\r\n  contextMenuOpen(e) {\r\n    let top = e.clientY;\r\n    let left = e.clientX;\r\n    this.dropdownContextMenu.current.style.top = top + \"px\";\r\n    this.dropdownContextMenu.current.style.left = left + \"px\";\r\n    this.dropdownContextMenu.current.style.display = \"block\";\r\n    this.dropdownContextMenu.current.classList.add('show');\r\n    e.preventDefault();\r\n  }\r\n\r\n  menuOptionChange(e) {\r\n    this.voltageOption.current.classList.remove('active');\r\n    this.curentOption.current.classList.remove('active');\r\n    this.tempOption.current.classList.remove('active');\r\n    e.target.classList.add('active');\r\n    switch(e.target.innerText) {\r\n        case \"Voltage\":\r\n            this.voltageChartContainer.current.style.display = \"block\"\r\n            this.currentChartContainer.current.style.display = \"none\"\r\n            this.temperatureChartContainer.current.style.display = \"none\"\r\n            this.balancingChartContainer.current.style.display = \"none\"\r\n            this.setState(() => ({selectedToShow: \"Voltage\"}))\r\n            break;\r\n        case \"Current\":\r\n            this.voltageChartContainer.current.style.display = \"none\"\r\n            this.currentChartContainer.current.style.display = \"block\"\r\n            this.temperatureChartContainer.current.style.display = \"none\"\r\n            this.balancingChartContainer.current.style.display = \"none\"\r\n            this.setState(() => ({selectedToShow: \"Current\"}))\r\n            break;\r\n        case \"Temperature\":\r\n            this.voltageChartContainer.current.style.display = \"none\"\r\n            this.currentChartContainer.current.style.display = \"none\"\r\n            this.temperatureChartContainer.current.style.display = \"block\"\r\n            this.balancingChartContainer.current.style.display = \"none\"\r\n            this.setState(() => ({selectedToShow: \"Temperature\"}))\r\n            break;\r\n        case \"Balancing\":\r\n            this.voltageChartContainer.current.style.display = \"none\"\r\n            this.currentChartContainer.current.style.display = \"none\"\r\n            this.temperatureChartContainer.current.style.display = \"none\"\r\n            this.balancingChartContainer.current.style.display = \"block\"\r\n            this.setState(() => ({selectedToShow: \"Balancing\"}))\r\n        break;\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if(this.props.theme !== nextProps.theme || this.props.cellsNumber <= 6) {\r\n        return true\r\n    } else {\r\n        return this.state.visible\r\n    }\r\n  }\r\n\r\n//   componentDidUpdate() {\r\n//       console.log(this.props.id + \" updated\")\r\n//   }\r\n\r\n  adjustToSystemUnits() {\r\n    // for text units\r\n    switch(this.state.selectedToShow) {\r\n        case \"Voltage\":\r\n            this.state.units =  this.props.units.systemVoltageUnits\r\n            break;\r\n        case \"Current\":\r\n            this.state.units = this.props.units.systemCurrentUnits\r\n            break;\r\n        case \"Temperature\":\r\n            this.state.units = this.props.units.systemTempUnits\r\n            break;\r\n        default:\r\n            this.state.units = \"\"\r\n    }\r\n  }\r\n\r\n  visibilityChange(isVisible) {\r\n      this.setState(() => ({visible: isVisible}))\r\n  }\r\n\r\n  render() {\r\n    let options = {\r\n        scales: {\r\n            xAxes: [{\r\n                gridLines: {\r\n                    color: \"#90A4AE\",\r\n                },\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    fontColor: this.props.theme === \"light\" ? \"black\" : \"white\"\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                ticks: {\r\n                    fontColor: this.props.theme === \"light\" ? \"black\" : \"white\"\r\n                },\r\n                gridLines: {\r\n                    color: \"#90A4AE\",\r\n                    zeroLineColor: \"#90A4AE\"\r\n                }   \r\n            }]\r\n        }\r\n    }\r\n    this.adjustToSystemUnits()\r\n    return (\r\n        <VisibilitySensor onChange={this.visibilityChange}>\r\n        <React.Fragment>\r\n            \r\n            <div onContextMenu={this.contextMenuOpen} className=\"row\" data-toggle=\"modal\" data-target={\"#bateryModal\" + this.props.id}>\r\n                <div className=\"col-md-12 text-center\">\r\n                    <p className={\"custom-font\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}>\r\n                        Cell {this.props.id + 1} <span ref={this.selectedOption}>{this.state.selectedToShow} {this.state.units && \"(\"}</span>\r\n                        <span>{this.state.units}{this.state.units && \")\"}</span>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n\r\n            <div onContextMenu={this.contextMenuOpen} className=\"row\" data-toggle=\"modal\" data-target={\"#bateryModal\" + this.props.id}>\r\n                <div className=\"col-md-3\">\r\n                    <Battery positionStyle={{top: \"190px\", left: \"75px\"}}\r\n                        isCharging={this.props.cellData?.current[this.props.cellData?.current.length - 1] > 0 ? true : false}\r\n                        soc={this.props.cellData?.soc[this.props.cellData?.soc.length - 1]} />\r\n                </div>\r\n                <div className=\"col-md-9 text-center\">\r\n                    <div ref={this.voltageChartContainer} style={{minHeight: \"230px\"}}>\r\n                        <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.voltage}}\r\n                            options={options}\r\n                            setScales={{\r\n                                yAxes: {\r\n                                    min: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].min,\r\n                                    max: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].max,\r\n                                }\r\n                            }}\r\n                            graphSettings={this.props.graphSettings} />\r\n                    </div>\r\n                    <div ref={this.currentChartContainer} style={{display: \"none\", minHeight: \"230px\"}}>\r\n                        <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.current}}\r\n                            options={options}\r\n                            setScales={{\r\n                                yAxes: {\r\n                                    min: this.props.units.axis.current[this.props.units.systemCurrentUnits].min,\r\n                                    max: this.props.units.axis.current[this.props.units.systemCurrentUnits].max,\r\n                                }\r\n                            }}\r\n                            graphSettings={this.props.graphSettings} />\r\n                    </div>\r\n                    <div ref={this.balancingChartContainer} style={{display: \"none\", minHeight: \"230px\"}}>\r\n                        <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.balancing}}\r\n                            options={options}\r\n                            setScales={{\r\n                                yAxes: {\r\n                                    min: this.props.units.axis.balancing.min,\r\n                                    max: this.props.units.axis.balancing.max,\r\n                                }\r\n                            }}\r\n                            graphSettings={this.props.graphSettings} />\r\n                    </div>\r\n                    <div ref={this.temperatureChartContainer} style={{display: \"none\", minHeight: \"230px\"}}>\r\n                        <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.temp}}\r\n                            options={options}\r\n                            setScales={{\r\n                                yAxes: {\r\n                                    min: this.props.units.axis.temp[this.props.units.systemTempUnits].min,\r\n                                    max: this.props.units.axis.temp[this.props.units.systemTempUnits].max, \r\n                                }\r\n                            }}\r\n                            graphSettings={this.props.graphSettings} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div ref={this.dropdownContextMenu} className=\"dropdown-menu dropdown-menu-sm custom-context-menu\">\r\n                <a className=\"dropdown-item active\" ref={this.voltageOption} onClick={this.menuOptionChange}>Voltage</a>\r\n                <a className=\"dropdown-item\" ref={this.curentOption} onClick={this.menuOptionChange}>Balancing</a>\r\n                <a className=\"dropdown-item\" ref={this.tempOption} onClick={this.menuOptionChange}>Temperature</a>\r\n            </div>\r\n\r\n            {/* Modal */}\r\n            <div className=\"modal fade\" id={\"bateryModal\" + this.props.id} tabIndex=\"-1\" role=\"dialog\" aria-labelledby={\"bateryModalLabel\" + this.props.id} aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\" style={{maxWidth: \"1100px\"}}>\r\n                    <div className={\"modal-content\" + (this.props.theme === \"light\" ? \" light-background\" : \"\")}>\r\n                    <div className=\"modal-header\">\r\n                        <h5 className={\"modal-title\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")} id={\"bateryModalLabel\" + this.props.id}>Cell {this.props.id + 1} details</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                        {/* <span aria-hidden=\"true\">&times;</span> */}\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-4\" style={{minHeight: \"400px\"}}>\r\n                                <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.voltage}} \r\n                                    options={{...options, \r\n                                        title: {display: true, text: \"Cell Voltage \" + `(${this.props.units.systemVoltageUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: \"14\"},\r\n                                    }}\r\n                                    setScales={{\r\n                                        yAxes: {\r\n                                            min: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].min,\r\n                                            max: this.props.units.axis.voltage[this.props.units.systemVoltageUnits].max,\r\n                                        }\r\n                                    }}\r\n                                    graphSettings={this.props.graphSettings} />\r\n                            </div>\r\n                            <div className=\"col-lg-4\" style={{minHeight: \"400px\"}}>\r\n                                <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.balancing}}\r\n                                    options={{...options, \r\n                                        title: {display: true, text: \"Cell Balancing \", fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: \"14\"},\r\n                                    }}\r\n                                    setScales={{\r\n                                        yAxes: {\r\n                                            min: this.props.units.axis.balancing.min,\r\n                                            max: this.props.units.axis.balancing.max,\r\n                                        }\r\n                                    }}\r\n                                    graphSettings={this.props.graphSettings} />\r\n                            </div>\r\n                            {/* <div className=\"col-lg-4\" style={{minHeight: \"400px\"}}>\r\n                                <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.current}}\r\n                                    options={{...options, \r\n                                        title: {display: true, text: \"Cell Current \" + `(${this.props.units.systemCurrentUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: \"14\"},\r\n                                    }}\r\n                                    setScales={{\r\n                                        yAxes: {\r\n                                            min: this.props.units.axis.current[this.props.units.systemCurrentUnits].min,\r\n                                            max: this.props.units.axis.current[this.props.units.systemCurrentUnits].max,\r\n                                        }\r\n                                    }}\r\n                                    graphSettings={this.props.graphSettings} />\r\n                            </div> */}\r\n                            <div className=\"col-lg-4\" style={{minHeight: \"400px\"}}>\r\n                                <Graph data={{labels: this.props.cellData?.labels, values: this.props.cellData?.temp}}\r\n                                    options={{...options, \r\n                                        title: {display: true, text: \"Cell Temperature \" + `(${this.props.units.systemTempUnits})`, fontColor: this.props.theme === \"light\" ? \"black\" : \"white\", fontSize: \"14\"},\r\n                                    }}\r\n                                    setScales={{\r\n                                        yAxes: {\r\n                                            min: this.props.units.axis.temp[this.props.units.systemTempUnits].min,\r\n                                            max: this.props.units.axis.temp[this.props.units.systemTempUnits].max,\r\n                                        }\r\n                                    }}\r\n                                    graphSettings={this.props.graphSettings} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\r\n                        <button type=\"button\" className=\"btn btn-primary\">Save changes</button>\r\n                    </div> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </React.Fragment>\r\n        </VisibilitySensor>\r\n      );\r\n  }\r\n}\r\n\r\nexport default BatteryWithGraph;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           BatteryPack.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport CardBoxBatteryContainer from \"../helpers/CardBoxBatteryContainer.jsx\"\r\nimport BatteryWithGraph from \"./BatteryWithGraph.jsx\"\r\n\r\nclass BatteryPack extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"row\">\r\n                {\r\n                    [...Array(this.props.cellsNumber).keys()].map((element) => {\r\n                        return (\r\n                            <CardBoxBatteryContainer key={element} width=\"col-md-4\" theme={this.props.theme}>\r\n                                <BatteryWithGraph id={element}\r\n                                    cellsNumber={this.props.cellsNumber}\r\n                                    cellData={this.props.cellsData[element]}\r\n                                    units={this.props.units}\r\n                                    theme={this.props.theme}\r\n                                    boardConnected={this.props.boardConnected}\r\n                                    demoModeActive={this.props.demoModeActive}\r\n                                    graphSettings={this.props.graphSettings} />\r\n                            </CardBoxBatteryContainer>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default BatteryPack;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           TableRowFromVariable.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nclass TableRowFromVariable extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <tr>\r\n                <td scope=\"row\">Cell {this.props.id + 1}</td>\r\n                \r\n                    {\r\n                        this.props.values && this.props.values.length > 0 ?\r\n                            <td>{this.props.values[this.props.values.length - 1].toFixed(this.props.noDecimals ? 0 : 2)}</td> : \"0\"\r\n                    }\r\n                    \r\n                    { this.props.units && <td>{this.props.units}</td> }\r\n            </tr>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default TableRowFromVariable;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           RawDataTable.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport TableRowFromVariable from \"./TableRowFromVariable.jsx\"\r\n\r\nclass RawDataTable extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//   }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n            <table className={\"table table-striped table-sm text-center\" + (this.props.theme === \"light\" ? \"\" : \" table-dark\")}>\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Value</th>\r\n                        { this.props.units && <th scope=\"col\">Units</th> }\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        [...Array(this.props.cellsNumber).keys()].map((element) => (\r\n                            <TableRowFromVariable id={element} key={element}\r\n                                name={this.props.name}\r\n                                noDecimals={this.props.noDecimals}\r\n                                values={this.props.cellsData[element]}\r\n                                units={this.props.units} />\r\n                        ))\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default RawDataTable;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           RawData.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport VisibilitySensor from 'react-visibility-sensor'\r\n\r\nimport RawDataTable from \"./RawDataTable.jsx\"\r\nimport CardBoxContainer from \"../helpers/CardBoxContainer.jsx\"\r\n\r\nclass RawData extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        visible: false\r\n    }\r\n\r\n    this.visibilityChange = this.visibilityChange.bind(this);\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if(this.props.theme !== nextProps.theme) {\r\n        return true\r\n    } else {\r\n        return this.state.visible\r\n    }\r\n  }\r\n\r\n  visibilityChange(isVisible) {\r\n    this.setState(() => ({visible: isVisible}))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <VisibilitySensor onChange={this.visibilityChange} partialVisibility={true}>\r\n        <React.Fragment>\r\n            <div className=\"row\">\r\n                <CardBoxContainer width=\"col-md-4\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <span className=\"badge badge-primary ml-2 mb-2\" style={{fontSize: 22 + 'px'}}>\r\n                            <i className=\"fa fa-bolt mr-2\"></i>\r\n                            Voltage\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <RawDataTable cellsNumber={this.props.cellsNumber} cellsData={this.props.cellsData.map(element => element.voltage)}\r\n                            name=\"Voltage\" units={this.props.units.systemVoltageUnits} theme={this.props.theme} />\r\n                    </div>\r\n                </CardBoxContainer>\r\n\r\n                <CardBoxContainer width=\"col-md-4\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <span className=\"badge badge-primary ml-2 mb-2\" style={{fontSize: 22 + 'px'}}>\r\n                            <i className=\"fa fa-thermometer-half mr-2\"></i>\r\n                            Temperature\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <RawDataTable cellsNumber={this.props.cellsNumber} cellsData={this.props.cellsData.map(element => element.temp)}\r\n                            name=\"Temperature\" units={this.props.units.systemTempUnits} theme={this.props.theme} />\r\n                    </div>\r\n                </CardBoxContainer>\r\n\r\n                <CardBoxContainer width=\"col-md-4\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <span className=\"badge badge-primary ml-2 mb-2\" style={{fontSize: 22 + 'px'}}>\r\n                            <i className=\"fa fa-balance-scale mr-2\"></i>\r\n                            Balancing\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <RawDataTable cellsNumber={this.props.cellsNumber} cellsData={this.props.cellsData.map(element => element.balancing)}\r\n                            name=\"Balancing\" noDecimals={true} units={\"\"} theme={this.props.theme} />\r\n                    </div>\r\n                </CardBoxContainer>\r\n                {/* <CardBoxContainer width=\"col-md-4\" theme={this.props.theme}>\r\n                    <div className=\"row\">\r\n                        <span className=\"badge badge-primary ml-2 mb-2\" style={{fontSize: 22 + 'px'}}>\r\n                            <span style={{fontSize: 52 + 'px', fontWeight: \"400\", lineHeight: \"0.0\", position: \"absolute\", top: \"55px\"}}>\r\n                                &#9107;\r\n                            </span>\r\n                            <span style={{minWidth: \"100px\"}}>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n                            <span className=\"ml-2\">Current</span>\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <RawDataTable cellsNumber={this.props.cellsNumber} cellsData={this.props.cellsData.map(element => element.current)}\r\n                            name=\"Current\" units={this.props.units.systemCurrentUnits} theme={this.props.theme} />\r\n                    </div>\r\n                </CardBoxContainer> */}\r\n                \r\n            </div>\r\n        </React.Fragment>\r\n        </VisibilitySensor>\r\n      );\r\n  }\r\n}\r\n\r\nexport default RawData;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           ConnectionSettingsWidget.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport \"../../../css/buttons.css\"\r\n\r\nclass ConnectionSettingsWidget extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        freemasterVersion: \"lite\"\r\n    }\r\n\r\n    this.liteServerUrlInput = React.createRef();\r\n    this.connStringInput = React.createRef();\r\n    this.elfPathInput = React.createRef();\r\n\r\n    this.onInputChange = this.onInputChange.bind(this);\r\n    this.onelfPathInputChange = this.onelfPathInputChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.liteServerUrlInput.current.defaultValue = this.props.liteConnection.liteServerUrl\r\n    this.connStringInput.current.defaultValue = this.props.liteConnection.connString\r\n\r\n    this.elfPathInput.current.defaultValue = this.props.elfPath\r\n  }\r\n\r\n  componentDidUpdate() {\r\n      if(this.state.freemasterVersion === \"desktop\") {\r\n        this.liteServerUrlInput.current.defaultValue = \"localhost:41000\"\r\n        this.connStringInput.current.defaultValue = \"Managed from Desktop Application\"\r\n        this.elfPathInput.current.defaultValue = \"Managed from Desktop Application\"\r\n      }\r\n      if(this.state.freemasterVersion === \"lite\") {\r\n        this.liteServerUrlInput.current.defaultValue = \"localhost:8090\"\r\n        this.connStringInput.current.defaultValue = \"RS232;port=COM14;speed=115200;\"\r\n        this.elfPathInput.current.defaultValue = \"bms\\\\BMS_NXP.elf\"\r\n      }\r\n  }\r\n\r\n  onInputChange() {\r\n    this.props.changeLiteConnection({\r\n        liteServerUrl: this.liteServerUrlInput.current.value,\r\n        connString: this.connStringInput.current.value\r\n    })\r\n  }\r\n\r\n  onelfPathInputChange() {\r\n      this.props.changeElfPath(this.elfPathInput.current.value)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <form>\r\n                <label>Freemaster Version</label>\r\n                <div className=\"form-row mb-2\">\r\n                    <div className=\"col text-center mx-auto\">\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"radio\" name=\"freemasterVersion\" id=\"desktopRadio\" value=\"desktop\"\r\n                                onClick={() => {\r\n                                    this.setState({freemasterVersion: \"desktop\"})\r\n                                    this.props.onSelectedFreemasterVersion(\"desktop\")\r\n                                }} />\r\n                            <label className=\"form-check-label\" htmlFor=\"desktopRadio\">\r\n                                Desktop\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"radio\" name=\"freemasterVersion\" id=\"liteRadio\" value=\"lite\" defaultChecked\r\n                                onClick={() => {\r\n                                    this.setState({freemasterVersion: \"lite\"})\r\n                                    this.props.onSelectedFreemasterVersion(\"lite\")\r\n                                    this.props.changeLiteConnection({\r\n                                        liteServerUrl: \"localhost:8090\",\r\n                                        connString: \"RS232;port=COM14;speed=115200;\"\r\n                                    })\r\n                                    this.props.changeElfPath(\"bms\\\\BMS_NXP.elf\")\r\n                                }} />\r\n                            <label className=\"form-check-label\" htmlFor=\"liteRadio\">\r\n                                Lite\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <label>Freemaster Server URL</label>\r\n                <div className=\"form-row\">\r\n                    <div className=\"input-group mb-1\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"server-addon\">\r\n                                <i className=\"fa fa-server\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <input ref={this.liteServerUrlInput} type=\"text\"\r\n                            disabled={this.state.freemasterVersion === \"desktop\"}\r\n                            onChange={this.onInputChange}\r\n                            className=\"form-control\"\r\n                            placeholder=\"Freemaster Server URL (ex:localhost:8090)\"\r\n                            aria-label=\"Server\" aria-describedby=\"server-addon\" />\r\n                    </div>\r\n                </div>\r\n                <label>Connection String</label>\r\n                <div className=\"form-row\">\r\n                    <div className=\"input-group mb-1\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"connstring-addon\">\r\n                                <i className=\"fa fa-plug\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <input ref={this.connStringInput} type=\"text\"\r\n                            disabled={this.state.freemasterVersion === \"desktop\"}\r\n                            onChange={this.onInputChange}\r\n                            className=\"form-control\"\r\n                            placeholder=\"Connection String (ex:RS232;port=COM3;speed=115200;)\"\r\n                            aria-label=\"ConnectionString\" aria-describedby=\"connstring-addon\" />\r\n                    </div>\r\n                </div>\r\n                <label>ELF File</label>\r\n                <div className=\"form-row\">\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <span className=\"input-group-text\" id=\"elfpath-addon\">\r\n                                <i className=\"fa fa-file\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <input ref={this.elfPathInput} type=\"text\"\r\n                            disabled={this.state.freemasterVersion === \"desktop\"}\r\n                            onChange={this.onelfPathInputChange}\r\n                            className=\"form-control\"\r\n                            placeholder=\"ex: bms_s32k.elf\"\r\n                            aria-label=\"ElfPath\" aria-describedby=\"elfpath-addon\" />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ConnectionSettingsWidget;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           DataRecorderSettingsWidget.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport \"../../../css/buttons.css\"\r\n\r\nclass DataRecorderSettingsWidget extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n\r\n//   }\r\n\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <form>\r\n                <label>Recorded Parameters</label>\r\n                <div className=\"form-row\">\r\n                    <div className=\"col text-center mx-auto\">\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name=\"recordedParams\" id=\"voltageCheckbox\" value=\"voltage\" defaultChecked\r\n                                onClick={() => this.props.onSelectedRecordParamsToggle(\"voltage\")} />\r\n                            <label className=\"form-check-label\" htmlFor=\"voltageCheckbox\">\r\n                                Voltage\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name=\"recordedParams\" id=\"currentCheckbox\" value=\"current\" defaultChecked\r\n                                onClick={() => this.props.onSelectedRecordParamsToggle(\"current\")} />\r\n                            <label className=\"form-check-label\" htmlFor=\"currentCheckbox\">\r\n                                Current\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name=\"recordedParams\" id=\"temperatureCheckbox\" value=\"temperature\" defaultChecked\r\n                                onClick={() => this.props.onSelectedRecordParamsToggle(\"temperature\")} />\r\n                            <label className=\"form-check-label\" htmlFor=\"temperatureCheckbox\">\r\n                                Temperature\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"form-check-inline\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name=\"recordedParams\" id=\"socCheckbox\" value=\"soc\" defaultChecked\r\n                                onClick={() => this.props.onSelectedRecordParamsToggle(\"soc\")} />\r\n                            <label className=\"form-check-label\" htmlFor=\"socCheckbox\">\r\n                                SoC\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default DataRecorderSettingsWidget;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           ChartSettingsWidget.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\n\r\nclass ChartSettingsWidget extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className=\"form-row\">\r\n                <div className=\"col text-center mx-auto\">\r\n                    <div className=\"form-check-inline\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" name=\"chartParams\" id=\"autoScalingCheckbox\" value=\"autoScaling\" defaultChecked\r\n                            onClick={() => this.props.onToggleAutoScaling()} />\r\n                        <label className=\"form-check-label\" htmlFor=\"autoScalingCheckbox\">\r\n                            Auto scaling axes\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"form-check-inline\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" name=\"chartParams\" id=\"animationsCheckbox\" value=\"animations\" defaultChecked\r\n                            onClick={() => this.props.onToggleAnimations()} />\r\n                        <label className=\"form-check-label\" htmlFor=\"animationsCheckbox\">\r\n                            Animations\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default ChartSettingsWidget;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           SystemConfiguration.jsx\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\n\r\nimport { CSVLink } from \"react-csv\";\r\nimport { toast } from 'react-toastify';\r\n\r\nimport ConnectionSettingsWidget from \"./helpers/ConnectionSettingsWidget.jsx\"\r\nimport DataRecorderSettingsWidget from \"./helpers/DataRecorderSettingsWidget.jsx\"\r\nimport CardBoxContainer from \"./helpers/CardBoxContainer.jsx\"\r\nimport ChartSettingsWidget from './helpers/ChartSettingsWidget.jsx';\r\n\r\n\r\nclass SystemConfiguration extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        cellsNr: 6,\r\n        selectedRecordParam: {\r\n            voltage: true,\r\n            current: true,\r\n            temperature: true,\r\n            soc: true\r\n        },\r\n        recordedData: [\r\n            [\"voltage\", \"current\", \"temperature\", \"soc\"]\r\n        ]\r\n    }\r\n\r\n    this.cellsNumberSelect = React.createRef();\r\n\r\n    this.onChangeCellsNumber = this.onChangeCellsNumber.bind(this);\r\n    this.onChangeUnits = this.onChangeUnits.bind(this);\r\n    this.formatRecordedData = this.formatRecordedData.bind(this);\r\n  }\r\n\r\n  onChangeUnits(e) {\r\n      this.props.changeUnit(e.target.value)\r\n  }\r\n\r\n  onChangeCellsNumber(e) {\r\n    if(Number(this.cellsNumberSelect.current.value) && Number(this.cellsNumberSelect.current.value) != this.state.cellsNr) {\r\n        this.state.cellsNr = Number(this.cellsNumberSelect.current.value)\r\n        this.props.changeCellsNumber(Number(this.cellsNumberSelect.current.value))\r\n    }\r\n    e.preventDefault();\r\n  }\r\n\r\n  formatRecordedData() {\r\n    let recordedData = [[]]\r\n    recordedData[0].push(\"Time\")\r\n\r\n    if(this.state.selectedRecordParam.voltage) {\r\n        recordedData[0].push(\"BMS voltage (\" + this.props.units.systemVoltageUnits + \")\")\r\n    }\r\n    if(this.state.selectedRecordParam.current) {\r\n        recordedData[0].push(\"BMS current (\" + this.props.units.systemCurrentUnits + \")\")\r\n    }\r\n    if(this.state.selectedRecordParam.temperature) {\r\n        recordedData[0].push(\"BMS temperature (\" + this.props.units.systemTempUnits + \")\")\r\n    }\r\n    if(this.state.selectedRecordParam.soc) {\r\n        recordedData[0].push(\"BMS SoC (\" + this.props.units.systemSocUnits + \")\")\r\n    }\r\n\r\n    for(let cellIndex = 1; cellIndex <= this.props.cellsNumber; cellIndex++) {\r\n        if(this.state.selectedRecordParam.voltage) {\r\n            recordedData[0].push(\"Cell \" + cellIndex + \" voltage (\" + this.props.units.systemVoltageUnits + \")\")\r\n        }\r\n        if(this.state.selectedRecordParam.current) {\r\n            recordedData[0].push(\"Cell \" + cellIndex + \" current (\" + this.props.units.systemCurrentUnits + \")\")\r\n        }\r\n        if(this.state.selectedRecordParam.temperature) {\r\n            recordedData[0].push(\"Cell \" + cellIndex + \" temperature (\" + this.props.units.systemTempUnits + \")\")\r\n        }\r\n        if(this.state.selectedRecordParam.soc) {\r\n            recordedData[0].push(\"Cell \" + cellIndex + \" SoC (\" + this.props.units.systemSocUnits + \")\")\r\n        }\r\n    }\r\n\r\n    // console.log(this.props.data)\r\n    // console.log(this.props.cellData)\r\n    let cellData = this.props.cellsData\r\n    let dataLength = cellData[0]?.labels.length || 0\r\n    for(let dataIndex = 0; dataIndex < dataLength; dataIndex++) {\r\n        recordedData.push([])\r\n        //header is on the first line in csv\r\n        recordedData[dataIndex + 1].push(cellData[0].labels[dataIndex])\r\n        if(this.state.selectedRecordParam.voltage) {\r\n            recordedData[dataIndex + 1].push(this.props.data.packVoltage[dataIndex])\r\n        }\r\n        if(this.state.selectedRecordParam.current) {\r\n            recordedData[dataIndex + 1].push(this.props.data.packCurrent[dataIndex])\r\n        }\r\n        if(this.state.selectedRecordParam.temperature) {\r\n            recordedData[dataIndex + 1].push(this.props.data.packTemperature[dataIndex])\r\n        }\r\n        if(this.state.selectedRecordParam.soc) {\r\n            recordedData[dataIndex + 1].push(this.props.data.packSoC[dataIndex])\r\n        }\r\n        for(let cellIndex = 0; cellIndex < this.props.cellsNumber; cellIndex++) {\r\n            if(this.state.selectedRecordParam.voltage) {\r\n                recordedData[dataIndex + 1].push(cellData[cellIndex].voltage[dataIndex])\r\n            }\r\n            if(this.state.selectedRecordParam.current) {\r\n                recordedData[dataIndex + 1].push(cellData[cellIndex].current[dataIndex])\r\n            }\r\n            if(this.state.selectedRecordParam.temperature) {\r\n                recordedData[dataIndex + 1].push(cellData[cellIndex].temp[dataIndex])\r\n            }\r\n            if(this.state.selectedRecordParam.soc) {\r\n                recordedData[dataIndex + 1].push(cellData[cellIndex].soc[dataIndex])\r\n            }\r\n        }\r\n    }\r\n\r\n    this.setState(() => ({\r\n        recordedData: recordedData\r\n    }))\r\n    toast.info(\" Data exported.\", {autoClose: 3000})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-lg-4\">\r\n                    <div className=\"row\">\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>BMS Parameters</p>\r\n                            <form>\r\n                                <label>Filter used to determine SOC</label>\r\n                                <div className=\"form-row\">\r\n                                    <select className=\"form-control mx-auto\">\r\n                                        <option defaultValue>Select the filter used to determine SOC</option>\r\n                                        <option value=\"1\">Coloumb Counting</option>\r\n                                        <option value=\"2\">UKF</option>\r\n                                        <option value=\"3\">EKF</option>\r\n                                    </select>\r\n                                </div>\r\n                                <label className=\"mt-3\">Number of Cells</label>\r\n                                <div className=\"form-row\">\r\n                                    <select ref={this.cellsNumberSelect} onClick={this.onChangeCellsNumber} className=\"form-control mx-auto\">\r\n                                        <option defaultValue value=\"0\">Select the number of cells</option>\r\n                                        {\r\n                                            [...Array(25).keys()].map((element) => (\r\n                                                <option value={element + 4} key={element}>{element + 4}</option>\r\n                                            ))\r\n                                        }\r\n                                    </select>\r\n                                </div>\r\n                            </form>\r\n                        </CardBoxContainer>\r\n\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>Data recording options</p>\r\n                            <DataRecorderSettingsWidget\r\n                                onSelectedRecordParamsToggle={(param) => {\r\n                                    switch(param) {\r\n                                        case \"voltage\":\r\n                                            this.setState((prevState) => ({\r\n                                                selectedRecordParam: {\r\n                                                    ...prevState.selectedRecordParam,\r\n                                                    voltage: !prevState.selectedRecordParam.voltage\r\n                                                }\r\n                                            }))\r\n                                            break;\r\n                                        case \"current\":\r\n                                            this.setState((prevState) => ({\r\n                                                selectedRecordParam: {\r\n                                                    ...prevState.selectedRecordParam,\r\n                                                    current: !prevState.selectedRecordParam.current\r\n                                                }\r\n                                            }))\r\n                                            break;\r\n                                        case \"temperature\":\r\n                                            this.setState((prevState) => ({\r\n                                                selectedRecordParam: {\r\n                                                    ...prevState.selectedRecordParam,\r\n                                                    temperature: !prevState.selectedRecordParam.temperature\r\n                                                }\r\n                                            }))\r\n                                            break;\r\n                                        case \"soc\":\r\n                                            this.setState((prevState) => ({\r\n                                                selectedRecordParam: {\r\n                                                    ...prevState.selectedRecordParam,\r\n                                                    soc: !prevState.selectedRecordParam.soc\r\n                                                }\r\n                                            }))\r\n                                        break;\r\n                                    }\r\n                                }} />\r\n                            <div className=\"row\">\r\n                                <div className=\"col text-center\">\r\n                                <CSVLink data={this.state.recordedData} filename={\"BMS_recorded_parameters.csv\"}\r\n                                    onClick={this.formatRecordedData}\r\n                                    className=\"btn btn-primary mt-4\">\r\n                                    Get recorded data\r\n                                </CSVLink>\r\n                                </div>\r\n                            </div>\r\n                        </CardBoxContainer>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                    <div className=\"row\">\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>BMS Measurement Units</p>\r\n                            <label>Voltage Units of Measure</label>\r\n                            <div className=\"form-row\">\r\n                                <select onClick={this.onChangeUnits} className=\"form-control mx-auto\">\r\n                                    <option defaultValue>Select the Voltage Units of Measure</option>\r\n                                    <option value=\"uV\">&micro;V</option>\r\n                                    <option value=\"mV\">mV</option>\r\n                                    <option value=\"V\">V</option>\r\n                                </select>\r\n                            </div>\r\n                            <label className=\"mt-3\">Current Units of Measure</label>\r\n                            <div className=\"form-row\">\r\n                                <select onClick={this.onChangeUnits} className=\"form-control mx-auto\">\r\n                                    <option defaultValue>Select the Current Units of Measure</option>\r\n                                    <option value=\"uA\">&micro;A</option>\r\n                                    <option value=\"mA\">mA</option>\r\n                                    <option value=\"A\">A</option>\r\n                                </select>\r\n                            </div>\r\n                            <label className=\"mt-3\">Temperature Units of Measure</label>\r\n                            <div className=\"form-row\">\r\n                                <select onClick={this.onChangeUnits} className=\"form-control mx-auto\">\r\n                                    <option defaultValue>Select the Temperature Units of Measure</option>\r\n                                    <option value=\"C\">&deg;C</option>\r\n                                    <option value=\"F\">&deg;F</option>\r\n                                    <option value=\"K\">K</option>\r\n                                </select>\r\n                            </div>\r\n                        </CardBoxContainer>\r\n\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>Application Settings</p>\r\n                            <div className=\"form-row\">\r\n                                <div className=\"col text-center mx-auto mt-3\">\r\n                                    <div className=\"form-check\">\r\n                                        <input onClick={this.props.triggerDemoMode} disabled={this.props.boardConnected} id=\"demoModeCheckbox\"\r\n                                            className=\"form-check-input\" type=\"checkbox\"  />\r\n                                        <label className=\"form-check-label\" htmlFor=\"demoModeCheckbox\">\r\n                                            Demo Mode { this.props.demoModeActive ? \" (active)\" : \" (disabled)\" }\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-row\">\r\n                                <div className=\"col text-center mx-auto mt-4\">\r\n                                    <div className=\"form-check\">\r\n                                    <input className=\"form-check-input\" type=\"radio\" name=\"themeRadios\" id=\"darkThemeRadio\" value=\"darkTheme\" defaultChecked\r\n                                        onClick={() => {\r\n                                            document.body.style.background = \"#343E59\"\r\n                                            this.props.changeApplicationTheme(\"dark\")\r\n                                        }} />\r\n                                    <label className=\"form-check-label\" htmlFor=\"darkThemeRadio\">\r\n                                        Dark Theme\r\n                                    </label>\r\n                                </div>\r\n\r\n                                <div className=\"form-check\">\r\n                                    <input className=\"form-check-input\" type=\"radio\" name=\"themeRadios\" id=\"lightThemeRadio\" value=\"lightTheme\"\r\n                                        onClick={() => {\r\n                                            document.body.style.background = \"#e7eff6\"\r\n                                            this.props.changeApplicationTheme(\"light\")\r\n                                        }} />\r\n                                    <label className=\"form-check-label\" htmlFor=\"lightThemeRadio\">\r\n                                        Light Theme\r\n                                    </label>\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                        </CardBoxContainer>\r\n                        \r\n                    </div>\r\n                </div>\r\n                <div className=\"col-lg-4\">\r\n                    <div className=\"row\">\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")} style={{marginBottom: 10 + \"px\"}}>Connection Parameters</p>\r\n                            <ConnectionSettingsWidget pcm={this.state.pcm}\r\n                                boardConnected={this.props.boardConnected}\r\n                                demoModeActive={this.props.demoModeActive}\r\n                                loading={this.props.loading}\r\n                                liteConnection={this.props.liteConnection}\r\n                                elfPath={this.props.elfPath}\r\n                                onSelectedFreemasterVersion={this.props.onSelectedFreemasterVersion}\r\n                                changeElfPath={this.props.changeElfPath}\r\n                                changeLiteConnection={this.props.changeLiteConnection} />\r\n                        </CardBoxContainer>\r\n\r\n                        <CardBoxContainer width=\"col-md-12\" theme={this.props.theme}>\r\n                            <p className={\"custom-font text-center\" + (this.props.theme === \"light\" ? \" text-dark\" : \" text-white\")}\r\n                                style={{marginBottom: 10 + \"px\"}}>Charts Settings</p>\r\n                            <ChartSettingsWidget\r\n                                onToggleAutoScaling={this.props.onToggleAutoScaling}\r\n                                onToggleAnimations={this.props.onToggleAnimations} />\r\n                        </CardBoxContainer>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n      );\r\n  }\r\n}\r\n\r\nexport default SystemConfiguration;\r\n","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           conversions.js\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nexport const microToMili = (value) => value / 1000;\r\nexport const microToNormal = (value) => value / 1000000;\r\n\r\nexport const miliToMicro = (value) => value * 1000;\r\nexport const miliToNormal = (value) => value / 1000;\r\n\r\nexport const normalToMicro = (value) => value * 1000000;\r\nexport const normalToMili = (value) => value * 1000;\r\n\r\nexport const celsiusToFahrenheit = (value) => value * 9/5 + 32;\r\nexport const celsiusToKelvin = (value) => value + 273.15;","// The MIT License (MIT)\r\n\r\n// Copyright (c) 2014 Artem Prigoda\r\n\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n\r\n// The above copyright notice and this permission notice shall be included in all\r\n// copies or substantial portions of the Software.\r\n\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n// SOFTWARE.\r\n/* eslint-disable */\r\nvar _Promise = Promise;\r\n\r\nif (typeof _Promise === 'undefined') {\r\n    _Promise = root.Promise;\r\n}\r\n\r\nif (_Promise === undefined) {\r\n    throw 'Promise is not supported! Use latest version node/browser or promise-polyfill';\r\n}\r\n\r\nvar isUndefined = function (value) {\r\n    return value === undefined;\r\n};\r\n\r\nvar isArray = Array.isArray;\r\n\r\nvar isObject = function (value) {\r\n    var type = typeof value;\r\n    return value != null && (type == 'object' || type == 'function');\r\n};\r\n\r\nvar isFunction = function (target) {\r\n    return typeof target === 'function'\r\n};\r\n\r\nvar isString = function (value) {\r\n    return typeof value === 'string';\r\n};\r\n\r\nvar isEmpty = function (value) {\r\n    if (isObject(value)) {\r\n        for (var idx in value) {\r\n            if (value.hasOwnProperty(idx)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    if (isArray(value)) {\r\n        return !value.length;\r\n    }\r\n    return !value;\r\n};\r\n\r\nvar forEach = function (target, callback) {\r\n    if (isArray(target)) {\r\n        return target.map(callback);\r\n    }\r\n    else {\r\n        for (var _key in target) {\r\n            if (target.hasOwnProperty(_key)) {\r\n                callback(target[_key]);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nvar clone = function (value) {\r\n    return JSON.parse(JSON.stringify(value));\r\n};\r\n\r\nvar ERRORS = {\r\n    \"PARSE_ERROR\": {\r\n        \"code\": -32700,\r\n        \"message\": \"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\"\r\n    },\r\n    \"INVALID_REQUEST\": {\r\n        \"code\": -32600,\r\n        \"message\": \"Invalid Request. The JSON sent is not a valid Request object.\"\r\n    },\r\n    \"METHOD_NOT_FOUND\": {\r\n        \"code\": -32601,\r\n        \"message\": \"Method not found. The method does not exist / is not available.\"\r\n    },\r\n    \"INVALID_PARAMS\": {\r\n        \"code\": -32602,\r\n        \"message\": \"Invalid params. Invalid method parameter(s).\"\r\n    },\r\n    \"INTERNAL_ERROR\": {\r\n        \"code\": -32603,\r\n        \"message\": \"Internal error. Internal JSON-RPC error.\"\r\n    }\r\n};\r\n\r\nfunction ServerError(code, message, data) {\r\n    this.message = message || \"\";\r\n    this.code = code || -32000;\r\n\r\n    if (Boolean(data)) {\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nServerError.prototype = new Error();\r\n\r\nvar simple_jsonrpc = function () {\r\n\r\n    var self = this,\r\n        waitingframe = {},\r\n        id = 0,\r\n        dispatcher = {};\r\n\r\n\r\n    function setError(jsonrpcError, exception) {\r\n        var error = clone(jsonrpcError);\r\n        if (!!exception) {\r\n            if (isObject(exception) && exception.hasOwnProperty(\"message\")) {\r\n                error.data = exception.message;\r\n            }\r\n            else if (isString(exception)) {\r\n                error.data = exception;\r\n            }\r\n\r\n            if (exception instanceof ServerError) {\r\n                error = {\r\n                    message: exception.message,\r\n                    code: exception.code\r\n                };\r\n                if (exception.hasOwnProperty('data')) {\r\n                    error.data = exception.data;\r\n                }\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n\r\n    function isPromise(thing) {\r\n        return !!thing && 'function' === typeof thing.then;\r\n    }\r\n\r\n    function isError(message) {\r\n        return !!message.error;\r\n    }\r\n\r\n    function isRequest(message) {\r\n        return !!message.method;\r\n    }\r\n\r\n    function isResponse(message) {\r\n        return message.hasOwnProperty('result') && message.hasOwnProperty('id');\r\n    }\r\n\r\n    function beforeResolve(message) {\r\n        var promises = [];\r\n        if (isArray(message)) {\r\n            forEach(message, function (msg) {\r\n                promises.push(resolver(msg));\r\n            });\r\n        }\r\n        else if (isObject(message)) {\r\n            promises.push(resolver(message));\r\n        }\r\n\r\n        return _Promise.all(promises)\r\n            .then(function (result) {\r\n\r\n                var toStream = [];\r\n                forEach(result, function (r) {\r\n                    if (!isUndefined(r)) {\r\n                        toStream.push(r);\r\n                    }\r\n                });\r\n\r\n                if (toStream.length === 1) {\r\n                    self.toStream(JSON.stringify(toStream[0]));\r\n                }\r\n                else if (toStream.length > 1) {\r\n                    self.toStream(JSON.stringify(toStream));\r\n                }\r\n                return result;\r\n            });\r\n    }\r\n\r\n    function resolver(message) {\r\n        try {\r\n            if (isError(message)) {\r\n                return rejectRequest(message);\r\n            }\r\n            else if (isResponse(message)) {\r\n                return resolveRequest(message);\r\n            }\r\n            else if (isRequest(message)) {\r\n                return handleRemoteRequest(message);\r\n            }\r\n            else {\r\n                return _Promise.resolve({\r\n                    \"id\": null,\r\n                    \"jsonrpc\": \"2.0\",\r\n                    \"error\": setError(ERRORS.INVALID_REQUEST)\r\n                });\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error('Resolver error:' + e.message, e);\r\n            return _Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    function rejectRequest(error) {\r\n        if (waitingframe.hasOwnProperty(error.id)) {\r\n            waitingframe[error.id].reject(error.error);\r\n        }\r\n        else {\r\n            console.log('Unknown request', error);\r\n        }\r\n    }\r\n\r\n    function resolveRequest(result) {\r\n        if (waitingframe.hasOwnProperty(result.id)) {\r\n            waitingframe[result.id].resolve(result.result);\r\n            delete waitingframe[result.id];\r\n        }\r\n        else {\r\n            console.log('unknown request', result);\r\n        }\r\n    }\r\n\r\n    function handleRemoteRequest(request) {\r\n        console.log(\"handleRemoteRequest -- simple jrpc js\")\r\n        if (dispatcher.hasOwnProperty(request.method)) {\r\n            try {\r\n                var result;\r\n\r\n                if (request.hasOwnProperty('params')) {\r\n                    if (dispatcher[request.method].params == \"pass\") {\r\n                        result = dispatcher[request.method].fn.call(dispatcher, request.params);\r\n                    }\r\n                    else if (isArray(request.params)) {\r\n                        result = dispatcher[request.method].fn.apply(dispatcher, request.params);\r\n                    }\r\n                    else if (isObject(request.params)) {\r\n                        if (dispatcher[request.method].params instanceof Array) {\r\n                            var argsValues = [];\r\n                            dispatcher[request.method].params.forEach(function (arg) {\r\n\r\n                                if (request.params.hasOwnProperty(arg)) {\r\n                                    argsValues.push(request.params[arg]);\r\n                                    delete request.params[arg];\r\n                                }\r\n                                else {\r\n                                    argsValues.push(undefined);\r\n                                }\r\n                            });\r\n\r\n                            if (Object.keys(request.params).length > 0) {\r\n                                return _Promise.resolve({\r\n                                    \"jsonrpc\": \"2.0\",\r\n                                    \"id\": request.id,\r\n                                    \"error\": setError(ERRORS.INVALID_PARAMS, {\r\n                                        message: \"Params: \" + Object.keys(request.params).toString() + \" not used\"\r\n                                    })\r\n                                });\r\n                            }\r\n                            else {\r\n                                result = dispatcher[request.method].fn.apply(dispatcher, argsValues);\r\n                            }\r\n                        }\r\n                        else {\r\n                            return _Promise.resolve({\r\n                                \"jsonrpc\": \"2.0\",\r\n                                \"id\": request.id,\r\n                                \"error\": setError(ERRORS.INVALID_PARAMS, \"Undeclared arguments of the method \" + request.method)\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    result = dispatcher[request.method].fn();\r\n                }\r\n\r\n                if (request.hasOwnProperty('id')) {\r\n                    if (isPromise(result)) {\r\n                        return result.then(function (res) {\r\n                            if (isUndefined(res)) {\r\n                                res = true;\r\n                            }\r\n                            return {\r\n                                \"jsonrpc\": \"2.0\",\r\n                                \"id\": request.id,\r\n                                \"result\": res\r\n                            };\r\n                        })\r\n                            .catch(function (e) {\r\n                                return {\r\n                                    \"jsonrpc\": \"2.0\",\r\n                                    \"id\": request.id,\r\n                                    \"error\": setError(ERRORS.INTERNAL_ERROR, e)\r\n                                };\r\n                            });\r\n                    }\r\n                    else {\r\n\r\n                        if (isUndefined(result)) {\r\n                            result = true;\r\n                        }\r\n\r\n                        return _Promise.resolve({\r\n                            \"jsonrpc\": \"2.0\",\r\n                            \"id\": request.id,\r\n                            \"result\": result\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    return _Promise.resolve(); //nothing, it notification\r\n                }\r\n            }\r\n            catch (e) {\r\n                return _Promise.resolve({\r\n                    \"jsonrpc\": \"2.0\",\r\n                    \"id\": request.id,\r\n                    \"error\": setError(ERRORS.INTERNAL_ERROR, e)\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            return _Promise.resolve({\r\n                \"jsonrpc\": \"2.0\",\r\n                \"id\": request.id,\r\n                \"error\": setError(ERRORS.METHOD_NOT_FOUND, {\r\n                    message: request.method\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    function notification(method, params) {\r\n        var message = {\r\n            \"jsonrpc\": \"2.0\",\r\n            \"method\": method,\r\n            \"params\": params\r\n        };\r\n\r\n        if (isObject(params) && !isEmpty(params)) {\r\n            message.params = params;\r\n        }\r\n\r\n        return message;\r\n    }\r\n\r\n    function call(method, params) {\r\n        id += 1;\r\n        var message = {\r\n            \"jsonrpc\": \"2.0\",\r\n            \"method\": method,\r\n            \"id\": id\r\n        };\r\n\r\n        if (isObject(params) && !isEmpty(params)) {\r\n            message.params = params;\r\n        }\r\n\r\n        return {\r\n            promise: new _Promise(function (resolve, reject) {\r\n                waitingframe[id.toString()] = {\r\n                    resolve: resolve,\r\n                    reject: reject\r\n                };\r\n            }),\r\n            message: message\r\n        };\r\n    }\r\n\r\n    self.toStream = function (a) {\r\n        console.log('Need define the toStream method before use');\r\n        console.log(arguments);\r\n    };\r\n\r\n    self.dispatch = function (functionName, paramsNameFn, fn) {\r\n\r\n        if (isString(functionName) && paramsNameFn == \"pass\" && isFunction(fn)) {\r\n            dispatcher[functionName] = {\r\n                fn: fn,\r\n                params: paramsNameFn\r\n            };\r\n        }\r\n        else if (isString(functionName) && isArray(paramsNameFn) && isFunction(fn)) {\r\n            dispatcher[functionName] = {\r\n                fn: fn,\r\n                params: paramsNameFn\r\n            };\r\n        }\r\n        else if (isString(functionName) && isFunction(paramsNameFn) && isUndefined(fn)) {\r\n            dispatcher[functionName] = {\r\n                fn: paramsNameFn,\r\n                params: null\r\n            };\r\n        }\r\n        else {\r\n            throw new Error('Missing required argument: functionName - string, paramsNameFn - string or function');\r\n        }\r\n    };\r\n\r\n    self.on = self.dispatch;\r\n\r\n    self.off = function (functionName) {\r\n      delete dispatcher[functionName];\r\n    };\r\n\r\n    self.call = function (method, params) {\r\n        var _call = call(method, params);\r\n        self.toStream(JSON.stringify(_call.message));\r\n        return _call.promise;\r\n    };\r\n\r\n    self.notification = function (method, params) {\r\n        self.toStream(JSON.stringify(notification(method, params)));\r\n    };\r\n\r\n    self.batch = function (requests) {\r\n        var promises = [];\r\n        var message = [];\r\n\r\n        forEach(requests, function (req) {\r\n            if (req.hasOwnProperty('call')) {\r\n                var _call = call(req.call.method, req.call.params);\r\n                message.push(_call.message);\r\n                //TODO(jershell): batch reject if one promise reject, so catch reject and resolve error as result;\r\n                promises.push(_call.promise.then(function (res) {\r\n                    return res;\r\n                }, function (err) {\r\n                    return err;\r\n                }));\r\n            }\r\n            else if (req.hasOwnProperty('notification')) {\r\n                message.push(notification(req.notification.method, req.notification.params));\r\n            }\r\n        });\r\n\r\n        self.toStream(JSON.stringify(message));\r\n        return _Promise.all(promises);\r\n    };\r\n\r\n    self.messageHandler = function (rawMessage) {\r\n        try {\r\n            var message = JSON.parse(rawMessage);\r\n            return beforeResolve(message);\r\n        }\r\n        catch (e) {\r\n            console.log(\"Error in messageHandler(): \", e);\r\n            self.toStream(JSON.stringify({\r\n                \"id\": null,\r\n                \"jsonrpc\": \"2.0\",\r\n                \"error\": ERRORS.PARSE_ERROR\r\n            }));\r\n            return _Promise.reject(e);\r\n        }\r\n    };\r\n\r\n    self.customException = function (code, message, data) {\r\n        return new ServerError(code, message, data);\r\n    };\r\n};\r\n\r\nexport default simple_jsonrpc;","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2018-2019 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           freemaster-client.js\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\n\r\n/**\r\n * @typedef {Object} CommPortInfo\r\n *\r\n * Communication port information.\r\n *\r\n * @property {string} name              Communication port friendly name\r\n * @property {string} description       Communication port description\r\n * @property {string} connection_string Connection string\r\n * @property {string} elf               Elf file path\r\n */\r\n\r\n/**\r\n * @typedef {Object} BoardInfo\r\n *\r\n * Detected board information.\r\n *\r\n * @property {number} protVer      Protocol version\r\n * @property {number} cfgFlags     Configuration flags\r\n * @property {number} dataBusWdt   Data bus width\r\n * @property {number} globVerMajor Major version\r\n * @property {number} globVerMinor Minor version\r\n * @property {number} cmdBuffSize  Command buffer size\r\n * @property {number} recBuffSize  Receive buffer size\r\n * @property {number} recTimeBase  Recirder time base\r\n * @property {string} descr        Description\r\n */\r\n\r\n/**\r\n * @typedef {Object} SymbolInfo\r\n *\r\n * Symbol information.\r\n *\r\n * @property {string} name Symbol name\r\n * @property {number} addr Symbol address\r\n * @property {number} size Symbol size\r\n * @property {string} type Symbol type\r\n */\r\n\r\n/**\r\n * @typedef {Object} VariableInfo\r\n *\r\n * Variable information.\r\n *\r\n * @property {string} name    Variable name\r\n * @property {number} addr    Variable address\r\n * @property {string} type    Variable type (int, uint, fract, ufract, float, or double)\r\n * @property {number} size    Variable size (1, 2, 4, or 8)\r\n * @property {number} [shift] Number of shift positions (integer variable)\r\n * @property {number} [mask]  And mask applied on integer variable\r\n * @property {number} q_n     Number of bits designating fractional portion of fractional variable\r\n * @property {number} q_m     Number of bits designating integer portion of fractional variable\r\n */\r\n\r\n/**\r\n * @typedef {Object} RecorderLimits\r\n *\r\n * Recorder limits.\r\n *\r\n * @property {number} baseRate_ns   Base time at which recorder operates in nanoseconds (0 when unknown or not deterministic)\r\n * @property {number} buffSize      Total recorder memory size\r\n * @property {number} recStructSize Overhead structure size (protcol version > 4.0)\r\n * @property {number} varStructSize Per-variable overhead structure size (protcol version > 4.0)\r\n */\r\n\r\n/**\r\n * @typedef {Object} RecorderConfig\r\n *\r\n * Recorder configuration.\r\n *\r\n * @property {number} pointsTotal      Total number of recorded points per variable\r\n * @property {number} pointsPreTrigger Number of recorded points before trigger\r\n * @property {number} timeDiv          Time-base multiplier\r\n */\r\n\r\n/**\r\n * @typedef {Object} TriggerVariable\r\n *\r\n * Recorder variable information.\r\n *\r\n * @property {string} name    Variable name\r\n * @property {number} trgType Trigger type\r\n *\r\n * | Mask | Description                            |\r\n * | :--- | :--------------------------------------|\r\n * | 0x04 | trigger-only                           |\r\n * | 0x10 | trigger on rising edge _/              |\r\n * | 0x20 | trigger on falling edge \\_             |\r\n * | 0x40 | 0=normal edge trigger, 1=level trigger |\r\n * | 0x80 | use variable threshold                 |\r\n * @property {number} trgThr Trigger trashold\r\n */\r\n\r\n/* eslint-disable */\r\nimport simple_jsonrpc from \"./simple-jsonrpc-js\"\r\n\r\nvar root = {}\r\nroot.simple_jsonrpc = simple_jsonrpc\r\nroot.WebSocket = WebSocket\r\n\r\n\r\nvar PCM = function(url, onSocketOpen, onSocketClose, onSocketError) {\r\n\r\n    var jrpc = new root.simple_jsonrpc();\r\n    var socket = new root.WebSocket(\"ws://\" + url);\r\n\r\n    this.OnServerError = console.log;\r\n    this.OnSocketOpen = onSocketOpen || console.log;\r\n    this.OnSocketClose = onSocketClose || console.log;\r\n    this.OnSocketError = onSocketError || console.log;\r\n\r\n    jrpc.toStream = function(_msg) {\r\n        socket.send(_msg);\r\n    };\r\n\r\n    socket.onopen = function(event) {\r\n        this.OnSocketOpen(event);\r\n    }.bind(this);\r\n\r\n    socket.onclose = function(event) {\r\n        this.OnSocketClose(event);\r\n    }.bind(this);\r\n\r\n    socket.onerror = function(event) {\r\n        this.OnSocketError(event);\r\n    }.bind(this);\r\n\r\n    socket.onmessage = function(event) {\r\n        jrpc.messageHandler(event.data);\r\n    };\r\n\r\n    function SendRequest(method, args) {\r\n        return new Promise((resolve, reject) => {\r\n            jrpc.call(method, args)\r\n                .then((response) => {\r\n                    if(response.success)\r\n                        resolve(response);\r\n                    else\r\n                        reject(response.error);\r\n                 })\r\n                 .catch((error) => {\r\n                     this.OnServerError(error);\r\n                 });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Requests Freemaster Lite service version.\r\n     *\r\n     * @example\r\n     * pcm.GetAppVersion().then(response => console.log(\"App version \", response.data));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing the version.\r\n     */\r\n    this.GetAppVersion = function() {\r\n        return SendRequest.call(this, 'GetAppVersion');\r\n    };\r\n\r\n    /**\r\n     * Requests communication port name (defined in project file) by index.\r\n     * @see {@link PCM#GetCommPortInfo GetCommPortInfo}\r\n     *\r\n     * @example\r\n     * let index = 0;\r\n     * do {\r\n     *     try {\r\n     *         let response = await pcm.EnumCommPorts(index);\r\n     *         console.log(response.data);\r\n     *         index = index + 1;\r\n     *     } catch (err) {\r\n     *         break;\r\n     *     }\r\n     * } while (true);\r\n     *\r\n     * @param   {number} index Communication port index.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing the connection friendly name.\r\n     */\r\n    this.EnumCommPorts = function(index) {\r\n        return SendRequest.call(this, 'EnumCommPorts', [index]);\r\n    };\r\n\r\n    /**\r\n     * Requests communication port information (defined in project file).\r\n     * @see {@link PCM#EnumCommPorts EnumCommPorts}\r\n     *\r\n     * @example\r\n     * pcm.EnumCommPorts(0).then(response => {\r\n     *     pcm.GetCommPortInfo(response.data).then(response => {\r\n     *         console.log(response.data);\r\n     *     });\r\n     * });\r\n     *\r\n     * @param   {string} name Communiation port friendly name returned by {@link PCM#EnumCommPorts EnumCommPorts}\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link CommPortInfo CommPortInfo}.\r\n     */\r\n    this.GetCommPortInfo = function(name) {\r\n        return SendRequest.call(this, 'GetCommPortInfo', [name]);\r\n    };\r\n\r\n    /**\r\n     * Starts communication using connection friendly name.\r\n     *\r\n     * @example\r\n     * pcm.StartComm(\"PortX\").then(() => console.log(\"Communication port open.\"));\r\n     *\r\n     * @param   {string} name Connection friendly name (defined in project file).\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.StartComm = function(name) {\r\n        return SendRequest.call(this, 'StartComm', [name]);\r\n    };\r\n\r\n    /**\r\n     * Stops communication.\r\n     *\r\n     * @example\r\n     * pcm.StopComm().then(() => console.log(\"Communication port closed.\"));\r\n     *\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.StopComm = function() {\r\n        return SendRequest.call(this, 'StopComm');\r\n    };\r\n\r\n    /**\r\n     * Checks if communication port is open.\r\n     *\r\n     * @example\r\n     * pcm.IsCommPortOpen().then(response => console.log(\"Is port open ? \", response.data));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type bool.\r\n     */\r\n    this.IsCommPortOpen = function() {\r\n        return SendRequest.call(this, 'IsCommPortOpen');\r\n    };\r\n\r\n    /**\r\n     * Checks if the board was detected.\r\n     *\r\n     * @example\r\n     * pcm.IsBoardDetected().then(response => console.log(\"Is board detected ? \", response.data));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type bool.\r\n     */\r\n    this.IsBoardDetected = function() {\r\n        return SendRequest.call(this, 'IsBoardDetected');\r\n    };\r\n\r\n    /**\r\n     * Requests detected board information.\r\n     *\r\n     * @example\r\n     * pcm.GetDetectedBoardInfo().then(response => console.log(\"Board information: \", response.data));\r\n     *\r\n     * @deprecated Since protocol version 4.0\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link BoardInfo BoardInfo} representing board information.\r\n     */\r\n    this.GetDetectedBoardInfo = function() {\r\n        return SendRequest.call(this, 'GetDetectedBoardInfo');\r\n    };\r\n\r\n    /**\r\n     * Requests configuration parameter of type uint8.\r\n     *\r\n     * @example\r\n     * pcm.GetConfigParamU8(\"F1\").then(response => console.log(\"F1: \", response.data));\r\n     *\r\n     * @param   {string} name Parameter name\r\n     *\r\n     * | Name | Description                                   |\r\n     * | :--- | :---------------------------------------------|\r\n     * | F1   | Flags                                         |\r\n     * | RC   | Number of recorders implemented on target     |\r\n     * | SC   | Number of oscilloscopes implemented on target |\r\n     * | PC   | Number of pipes implemented on target         |\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing parameter value.\r\n     */\r\n    this.GetConfigParamU8 = function(name) {\r\n        return SendRequest.call(this, 'GetConfigParamU8', [name]);\r\n    };\r\n\r\n    /**\r\n     * Requests confiugration parameter encoded as ULEB128.\r\n     *\r\n     * @example\r\n     * pcm.GetConfigParamULEB(\"MTU\").then(response => console.log(\"MTU: \", response.data));\r\n     *\r\n     * @param   {string} name Parameter name\r\n     *\r\n     * | Name | Description                                                                       |\r\n     * | :--- | :-------------------------------------------------------------------------------- |\r\n     * | MTU  | Size of an internal communication buffer for handling command and response frames |\r\n     * | BA   | Base address used by optimized memory read/write commands                         |\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing parameter value.\r\n     */\r\n    this.GetConfigParamULEB = function(name) {\r\n        return SendRequest.call(this, 'GetConfigParamULEB', [name]);\r\n    };\r\n\r\n    /**\r\n     * Requests confiugration parameter of type string.\r\n     *\r\n     * | Name | Description             |\r\n     * | :--- | :-----------------------|\r\n     * | VS   | Version string          |\r\n     * | NM   | Application name string |\r\n     * | DS   | Description string      |\r\n     * | BD   | Build date/time string  |\r\n     *\r\n     * @example\r\n     * pcm.GetConfigParamString(\"VS\", 10).then(response => console.log(\"VS: \", response.data));\r\n     *\r\n     * @param   {string} name  Parameter name\r\n     * @param   {number} [len] String byte length, if missing will be set to the service max buffer size (256)\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing parameter value.\r\n     */\r\n    this.GetConfigParamString = function(name, len) {\r\n        return SendRequest.call(this, 'GetConfigParamString', [name, len]);\r\n    };\r\n\r\n    /**\r\n     * Reads a signed integer value from a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadIntVariable(0x20050080, 2).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Integer size, can be 1, 2, 4, or 8.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the read value.\r\n     */\r\n    this.ReadIntVariable = function(addr, size) {\r\n        return SendRequest.call(this, 'ReadIntVariable', [addr, size]);\r\n    };\r\n\r\n    /**\r\n     * Reads an unsigned integer value from a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadUIntVariable('var16', 4).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Integer size, can be 1, 2, 4, or 8.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the read value.\r\n     */\r\n    this.ReadUIntVariable = function(addr, size) {\r\n        return SendRequest.call(this, 'ReadUIntVariable', [addr, size]);\r\n    };\r\n\r\n    /**\r\n     * Reads a float value from a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadFloatVariable('varFLT').then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the read value.\r\n     */\r\n    this.ReadFloatVariable = function(addr) {\r\n        return SendRequest.call(this, 'ReadFloatVariable', [addr]);\r\n    };\r\n\r\n    /**\r\n     * Reads a double value from a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadDoubleVariable('varDBL').then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the read value.\r\n     */\r\n    this.ReadDoubleVariable = function(addr) {\r\n        return SendRequest.call(this, 'ReadDoubleVariable', [addr]);\r\n    };\r\n\r\n    /**\r\n     * Writes a signed integer value to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteIntVariable(0x20050080, 2, 10).then(() => console.log('Value written.'));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Integer size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data   Integer value to be written.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteIntVariable = function(addr, size, data) {\r\n        return SendRequest.call(this, 'WriteIntVariable', [addr, size, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes an unsigned integer value to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteUIntVariable(\"var16\", 2, 100).then(() => console.log('Value written.'));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Integer size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data   Integer value to be written.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteUIntVariable = function(addr, size, data) {\r\n        return SendRequest.call(this, 'WriteUIntVariable', [addr, size, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes a float value to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteFloatVariable(\"varFLT\", 10.0).then(() => console.log('Value written.'));\r\n     *\r\n     * @param   {number|string} addr Address value or symbol name.\r\n     * @param   {Array<number>} data Float value to be written.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteFloatVariable = function(addr, data) {\r\n        return SendRequest.call(this, 'WriteFloatVariable', [addr, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes a double value to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteDoubleVariable(\"varDBL\", 100.0).then(() => console.log('Value written.'));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {Array<number>} data   Double value to be written.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteDoubleVariable = function(addr, data) {\r\n        return SendRequest.call(this, 'WriteDoubleVariable', [addr, data]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of signed integers from a memory location.\r\n     *\r\n     * @example\r\n     * // read 20, 2 byte long, signed integers from address 0x20050080\r\n     * pcm.ReadUIntArray(0x20050080, 20, 2).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Number of elements.\r\n     * @param   {number}        elSize Element size, can be 1, 2, 4, or 8.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.ReadIntArray = function(addr, size, elSize) {\r\n        return SendRequest.call(this, 'ReadIntArray', [addr, size, elSize]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of unsigned integers from a memory location.\r\n     *\r\n     * @example\r\n     * // read 10, 4 byte long, unsigned integers from the address given by the symbol 'arr16'\r\n     * pcm.ReadIntArray('arr16', 10, 4).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Number of elements.\r\n     * @param   {number}        elSize Element size, can be 1, 2, 4, or 8.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.ReadUIntArray = function(addr, size, elSize) {\r\n        return SendRequest.call(this, 'ReadUIntArray', [addr, size, elSize]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of floats from a memory location.\r\n     *\r\n     * @example\r\n     * // read 5 floats from the address given by the symbol 'arrFLT'\r\n     * pcm.ReadFloatArray('arrFLT', 5).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Number of elements.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.ReadFloatArray = function(addr, size) {\r\n        return SendRequest.call(this, 'ReadFloatArray', [addr, size]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of doubles from a memory location.\r\n     *\r\n     * @example\r\n     * // read 5 doubles from the address given by the symbol 'arrDBL'\r\n     * pcm.ReadDoubleArray('arrDBL', 5).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Number of elements.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.ReadDoubleArray = function(addr, size) {\r\n        return SendRequest.call(this, 'ReadDoubleArray', [addr, size]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of signed integers to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteIntArray(0x20050080, 2, [1, 2, 3, 4, 5]).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        elSize Element size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data   Array of integers to be written.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.WriteIntArray = function(addr, elSize, data) {\r\n        return SendRequest.call(this, 'WriteIntArray', [addr, elSize, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of unsigned integers to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteUIntArray('arr16', 4, [100, 1000, 10000, 100000, 1000000]).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        elSize Element size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data   Array of integers to be written.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.WriteUIntArray = function(addr, elSize, data) {\r\n        return SendRequest.call(this, 'WriteUIntArray', [addr, elSize, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of floats to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.ReadFloatArray('arrFLT', [1.0, 2.0, 3.0, 4.0, 5.0]).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        data   Array of floats to be written.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.WriteFloatArray = function(addr, data) {\r\n        return SendRequest.call(this, 'WriteFloatArray', [addr, data]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of doubles to a memory location.\r\n     *\r\n     * @example\r\n     * pcm.WriteDoubleArray('arrDBL', [1.0, 2.0, 3.0, 4.0, 5.0]).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number|string} addr   Address value or symbol name.\r\n     * @param   {number}        size   Array of doubles to be written.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.WriteDoubleArray = function(addr, data) {\r\n        return SendRequest.call(this, 'WriteDoubleArray', [addr, data]);\r\n    };\r\n\r\n    /**\r\n     * Sends the command to read symbols from the elf file associated with the current connection (defined in project file).\r\n     * @see {@link PCM#EnumSymbols EnumSymbols}\r\n     *\r\n     * @example\r\n     * pcm.ReadELF().then(response => console.log(response.data.count + \" symbols extracted from ELF file.\"));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain the number of extracted symbols.\r\n     */\r\n    this.ReadELF = function(elfFile) {\r\n        return SendRequest.call(this, 'ReadELF', [elfFile]);\r\n    };\r\n\r\n    /**\r\n     * Sends the command to read read symbols from the TSA table from the connected target.\r\n     * @see {@link PCM#EnumSymbols EnumSymbols}\r\n     *\r\n     * @example\r\n     * pcm.ReadTSA().then(response => console.log(response.data.count + \" symbols extracted from TSA table.\"));\r\n     *\r\n     * @returns {Promise} In case of success, resolved promise will contain the number of extracted symbols.\r\n     */\r\n    this.ReadTSA = function() {\r\n        return SendRequest.call(this, 'ReadTSA');\r\n    };\r\n\r\n    /**\r\n     * Requests symbol (extracted from ELF file or TSA table) name by index.\r\n     * @see {@link PCM#ReadELF ReadELF}\r\n     * @see {@link PCM#ReadTSA ReadTSA}\r\n     * @see {@link PCM#GetSymbolInfo GetSymbolInfo}\r\n     *\r\n     * @example\r\n     * let index = 0;\r\n     * do {\r\n     *     try {\r\n     *         let response = await pcm.EnumSymbols(index);\r\n     *         console.log(response.data);\r\n     *         index = index + 1;\r\n     *     } catch (err) {\r\n     *         break;\r\n     *     }\r\n     * } while (true);\r\n     *\r\n     * @param   {number} index Symbol index.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing the symbol name.\r\n     */\r\n    this.EnumSymbols = function(index) {\r\n        return SendRequest.call(this, 'EnumSymbols', [index]);\r\n    };\r\n\r\n    /**\r\n     * Requests symbol information.\r\n     * @see {@link PCM#EnumSymbols EnumSymbols}\r\n     *\r\n     * @example\r\n     * pcm.EnumSymbols(0).then(response => {\r\n     *     pcm.GetSymbolInfo(response.data).then(response => {\r\n     *         console.log(response.data);\r\n     *     });\r\n     * });\r\n     *\r\n     * @param   {string} name Symbol name returned by {@link PCM#EnumSymbols EnumSymbols}\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link SymbolInfo SymbolInfo}.\r\n     */\r\n    this.GetSymbolInfo = function(name) {\r\n        return SendRequest.call(this, 'GetSymbolInfo', [name]);\r\n    };\r\n\r\n    /**\r\n     * Requests variable name by index.\r\n     * @see {@link PCM#DefineVariable DefineVariable}\r\n     * @see {@link PCM#GetVariableInfo GetVariableInfo}\r\n     *\r\n     * @example\r\n     * let index = 0;\r\n     * do {\r\n     *     try {\r\n     *     let response = await pcm.EnumVariables(index);\r\n     *     console.log(response.data);\r\n     *     index = index + 1;\r\n     *     } catch (err) {\r\n     *         break;\r\n     *     }\r\n     * } while (true);\r\n     *\r\n     * @param   {number} index Variable index.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string representing the variable name.\r\n     */\r\n    this.EnumVariables = function(index) {\r\n        return SendRequest.call(this, 'EnumVariables', [index]);\r\n    };\r\n\r\n    /**\r\n     * Requests variable information.\r\n     * @see {@link PCM#DefineVariable DefineVariable}\r\n     *\r\n     * @example\r\n     * pcm.EnumVariables(0).then(response => {\r\n     *     pcm.GetVariableInfo(response.data).then(response => {\r\n     *         console.log(response.data);\r\n     *     });\r\n     * });\r\n     *\r\n     * @param   {string} name Variable name.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link VariableInfo VariableInfo}.\r\n     */\r\n    this.GetVariableInfo = function(name) {\r\n        return SendRequest.call(this, 'GetVariableInfo', [name]);\r\n    };\r\n\r\n    /**\r\n     * Defines a variable.\r\n     *\r\n     * @example\r\n     * let variable = { name: \"var16\", addr: 0x20050080, type: \"uint\", size: 4 }\r\n     * pcm.DefineVariable(variable).then(() => console.log(\"Variable successfully defined.\"));\r\n     *\r\n     * @param   {VariableInfo} variable Variable information\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.DefineVariable = function(variable) {\r\n        return SendRequest.call(this, 'DefineVariable', [variable]);\r\n    };\r\n\r\n    /**\r\n     * Delete an user defined variable (except those defined in project file).\r\n     *\r\n     * @example\r\n     * pcm.DeleteVariable(\"var16\").then(() => console.log(\"Variale deleted.\"));\r\n     *\r\n     * @param   {string} name Variable name.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.DeleteVariable = function(name) {\r\n        return SendRequest.call(this, 'DeleteVariable', [name]);\r\n    };\r\n\r\n    /**\r\n     * Deletes all user defined variables (except those defined in project file).\r\n     *\r\n     * @example\r\n     * pcm.DeleteAllScriptVariables().then(() => console.log(\"Script variales deleted.\"));\r\n     *\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.DeleteAllScriptVariables = function() {\r\n        return SendRequest.call(this, 'DeleteAllScriptVariables');\r\n    };\r\n\r\n    /**\r\n     * Reads variable value according to the predefined variable information.\r\n     * @see {@link PCM#DefineVariable DefineVariable}\r\n     *\r\n     * @example\r\n     * pcm.ReadVariable(\"var16\").then(response => console.log(response.data));\r\n     *\r\n     * @param   {string} name Variable name.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing variable value.\r\n     */\r\n    this.ReadVariable = function(name) {\r\n        return SendRequest.call(this, 'ReadVariable', [name]);\r\n    };\r\n\r\n    /**\r\n     * Writes a variable value according to the predefined variable information.\r\n     * @see {@link PCM#DefineVariable DefineVariable}\r\n     *\r\n     * @example\r\n     * pcm.WriteVariable(\"var16\", 255).then(() => console.log(\"Value successfully written.\"));\r\n     *\r\n     * @param   {string} name Variable name.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.WriteVariable = function(name, value) {\r\n        return SendRequest.call(this, 'WriteVariable', [name, value]);\r\n    };\r\n\r\n    /**\r\n     * Setups an oscilloscope with a specific ID.\r\n     *\r\n     * Notes:\r\n     * * Scope ID should be in the target supported range (defined in the embedded application).\r\n     * * All the variables should be defiend prior to scope definition.\r\n     * * Older protocol version (< 4.0) support only one scope instance.\r\n     *\r\n     * @see {@link PCM#GetOscilloscopeData GetOscilloscopeData}\r\n     *\r\n     * @example\r\n     * let id = 0;\r\n     * let vars = ['myVAr1', 'myVar2', 'myVar3'];\r\n     * pcm.SetupOscilloscope(id, vars).then(() => console.log(\"Scope was setup successfully.\"));\r\n     *\r\n     * @param   {number}        id   Oscilloscope ID.\r\n     * @param   {Array<string>} vars Oscilloscope variables names.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.SetupOscilloscope = function(id, vars) {\r\n        return SendRequest.call(this, 'SetupOscilloscope', [id, vars]);\r\n    };\r\n\r\n    /**\r\n     * Requests oscilloscope data.\r\n     *\r\n     * The values will be returned in the format defined by each variable.\r\n     *\r\n     * @see {@link PCM#SetupOscilloscope SetupOscilloscope}\r\n     *\r\n     * @example\r\n     * let id = 0;\r\n     * let vars = ['myVAr1', 'myVar2', 'myVar3'];\r\n     * pcm.SetupOscilloscope(id, vars).then(() => {\r\n     *     pcm.GetOscilloscopeData(id).then(response => console.log(response.data));\r\n     * });\r\n     *\r\n     * @param   {number} id Scope ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type array of numbers (variables corresponding values in the defined order).\r\n     */\r\n    this.GetOscilloscopeData = function(id) {\r\n        return SendRequest.call(this, 'GetOscilloscopeData', [id]);\r\n    };\r\n\r\n    /**\r\n     * Requests recorder limits.\r\n     *\r\n     * @example\r\n     * let id = 0;\r\n     * pcm.GetRecorderLimits(id).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type {@link RecorderLimits RecorderLimits}.\r\n     */\r\n    this.GetRecorderLimits = function(id) {\r\n        return SendRequest.call(this, 'GetRecorderLimits', [id]);\r\n    };\r\n\r\n    /**\r\n     * Setups a recorder with a specific ID.\r\n     *\r\n     * Notes:\r\n     * * Recorder ID should be in the target supported range (defined in the embedded application).\r\n     * * All the variables should be defiend prior to recorder definitions.\r\n     * * Older protocol version (< 4.0) support only one recorder instance.\r\n     *\r\n     * @example\r\n     * let id = 0;\r\n     * let config = {\r\n     *     pointsTotal: 100,\r\n     *     pointsPreTrigger: 50,\r\n     *     timeDiv: 1\r\n     * };\r\n     * let recVars = ['myVAr1', 'myVar2', 'myVar3'];\r\n     * let trgVars = [{ name: 'myVar2', trgType: 0x11, trgThr: 2000 }];\r\n     * pcm.SetupRecorder(id, config, recVars, trgVars).then(() => console.log(\"Recorder was setup successfully.\"));\r\n     *\r\n     * @param   {number}                 id      Recorder ID.\r\n     * @param   {RecorderConfig}         config  Recorder configuartion.\r\n     * @param   {Array<string>}          recVars Recorded variables.\r\n     * @param   {Array<TriggerVariable>} trgVars Trigger variables.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.SetupRecorder = function(id, config, recVars, trgVars) {\r\n        return SendRequest.call(this, 'SetupRecorder', [id, config, recVars, trgVars]);\r\n    };\r\n\r\n    /**\r\n     * Starts a recorder.\r\n     * @see {@link PCM#SetupRecorder SetupRecorder}\r\n     *\r\n     * @example\r\n     * pcm.StartRecorder(id).then(() => console.log(\"Recorder started\"));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.StartRecorder = function(id) {\r\n        return SendRequest.call(this, 'StartRecorder', [id]);\r\n    };\r\n\r\n    /**\r\n     * Stops a recorder.\r\n     * @see {@link PCM#SetupRecorder SetupRecorder}\r\n     * @see {@link PCM#StartRecorder StartRecorder}\r\n     *\r\n     * @example\r\n     * pcm.StopRecorder(id).then(() => console.log(\"Recorder stoped\"));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.StopRecorder = function(id) {\r\n        return SendRequest.call(this, 'StopRecorder', [id]);\r\n    };\r\n\r\n    /**\r\n     * Requests recorder status.\r\n     * @see {@link PCM#SetupRecorder SetupRecorder}\r\n     * @see {@link PCM#StartRecorder StartRecorder}\r\n     *\r\n     * @example\r\n     * pcm.GetRecorderStatus(id).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     *\r\n     * | Code | Status                           |\r\n     * | :--- | :------------------------------- |\r\n     * | 0x00 | not configured                   |\r\n     * | 0x01 | configured, stoped, no data      |\r\n     * | 0x02 | running                          |\r\n     * | 0x04 | stopped, not enough data sampled |\r\n     * | 0x05 | stopped, data ready              |\r\n     */\r\n    this.GetRecorderStatus = function(id) {\r\n        return SendRequest.call(this, 'GetRecorderStatus', [id]);\r\n    };\r\n\r\n    /**\r\n     * Gets recorded data.\r\n     *\r\n     * @example\r\n     * pcm.GetRecorderData(id).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} id Recorder ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type array of arrays of numbers.\r\n     */\r\n    this.GetRecorderData = function(id) {\r\n        return SendRequest.call(this, 'GetRecorderData', [id]);\r\n    };\r\n\r\n    /**\r\n     * Opens a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeOpen(0, 100, 100).then(() => console.log(\"Pipe open.\"));\r\n     *\r\n     * @param   {number} port         Pipe ID.\r\n     * @param   {number} txBufferSize Send buffer size.\r\n     * @param   {number} rxBufferSize Receive buffer size.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeOpen = function(port, txBufferSize, rxBufferSize) {\r\n        return SendRequest.call(this, 'PipeOpen', [port, txBufferSize, rxBufferSize]);\r\n    };\r\n\r\n    /**\r\n     * Closes a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeClose(0).then(() => console.log(\"Pipe closed.\"));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeClose = function(port) {\r\n        return SendRequest.call(this, 'PipeClose', [port]);\r\n    };\r\n\r\n    /**\r\n     * Flushes a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeFlush(0).then(() => console.log(\"Pipe flushed.\"));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeFlush = function(port, timeout) {\r\n        return SendRequest.call(this, 'PipeFlush', [port, timeout]);\r\n    };\r\n\r\n    /**\r\n     * Sets pipes default receive mode.\r\n     *\r\n     * @example\r\n     * pcm.PipeSetDefaultRxMode(false, 100).then(() => console.log(\"Default RX mode updated.\"));\r\n     *\r\n     * @param   {boolean} rxAllOrNothing Flag specifying whether the data should be read all at once.\r\n     * @param   {number}  rxTimeout_ms   Read timeout in milliseconds.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeSetDefaultRxMode = function(rxAllOrNothing, rxTimeout_ms) {\r\n        return SendRequest.call(this, 'PipeSetDefaultRxMode', [rxAllOrNothing, rxTimeout_ms]);\r\n    };\r\n\r\n    /**\r\n     * Sets pipes default string mode.\r\n     *\r\n     * @example\r\n     * pcm.PipeSetDefaultStringMode(false).then(() => console.log(\"Default string mode updated.\"));\r\n     *\r\n     * @param   {boolean} unicode Flag specifying whether the string are using unicode encoding.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.PipeSetDefaultStringMode = function(unicode) {\r\n        return SendRequest.call(this, 'PipeSetDefaultStringMode', [unicode]);\r\n    };\r\n\r\n    /**\r\n     * Requests the number of bytes pending on the receive buffer.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetRxBytes(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetRxBytes = function(port) {\r\n        return SendRequest.call(this, 'PipeGetRxBytes', [port]);\r\n    };\r\n\r\n    /**\r\n     * Requests the number of bytes pending on the send buffer.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetTxBytes(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetTxBytes = function(port) {\r\n        return SendRequest.call(this, 'PipeGetTxBytes', [port]);\r\n    };\r\n\r\n    /**\r\n     * Requests the number of free bytes from the send buffer.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetTxFree(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Port number that identified the pipe.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetTxFree = function(port) {\r\n        return SendRequest.call(this, 'PipeGetTxFree', [port]);\r\n    };\r\n\r\n    /**\r\n     * Requests the receive buffer size of a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetRxBufferSize(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetRxBufferSize = function(port) {\r\n        return SendRequest.call(this, 'PipeGetRxBufferSize', [port]);\r\n    };\r\n\r\n    /**\r\n     * Requests the send buffer size of a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeGetTxBufferSize(0).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number} port Pipe ID.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number.\r\n     */\r\n    this.PipeGetTxBufferSize = function(port) {\r\n        return SendRequest.call(this, 'PipeGetTxBufferSize', [port]);\r\n    };\r\n\r\n    /**\r\n     * Writes a string to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteString(0, \"Hello world!\", false, false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  port         Pipe ID.\r\n     * @param   {string}  str          String to be written to the pipe.\r\n     * @param   {boolean} allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @param   {boolean} unicode      Flag specifying whether the string is unicode encoded.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen characters.\r\n     */\r\n    this.PipeWriteString = function(port, str, allOrNothing, unicode) {\r\n        return SendRequest.call(this, 'PipeWriteString', [port, str, allOrNothing, unicode]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of signed integers to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteIntArray(0, 2, [1, 2, 3, 4, 5], false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}        port         Pipe ID.\r\n     * @param   {number}        elSize       Element size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data         Array of integers to be written.\r\n     * @param   {boolean}       allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.PipeWriteIntArray = function(port, elSize, data, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeWriteIntArray', [port, elSize, data, allOrNothing]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of unsigned integers to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteUIntArray(0, 4, [100, 200, 300, 400, 500], false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}        port         Pipe ID.\r\n     * @param   {number}        elSize       Element size, can be 1, 2, 4, or 8.\r\n     * @param   {Array<number>} data         Array of integers to be written.\r\n     * @param   {boolean}       allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.PipeWriteUIntArray = function(port, elSize, data, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeWriteUIntArray', [port, elSize, data, allOrNothing]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of floats to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteFloatArray(0, [1.0, 2.0, 3.0, 4.0, 5.0], false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}        port         Pipe ID.\r\n     * @param   {Array<number>} data         Array of integers to be written.\r\n     * @param   {boolean}       allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.PipeWriteFloatArray = function(port, data, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeWriteFloatArray', [port, data, allOrNothing]);\r\n    };\r\n\r\n    /**\r\n     * Writes an array of doubles to a pipe.\r\n     *\r\n     * @example\r\n     * pcm.PipeWriteDoubleArray(0, [10.0, 20.0, 30.0, 40.0, 50.0], false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}        port         Pipe ID.\r\n     * @param   {Array<number>} data         Array of integers to be written.\r\n     * @param   {boolean}       allOrNothing Flag specifying whether the string should be sent all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of successfully writen array elements.\r\n     */\r\n    this.PipeWriteDoubleArray = function(port, data, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeWriteDoubleArray', [port, data, allOrNothing]);\r\n    };\r\n\r\n   /**\r\n    * Reads a string from a pipe.\r\n    *\r\n    * @example\r\n    * pcm.PipeReadString(0, 100, 512, false, false).then(response => console.log(response.data));\r\n    *\r\n    * @param   {number}  port         Pipe ID.\r\n    * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n    * @param   {number}  charsToRead  Number of characters to read.\r\n    * @param   {boolean} allOrNothing Flag specifying whether the string should be read all at once.\r\n    * @param   {boolean} unicode      Flag specifying whether the string is unicode encoded.\r\n    * @returns {Promise} In case of success, resolved promise will contain data property of type number string.\r\n    */\r\n    this.PipeReadString = function(port, rxTimeout_ms, charsToRead, allOrNothing, unicode) {\r\n        return SendRequest.call(this, 'PipeReadString', [port, rxTimeout_ms, charsToRead, allOrNothing, unicode]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of signed integers from a piep.\r\n     *\r\n     * @example\r\n     * pcm.PipeReadIntArray(0, 2, 100, 100, false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  port         Pipe ID.\r\n     * @param   {number}  elSize       Element size, can be 1, 2, 4, or 8.\r\n     * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n     * @param   {number}  size         The size of the array (number of elements).\r\n     * @param   {boolean} allOrNothing Flag specifying whether the array should be read all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.PipeReadIntArray = function(port, elSize, rxTimeout_ms, size, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeReadIntArray', [port, elSize, rxTimeout_ms, size, allOrNothing]);\r\n    };\r\n\r\n    /**\r\n     * Reads an array of unsigned integers from a piep.\r\n     *\r\n     * @example\r\n     * pcm.PipeReadUIntArray(0, 4, 100, 100, false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  port         Pipe ID.\r\n     * @param   {number}  elSize       Element size, can be 1, 2, 4, or 8.\r\n     * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n     * @param   {number}  size         The size of the array (number of elements).\r\n     * @param   {boolean} allOrNothing Flag specifying whether the array should be read all at once.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n     */\r\n    this.PipeReadUIntArray = function(port, elSize, rxTimeout_ms, size, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeReadUIntArray', [port, elSize, rxTimeout_ms, size, allOrNothing]);\r\n    };\r\n\r\n   /**\r\n    * Reads an array of floats from a piep.\r\n    *\r\n    * @example\r\n    * pcm.PipeReadFloatArray(0, 100, 100, false).then(response => console.log(response.data));\r\n    *\r\n    * @param   {number}  port         Pipe ID.\r\n    * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n    * @param   {number}  size         The size of the array (number of elements).\r\n    * @param   {boolean}  allOrNothing Flag specifying whether the array should be read all at once.\r\n    * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n    */\r\n    this.PipeReadFloatArray = function(port, rxTimeout_ms, size, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeReadFloatArray', [port, rxTimeout_ms, size, allOrNothing]);\r\n    };\r\n\r\n   /**\r\n    * Reads an array of doubles from a piep.\r\n    *\r\n    * @example\r\n    * pcm.PipeReadDoubleArray(0, 100, 100, false).then(response => console.log(response.data));\r\n    *\r\n    * @param   {number}  port         Pipe ID.\r\n    * @param   {number}  rxTimeout_ms Read timeout in milliseconds.\r\n    * @param   {number}  size         The size of the array (number of elements).\r\n    * @param   {boolean} allOrNothing Flag specifying whether the array should be read all at once.\r\n    * @returns {Promise} In case of success, resolved promise will contain data property of type Array<number>.\r\n    */\r\n    this.PipeReadDoubleArray = function(port, rxTimeout_ms, size, allOrNothing) {\r\n        return SendRequest.call(this, 'PipeReadDoubleArray', [port, rxTimeout_ms, size, allOrNothing]);\r\n    };\r\n\r\n   /**\r\n    * Opens a file on the mashine the servce is running one.\r\n    * @see {@link PCM#LocalFileClose LocalFileClose}\r\n    *\r\n    * @example\r\n    * pcm.LocalFileOpen(\"D:\\\\Temp\\\\temp.txt\", \"w+\").then(() => console.log(\"File open.\");\r\n    *\r\n    * @param   {string} file Path to the file.\r\n    * @param   {string} mode NodeJS file system {@link https://nodejs.org/api/fs.html#fs_file_system_flags flags}.\r\n    * @returns {Promise} In case of success, resolved promise will contain data property of type number representing file descriptor.\r\n    */\r\n    this.LocalFileOpen = function(file, mode) {\r\n        return SendRequest.call(this, 'LocalFileOpen', [file, mode]);\r\n    };\r\n\r\n   /**\r\n    * Closes a file.\r\n    * @see {@link PCM#LocalFileOpen LocalFileOpen}\r\n    *\r\n    * @example\r\n    * let result = await pcm.LocalFileClose(3).then(() => console.log(\"File closed.\"));\r\n    *\r\n    * @param   {number} handle File descriptor.\r\n    * @returns {Promise} The result does not carry any relevant data.\r\n    */\r\n    this.LocalFileClose = function(handle) {\r\n        return SendRequest.call(this, 'LocalFileClose', [handle]);\r\n    };\r\n\r\n    /**\r\n     * Reads a string from an open file.\r\n     * @see {@link PCM#LocalFileOpen LocalFileOpen}\r\n     *\r\n     * @example\r\n     * pcm.LocalFileReadString(3, 255, false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  handle      File descriptor.\r\n     * @param   {number}  charsToRead Numbers of characters to read.\r\n     * @param   {boolean} unicode     Flag specifying whether the string is unicode encoded.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type string.\r\n     */\r\n    this.LocalFileReadString = function(handle, charsToRead, unicode) {\r\n        return SendRequest.call(this, 'LocalFileReadString', [handle, charsToRead, unicode]);\r\n    };\r\n\r\n    /**\r\n     * Writes a string to an open file.\r\n     * @see {@link PCM#LocalFileOpen LocalFileOpen}\r\n     *\r\n     * @example\r\n     * pcm.LocalFileWriteString(3, \"Hello world!\", false).then(response => console.log(response.data));\r\n     *\r\n     * @param   {number}  handle      File descriptor.\r\n     * @param   {number}  str         String to write.\r\n     * @param   {boolean} unicode     Flag specifying whether the string is unicode encoded.\r\n     * @param   {boolean} size        Length of the string to write, optional, writes the full 'str' length if undefined.\r\n     * @returns {Promise} In case of success, resolved promise will contain data property of type number representing the number of written characters.\r\n     */\r\n    this.LocalFileWriteString = function(handle, str, unicode, size) {\r\n        return SendRequest.call(this, 'LocalFileWriteString', [handle, str, unicode, size]);\r\n    };\r\n\r\n    /**\r\n     * Enables communication library logger.\r\n     * @see {@link PCM#LogDisable LogDisable}\r\n     *\r\n     * @example\r\n     * pcm.LogEnable(\"Test logger\", \"Test logger.log\").then(() => console.log(\"Logger enabled.\"));\r\n     *\r\n     * @param   {string}  name  Logger name.\r\n     * @param   {string}  file  Logger file, if empty all the loggs will be printed in standard output.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogEnable = function(name, file) {\r\n        return SendRequest.call(this, 'LogEnable', [name, file]);\r\n    };\r\n\r\n    /**\r\n     * Disables communication library logger.\r\n     * @see {@link PCM#LogEnable LogEnable}\r\n     *\r\n     * @example\r\n     * pcm.LogDisable().then(() => console.log(\"Logger disabled.\"));\r\n     *\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogDisable = function() {\r\n        return SendRequest.call(this, 'LogDisable');\r\n    };\r\n\r\n    /**\r\n     * Sets logging pattern. Refer to [spdlog wiki]{@link https://github.com/gabime/spdlog/wiki/3.-Custom-formatting#pattern-flags} for the list of available flags.\r\n     *\r\n     * @example\r\n     * pcm.LogSetPattern(\"[%Y-%m-%d %T.%f]: %v\").then(() => console.log(\"Logger pattern updated.\"));\r\n     *\r\n     * @param   {string}  pattern  Logging pattern.\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogSetPattern = function(pattern) {\r\n        return SendRequest.call(this, 'LogSetPattern', [pattern]);\r\n    };\r\n\r\n    /**\r\n     * Sets logging verbosity level.\r\n     *\r\n     * @example\r\n     * pcm.LogSetVerbosity(2).then(() => console.log(\"Verbosity level set to normal.\"));\r\n     *\r\n     * @param   {number}  verbosity  Logging verbosity level.\r\n     *\r\n     * | Level | Description |\r\n     * | :---- | :---------- |\r\n     * | 0     | OFF         |\r\n     * | 1     | Minimal     |\r\n     * | 2     | Normal      |\r\n     * | 3     | Medium      |\r\n     * | 4     | High        |\r\n     * | 5     | All         |\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogSetVerbosity = function(verbosity) {\r\n        return SendRequest.call(this, 'LogSetVerbosity', [verbosity]);\r\n    };\r\n\r\n    /**\r\n     * Sets logging service filter.\r\n     *\r\n     * @example\r\n     * // 0xFFFF - disables all current filters\r\n     * // 0x0002 | 0x0004 - enables read and write filtering\r\n     * pcm.LogSetServices(0xFFFF, 0x0002 | 0x0004).then(() => console.log(\"Filtering read and write services.\"));\r\n     *\r\n     * @param   {number}  mask      Mask that will disable current filterred services.\r\n     * @param   {number}  services  Mask of services flags to be added to the filter.\r\n     *\r\n     * | Mask   | Service     |\r\n     * | :----- | :---------- |\r\n     * | 0x0001 | Port setup  |\r\n     * | 0x0002 | Data Read   |\r\n     * | 0x0004 | Data Write  |\r\n     * | 0x0008 | Scope       |\r\n     * | 0x0010 | Recorder    |\r\n     * | 0x0020 | App command |\r\n     * | 0x0040 | SFIO        |\r\n     * | 0x0080 | TSA         |\r\n     * | 0x0100 | PIPE        |\r\n     * | 0x0200 | Poolling    |\r\n     * | 0xFFFF | All         |\r\n     * @returns {Promise} The result does not carry any relevant data.\r\n     */\r\n    this.LogSetServices = function(mask, services) {\r\n        return SendRequest.call(this, 'LogSetServices', [mask, services]);\r\n    };\r\n\r\n    /**\r\n     * Extends the object by extra methods and events available in full FreeMASTER UI application only.\r\n     * Use this call in Control Pages and other scripts targeting the FreeMASTER application. Note that\r\n     * the extra features will NOT work with FreeMASTER Lite service.\r\n     *\r\n     * @example\r\n     * pcm.EnableExtraFeatures(true);\r\n     * pcm.EnableEvents(true);\r\n     * pcm.OnBoardDetected = function() { console.log(\"Board connection has been established.\"); }\r\n     */\r\n    this.EnableExtraFeatures = function(enable) {\r\n\r\n        if(enable) {\r\n            /* TODO: throw an exception if this file has been retrieved from the Lite service. */\r\n        }\r\n        else {\r\n            /* Don't allow to disable the features once enabled. This behavior is subject to change in future versions. */\r\n            if(this.EnableEvents) {\r\n                throw \"Can't disable ExtraFeatures after enabled once\";\r\n            }\r\n\r\n            /* Nothing to do, extra features remain disabled. */\r\n            return;\r\n        }\r\n\r\n        /* Install default FreeMASTER event handlers. Don't forget to call EnableEvents(true) for the server to generate the JSON-RPC events. */\r\n        if(!this.OnBoardDetected) {\r\n            this.OnBoardDetected = function() {\r\n                console.log(\"FreeMASTER Event received: OnBoardDetected()\");\r\n            };\r\n        }\r\n\r\n        if(!this.OnCommPortStateChanged) {\r\n            this.OnCommPortStateChanged = function(state) {\r\n                console.log(\"FreeMASTER Event received: OnCommPortStateChanged(\" + state + \")\");\r\n            };\r\n        }\r\n\r\n        if(!this.OnVariableChanged) {\r\n            this.OnVariableChanged = function(name, id, value) {\r\n                console.log(\"FreeMASTER Event received: OnVariableChanged(\\\"\" + name + \"\\\", \" + id + \", \" + value + \")\");\r\n            };\r\n        }\r\n\r\n        if(!this.OnRecorderDone) {\r\n            this.OnRecorderDone = function() {\r\n                console.log(\"FreeMASTER Event received: OnRecorderDone()\");\r\n            };\r\n        }\r\n\r\n        /* Register event handlers in JSON-RPC */\r\n        jrpc.dispatch(\"OnBoardDetected\", \"pass\", (params_array) => this.OnBoardDetected.apply(null, params_array) );\r\n        jrpc.dispatch(\"OnCommPortStateChanged\", \"pass\", (params_array) => this.OnCommPortStateChanged.apply(null, params_array) );\r\n        jrpc.dispatch(\"OnVariableChanged\", \"pass\", (params_array) => this.OnVariableChanged.apply(null, params_array) );\r\n        jrpc.dispatch(\"OnRecorderDone\", \"pass\", (params_array) => this.OnRecorderDone.apply(null, params_array) );\r\n\r\n        /**\r\n         * Start or stop the communication. This call is provided for backward compatibility with ActiveX \r\n         * interface only. Use the StartComm and StopComm methods in new designs.\r\n         *\r\n         * @example\r\n         * pcm.StartStopComm(true).then(console.log(\"Communication port is open\"));\r\n         *\r\n         * @param   {boolean} start    Start or stop communication.\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.StartStopComm = function(start) {\r\n            return SendRequest.call(this, 'StartStopComm', [start]);\r\n        };\r\n\r\n        /**\r\n         * Enable or disable events to be generated by the server side for this JSON-RPC session. \r\n         *\r\n         * @example\r\n         * function MyBoardDetectionHandler(name, id, value) {\r\n         *   console.log(\"Board is detected\");\r\n         * }\r\n         * pcm.OnBoardDetected = MyBoardDetectionHandler;\r\n         * pcm.EnableEvents(true).then(console.log(\"Events are enabled\"));\r\n         *\r\n         * @param   {boolean} enable      Enable or disable events.\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.EnableEvents = function(enable) {\r\n            return SendRequest.call(this, 'EnableEvents', [enable]);\r\n        };\r\n\r\n        /**\r\n         * Subscribe to variable changes at given testing period. When a variable is subscribed, FreeMASTER reads\r\n         * the variable periodically and raises 'OnVariableChanged' event when a value change is detected. The events\r\n         * need to be enabled by calling EnableEvents(true). \r\n         * Event handler should have three parameters: 'name', 'id' and 'value'.\r\n         *\r\n         * @example\r\n         * function MyVariableChangedHandler(name, id, value) {\r\n         *   console.log(\"Variable \" + name + \" has changed to value \" + value);\r\n         * }\r\n         * pcm.OnVariableChanged = MyVariableChangedHandler;\r\n         * pcm.SubscribeVariable(name).then(console.log(\"Variable is subscribed\"));\r\n         *\r\n         * @param   {string}  name      Variable name.\r\n         * @param   {number}  interval  Testing interval in milliseconds.\r\n         * @returns {Promise} In case of success, resolved promise will contain 'xtra.subscriptionId' member which identifies the subscription.\r\n         */\r\n        this.SubscribeVariable = function(name, interval) {\r\n            return SendRequest.call(this, 'SubscribeVariable', [name, interval]);\r\n        };\r\n\r\n       /**\r\n        * Unsubscribe from variable changes subscribed previously with SubscribeVariable. \r\n        *\r\n        * @example\r\n        * pcm.UnsubscribeVariable(name).then(console.log(\"Variable is un-subscribed\"));\r\n        *\r\n        * @param   {string}  name_or_id   Variable name or subscription identifier returned by previous SubscribeVariable call.\r\n        * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n        */\r\n        this.UnSubscribeVariable = function(name_or_id) {\r\n            return SendRequest.call(this, 'UnSubscribeVariable', [name_or_id]);\r\n        };\r\n\r\n        /**\r\n         * Define symbol.\r\n         *\r\n         * @example\r\n         * pcm.DefineSymbol(name, address, type, size).then((result) => console.log(\"Symbol defined\"));\r\n         *\r\n         * @param   {string}  name     Symbol name.\r\n         * @param   {string}  address  Address.\r\n         * @param   {string}  type     User type name (e.g. structure type name). Optional, leave empty for generic numeric types.\r\n         * @param   {string}  size     Symbol size. Optional, leave empty to determine automatically when user type is specified.\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.DefineSymbol = function(name, address, type, size) {\r\n            return SendRequest.call(this, 'DefineSymbol', [name, address, type, size]);\r\n        };\r\n\r\n        /**\r\n         * Retrieve address and size of give symbol.\r\n         *\r\n         * @example\r\n         * pcm.GetSymbolInfo(name).then((result) => console.log(\"Symbol address=\" + result.xtra.addr + \" size=\" + result.xtra.size));\r\n         *\r\n         * @param   {string}  name   Symbol name.\r\n         * @returns {Promise} In case of success, resolved promise contains 'xtra' object with 'addr' and 'size' members.\r\n         */\r\n        this.GetSymbolInfo = function(name) {\r\n            return SendRequest.call(this, 'GetSymbolInfo', [name]);\r\n        };\r\n\r\n        /**\r\n         * Get structure or union member information.\r\n         *\r\n         * @example\r\n         * pcm.GetStructMemberInfo(type, member).then((result) => console.log(\"Structure type \" + type + \" member \" + member + \r\n         *             \" is at offset \" + result.xtra.offset + \", size=\" + result.xtra.size));\r\n         *\r\n         * @param   {string}  type    User type name.\r\n         * @param   {string}  member  Structure member name.\r\n         * @returns {Promise} In case of success, resolved promise contains 'xtra' object with 'offset' and 'size' members.\r\n         */\r\n        this.GetStructMemberInfo = function(type, member) {\r\n            return SendRequest.call(this, 'GetStructMemberInfo', [type, member]);\r\n        };\r\n\r\n        /**\r\n         * Delete all script-defined symbols.\r\n         *\r\n         * @example\r\n         * pcm.DeleteAllScriptSymbols().then((result) => console.log(\"All script-defined symbols deleted.\"));\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.DeleteAllScriptSymbols = function() {\r\n            return SendRequest.call(this, 'DeleteAllScriptSymbols');\r\n        };\r\n\r\n        /**\r\n         * Run variable stimulators.\r\n         *\r\n         * @example\r\n         * pcm.RunStimulators(name).then((result) => console.log(\"Stimulator \" + name + \" is now running\"));\r\n         *\r\n         * @param   {string}  name  Name of the variable stimulator to start (or more comma-separated names)\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.RunStimulators = function(name) {\r\n            return SendRequest.call(this, 'RunStimulators', [name]);\r\n        };\r\n\r\n        /**\r\n         * Stop variable stimulators.\r\n         *\r\n         * @example\r\n         * pcm.StopStimulators(name).then((result) => console.log(\"Stimulator \" + name + \" is now stopped\"));\r\n         *\r\n         * @param   {string}  name  Name of the variable stimulator to stop (or more comma-separated names)\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.StopStimulators = function(name) {\r\n            return SendRequest.call(this, 'StopStimulators', [name]);\r\n        };\r\n\r\n        /**\r\n         * Exit application.\r\n         *\r\n         * @example\r\n         * pcm.Exit();\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.Exit = function() {\r\n            return SendRequest.call(this, 'Exit');\r\n        };\r\n\r\n        /**\r\n         * Activate FreeMASTER application window.\r\n         *\r\n         * @example\r\n         * pcm.ActivateWindow();\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.ActivateWindow = function() {\r\n            return SendRequest.call(this, 'ActivateWindow');\r\n        };\r\n\r\n        /**\r\n         * Select item in FreeMASTER project tree and activate related view.\r\n         *\r\n         * @example\r\n         * pcm.SelectItem(\"My Oscilloscope\", \"osc\");\r\n         *\r\n         * @param   {string}  name  Name of the item to activate\r\n         * @param   {string}  tab   Tab to activate. Optional, one of the following values: \"ctl\", \"blk\", \"info\", \"osc\", \"rec\", \"pipe\"\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.SelectItem = function(name, tab) {\r\n            return SendRequest.call(this, 'SelectItem', [name, tab]);\r\n        };\r\n\r\n        /**\r\n         * Open specific FreeMASTER project.\r\n         *\r\n         * @example\r\n         * pcm.OpenProject(\"C:/projects/my_project.pmpx\");\r\n         *\r\n         * @param   {string}  name  Name of the project file to open; use fully qualified name.\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.OpenProject = function(name) {\r\n            return SendRequest.call(this, 'OpenProject', [name]);\r\n        };\r\n\r\n        /**\r\n         * Determine if board has an active content defined in TSA table.\r\n         *\r\n         * @example\r\n         * pcm.IsBoardWithActiveContent().then((result) => console.log(\"Board active content \" + (result.data ? \"is\" : \"is NOT\") + \"present\"));\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains boolean 'data' member with return value.\r\n         */\r\n        this.IsBoardWithActiveContent = function() {\r\n            return SendRequest.call(this, 'IsBoardWithActiveContent');\r\n        };\r\n\r\n        /**\r\n         * Enumerate hyperlinks defined by active content.\r\n         *\r\n         * @example\r\n         * for(let index=0; true; index++) {\r\n         *     try {\r\n         *         let response = await pcm.EnumHrefLinks(index);\r\n         *         console.log(response.xtra.name + \" \" +  response.xtra.retval + \"\\n\");\r\n         *     } catch (err) {\r\n         *         break;\r\n         *     }\r\n         * }\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains 'xtra' object with 'name' and 'retval' properties.\r\n         */\r\n        this.EnumHrefLinks = function(index) {\r\n            return SendRequest.call(this, 'EnumHrefLinks', [index]);\r\n        };\r\n\r\n        /**\r\n         * Enumerate project files defined by active content.\r\n         *\r\n         * @example\r\n         * for(let index=0; true; index++) {\r\n         *     try {\r\n         *         let response = await pcm.EnumProjectFiles(index);\r\n         *         console.log(response.xtra.name + \" \" +  response.xtra.retval + \"\\n\");\r\n         *     } catch (err) {\r\n         *         break;\r\n         *     }\r\n         * }\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains 'xtra' object with 'name' and 'retval' properties.\r\n         */\r\n        this.EnumProjectFiles = function(index) {\r\n            return SendRequest.call(this, 'EnumProjectFiles', [index]);\r\n        };\r\n\r\n        /**\r\n         * Set global flag which affects Control Page reloading after opening port. By default, the page reloads when port is open.\r\n         *\r\n         * @example\r\n         * pcm.SetPageReloadOnPortOpen(false);\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise does not contain any data.\r\n         */\r\n        this.SetPageReloadOnPortOpen = function(value) {\r\n            return SendRequest.call(this, 'SetPageReloadOnPortOpen', [value]);\r\n        };\r\n\r\n        /**\r\n         * Get global flag which affects Control Page reloading while opening port.\r\n         *\r\n         * @example\r\n         * pcm.GetPageReloadOnPortOpen().then(result => console.log(\"PageReloadOnPortOpen flag is \" + result.data))\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains boolean 'data' member with return value.\r\n         */\r\n        this.GetPageReloadOnPortOpen = function() {\r\n            return SendRequest.call(this, 'GetPageReloadOnPortOpen');\r\n        };\r\n\r\n        /**\r\n         * Sets pipes default transmit mode.\r\n         *\r\n         * @example\r\n         * pcm.PipeSetDefaultTxMode(false).then(() => console.log(\"Default TX mode updated.\"));\r\n         *\r\n         * @param   {boolean} txAllOrNothing Flag specifying whether the data should be sent all at once.\r\n         * @returns {Promise} The result does not carry any relevant data.\r\n         */\r\n        this.PipeSetDefaultTxMode = function(txAllOrNothing) {\r\n            return SendRequest.call(this, 'PipeSetDefaultTxMode', [txAllOrNothing]);\r\n        };\r\n\r\n        /**\r\n         * Get info about variable with address.\r\n         *\r\n         * @example\r\n         * pcm.GetAddressInfo(addr, size).then(() => console.log(\"Info is \" + result.data));\r\n         *\r\n         * @param   {addr} Address of the variable.\r\n         * @param   {size} Size of the variable.\r\n         * @returns {Promise} In case of success, resolved promise contains string 'data' member with return value.\r\n         */\r\n        this.GetAddressInfo = function(addr, size) {\r\n            return SendRequest.call(this, 'GetAddressInfo', [addr, size]);\r\n        };\r\n        \r\n        /**\r\n         * Define oscilloscope in project.\r\n         *\r\n         * @example\r\n         * pcm.DefineOscilloscope(name, defStr).then(() => console.log(\"Info is \" + result.data));\r\n         *\r\n         * @param   {name} Name of item.\r\n         * @param   {defStr} Stringified JSON definition record. Refer to FreeMASTER documentation for more details.\r\n         * @returns {Promise} The result does not carry any relevant data.\r\n         */\r\n        this.DefineOscilloscope = function(name, defStr) {\r\n            return SendRequest.call(this, 'DefineOscilloscope', [name, defStr]);\r\n        };\r\n        \r\n        /**\r\n         * Define recorder in project.\r\n         *\r\n         * @example\r\n         * pcm.DefineRecorder(name, defStr).then(() => console.log(\"Info is \" + result.data));\r\n         *\r\n         * @param   {name} Name of item.\r\n         * @param   {defStr} Stringified JSON definition record. Refer to FreeMASTER documentation for more details.\r\n         * @returns {Promise} The result does not carry any relevant data.\r\n         */\r\n        this.DefineRecorder = function(name, defStr) {\r\n            return SendRequest.call(this, 'DefineRecorder', [name, defStr]);\r\n        };\r\n        \r\n        /**\r\n         * Send application command.\r\n         *\r\n         * @example\r\n         * pcm.SendCommand(send).then(() => console.log(\"Return is \" + result.data));\r\n         *\r\n         * @param   {send} Application command.\r\n         * @param   {wait} Set true to wait for the command processing to finish.\r\n         * @returns {Promise} In case of success, resolved promise contains string 'xtra.message' member with return message and 'xtra.retCode' member with return .\r\n         */\r\n        this.SendCommand = function(send, wait) {\r\n            return SendRequest.call(this, 'SendCommand', [send, wait]);\r\n        };\r\n        \r\n        /**\r\n         * Get current recorder state.\r\n         *\r\n         * @example\r\n         * pcm.GetCurrentRecorderState().then(() => console.log(\"Return is \" + result.data));\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains string 'xtra.data' member with return state.\r\n         */\r\n        this.GetCurrentRecorderState = function() {\r\n            return SendRequest.call(this, 'GetCurrentRecorderState');\r\n        };\r\n        \r\n        /**\r\n         * Get current recorder data.\r\n         *\r\n         * @example\r\n         * pcm.GetCurrentRecorderData().then(() => console.log(\"Return is \" + result.data));\r\n         *\r\n         * @returns {Promise} In case of success, resolved promise contains string 'xtra.data' member with return data array-of-arrays.\r\n         */\r\n        this.GetCurrentRecorderData = function() {\r\n            return SendRequest.call(this, 'GetCurrentRecorderData');\r\n        };\r\n        \r\n        /**\r\n         * Get current recorder series.\r\n         *\r\n         * @example\r\n         * pcm.GetCurrentRecorderSeries(name).then(() => console.log(\"Return is \" + result.data));\r\n         *\r\n         * @param   {name} Variable name.\r\n         * @returns {Promise} In case of success, resolved promise contains string 'xtra.data' member with return data array.\r\n         */\r\n        this.GetCurrentRecorderSeries = function(name) {\r\n            return SendRequest.call(this, 'GetCurrentRecorderSeries', [name]);\r\n        };\r\n    };\r\n};\r\n\r\nexport default PCM;\r\n  ","/*******************************************************************************\r\n*\r\n* NXP Confidential Proprietary\r\n*\r\n* Copyright 2020 NXP\r\n* All Rights Reserved\r\n*\r\n* @file           App.js\r\n*\r\n *******************************************************************************\r\n*\r\n* THIS SOFTWARE IS PROVIDED BY NXP \"AS IS\" AND ANY EXPRESSED OR\r\n* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\r\n* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\n* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\r\n* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\r\n* THE POSSIBILITY OF SUCH DAMAGE.\r\n*\r\n ******************************************************************************/\r\nimport React from 'react';\r\nimport './App.css';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport ContentContainer from \"./components/contents/helpers/ContentContainer.jsx\"\r\nimport HeaderButton from \"./components/header/HeaderButton.jsx\"\r\nimport MainDashboard from \"./components/contents/MainDashboard.jsx\"\r\nimport BatteryPack from \"./components/contents/Battery/BatteryPack.jsx\"\r\nimport RawData from \"./components/contents/RawData/RawData.jsx\"\r\nimport SystemConfiguration from \"./components/contents/SystemConfiguration.jsx\"\r\n\r\nimport { normalToMicro, normalToMili, microToMili, microToNormal,\r\n    miliToMicro, miliToNormal,\r\n    celsiusToFahrenheit, celsiusToKelvin} from \"./components/helper-functions/conversions.js\"\r\n\r\nimport \"./css/main.css\"\r\nimport \"./css/light-theme.css\"\r\n\r\nimport PCM from \"./freemaster-libs/freemaster-client.js\"\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pcm: null,\r\n            boardConnected: false,\r\n            demoModeActive: false,\r\n            loading: false,\r\n            freemasterVersion: \"lite\",\r\n            elfPath: \"bms\\\\BMS_NXP.elf\",\r\n            liteConnection: {\r\n                liteServerUrl: \"localhost:8090\",\r\n                connString: \"RS232;port=COM14;speed=115200;\"\r\n            },\r\n            labels: [],\r\n            packVoltage: [],\r\n            packCurrent: [],\r\n            packTemperature: [],\r\n            packSoC: [],\r\n            cellsNumber: 6,\r\n            cellsData: [],\r\n            indicators: {\r\n                blinkingStatus: [0, 0, 0, 0, 0, 0, 0, 0],\r\n                history: []\r\n            },\r\n            units: {\r\n                systemSocUnits: \"%\",\r\n                systemVoltageUnits: \"V\",\r\n                systemCurrentUnits: \"A\",\r\n                systemTempUnits: \"\\u00b0C\",\r\n                systemPowerUnits: \"W\",\r\n                axis: {\r\n                    voltage: {\r\n                        \"\\u00b5V\": {min: 0, max: 5 * 1000000},\r\n                        \"mV\": {min: 0, max: 5 * 1000},\r\n                        \"V\": {min: 0, max: 5}\r\n                    },\r\n                    current: {\r\n                        \"\\u00b5A\": {min: -2 * 1000000, max: 2 * 1000000},\r\n                        \"mA\": {min: -2 * 1000, max: 2 * 1000},\r\n                        \"A\": {min: -2, max: 2}\r\n                    },\r\n                    balancing: { min: 0, max: 1.5 },\r\n                    temp: {\r\n                        \"\\u00b0C\": {min: -40, max: 80},\r\n                        \"\\u00b0F\": {min: -40, max: 180},\r\n                        \"K\": {min: 230, max: 355}\r\n                    },\r\n                }\r\n            },\r\n            graphSettings: {\r\n                graphAutoscaling: true,\r\n                graphAnimations: true,\r\n                maxOnGraphDataPoints: 10\r\n            },\r\n            theme: \"dark\"\r\n        }\r\n        this.passedSeconds = 0;\r\n        this.updateRate = 1000; //in ms\r\n        this.maxSavedGraphDataPoints = 120;\r\n\r\n        this.variables = {\r\n            name: {\r\n                PackVoltage: \"Pack_VoltageIn\",\r\n                PackCurrent: \"Pack_CurrentIn\",\r\n                PackTemp: \"Internal_Temperature\",\r\n                PackSoC: \"PackSOC\",\r\n                CellVoltage: \"Cell_Voltages\",\r\n                CellCurrent: \"Cell_Current\",\r\n                CellTemp: \"Cell_Temperature\",\r\n                CellSOC: \"Cell_SOC\",\r\n                BMS_CellBalancing: \"Cell_Balancing\",\r\n                BMS_Info_OUT: \"BMS_Info_OUT\"\r\n            },\r\n            type: {\r\n                PackVoltage: {type: \"float\", size: 4},\r\n                PackCurrent: {type: \"float\", size: 4},\r\n                PackTemp: {type: \"float\", size: 4},\r\n                PackSoC: {type: \"float\", size: 4},\r\n                CellVoltage: {type: \"float\", size: 4},\r\n                CellCurrent: {type: \"float\", size: 4},\r\n                CellTemp: {type: \"float\", size: 4},\r\n                CellSOC: {type: \"float\", size: 4},\r\n                BMS_CellBalancing: {type: \"uint\", size: 1},\r\n                BMS_Info_OUT: {type: \"uint\", size: 1}\r\n            }\r\n        };\r\n        this.numberOfCellVariables = 4;\r\n\r\n        this.indicatorsNames = [\r\n            \"Voltage Sensor\",\r\n            \"Over Current\",\r\n            \"High Temp\",\r\n            \"Low Temp\",\r\n            \"Over Voltage\",\r\n            \"Under Voltage\",\r\n            \"Contactor Fault for Charger\",\r\n            \"Contactor Fault for Inverter\"\r\n        ]\r\n\r\n        this.cellsPackButton = React.createRef();\r\n\r\n        this.onClickConnect = this.onClickConnect.bind(this);\r\n        this.onClickDisconnect = this.onClickDisconnect.bind(this);\r\n        this.defineVariables = this.defineVariables.bind(this);\r\n        this.readVariables = this.readVariables.bind(this);\r\n        this.readDEMOvars = this.readDEMOvars.bind(this);\r\n        this.defineDEMOVars = this.defineDEMOVars.bind(this);\r\n        this.changeUnit = this.changeUnit.bind(this);\r\n        this.proccesFaults = this.proccesFaults.bind(this);\r\n        this.setUpDesktopConnectionCheck = this.setUpDesktopConnectionCheck.bind(this);\r\n    }\r\n\r\n    changeUnit(e) {\r\n        if(e === \"uV\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemVoltageUnits: \"\\u00b5\" + e.charAt(1)}}))\r\n        } else if(e === \"mV\" || e === \"V\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemVoltageUnits: e}}))\r\n        } else if(e === \"uA\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemCurrentUnits: \"\\u00b5\" + e.charAt(1)}}))\r\n        }  else if(e === \"mA\" || e === \"A\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemCurrentUnits: e}}))\r\n        } else if(e === \"C\" || e === \"F\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemTempUnits: \"\\u00b0\" + e}}))\r\n        } else if(e === \"K\") {\r\n            this.setState((prevState) => ({units: {...prevState.units, systemTempUnits: e}}))\r\n        }\r\n    }\r\n\r\n    defineVariables(cellsNumber) {\r\n        let pcm = this.state.pcm\r\n        let PackVoltage = this.variables.name.PackVoltage;\r\n        let PackCurrent = this.variables.name.PackCurrent;\r\n        let PackTemp = this.variables.name.PackTemp;\r\n        let PackSoC = this.variables.name.PackSoC;\r\n        let CellVoltage = this.variables.name.CellVoltage;\r\n        let CellCurrent = this.variables.name.CellCurrent;\r\n        let CellTemp = this.variables.name.CellTemp;\r\n        let CellSOC = this.variables.name.CellSOC;\r\n        let BMS_CellBalancing = this.variables.name.BMS_CellBalancing;\r\n        let BMS_Info_OUT = this.variables.name.BMS_Info_OUT;\r\n        var defines = [];\r\n        this.cellsData = [];\r\n        this.labels = [];\r\n        this.packVoltage = [];\r\n        this.packCurrent = [];\r\n        this.packTemperature = [];\r\n        this.packSoC = [];\r\n        defines.push(...[\r\n            pcm.DefineVariable({name: PackVoltage, addr: PackVoltage, ...this.variables.type.PackVoltage}),\r\n            pcm.DefineVariable({name: PackCurrent, addr: PackCurrent, ...this.variables.type.PackCurrent}),\r\n            pcm.DefineVariable({name: PackTemp, addr: PackTemp, ...this.variables.type.PackTemp}),\r\n            pcm.DefineVariable({name: PackSoC, addr: PackSoC, ...this.variables.type.PackSoC})\r\n        ])\r\n        for(let indicatorIndex = 0; indicatorIndex < 8; indicatorIndex++) {\r\n            defines.push(...[\r\n                pcm.DefineVariable({ name: BMS_Info_OUT + `[${indicatorIndex}]`, addr: BMS_Info_OUT + `[${indicatorIndex}]`, ...this.variables.type.BMS_Info_OUT }),\r\n            ])\r\n        }\r\n        for(let cellIndex = 0; cellIndex < cellsNumber; cellIndex++) {\r\n            this.cellsData.push({\r\n                labels: [],\r\n                voltage: [],\r\n                balancing: [],\r\n                current: [],\r\n                temp: [],\r\n                soc: []\r\n            })\r\n            defines.push(...[\r\n                pcm.DefineVariable({ name: CellVoltage + `[${cellIndex}]`, addr: CellVoltage + `[${cellIndex}]`, ...this.variables.type.CellVoltage }),\r\n                pcm.DefineVariable({ name: BMS_CellBalancing + `[${cellIndex}]`, addr:  BMS_CellBalancing + `[${cellIndex}]`, ...this.variables.type.BMS_CellBalancing }),\r\n                pcm.DefineVariable({ name: CellTemp + `[${cellIndex}]`, addr: CellTemp + `[${cellIndex}]`, ...this.variables.type.CellTemp }),\r\n                pcm.DefineVariable({ name: CellSOC + `[${cellIndex}]`, addr: CellSOC + `[${cellIndex}]`, ...this.variables.type.CellSOC })\r\n            ])\r\n        }\r\n        return Promise.all(defines)\r\n    }\r\n\r\n    readVariables() {\r\n        let pcm = this.state.pcm\r\n        let PackVoltage = this.variables.name.PackVoltage;\r\n        let PackCurrent = this.variables.name.PackCurrent;\r\n        let PackTemp = this.variables.name.PackTemp;\r\n        let PackSoC = this.variables.name.PackSoC;\r\n        let CellVoltage = this.variables.name.CellVoltage;\r\n        let CellCurrent = this.variables.name.CellCurrent;\r\n        let CellTemp = this.variables.name.CellTemp;\r\n        let CellSOC = this.variables.name.CellSOC;\r\n        let BMS_CellBalancing = this.variables.name.BMS_CellBalancing;\r\n        let BMS_Info_OUT = this.variables.name.BMS_Info_OUT;\r\n        var readings = [];\r\n        readings.push(...[\r\n            pcm.ReadVariable(PackVoltage),\r\n            pcm.ReadVariable(PackCurrent),\r\n            pcm.ReadVariable(PackTemp),\r\n            pcm.ReadVariable(PackSoC)\r\n        ])\r\n        for(let indicatorIndex = 0; indicatorIndex < 8; indicatorIndex++) {\r\n            readings.push(...[\r\n                pcm.ReadVariable(BMS_Info_OUT + `[${indicatorIndex}]`),\r\n            ])\r\n        }\r\n        for(let cellIndex = 0; cellIndex < this.state.cellsNumber; cellIndex++) {\r\n            readings.push(...[\r\n                pcm.ReadVariable(CellVoltage + `[${cellIndex}]`),\r\n                pcm.ReadVariable(BMS_CellBalancing + `[${cellIndex}]`),\r\n                pcm.ReadVariable(CellTemp + `[${cellIndex}]`),\r\n                pcm.ReadVariable(CellSOC + `[${cellIndex}]`)\r\n            ])\r\n        }\r\n        Promise.all(readings)\r\n            .then((result) => {\r\n                let initialDataArray = result.slice(4 + 8).map(e => e.data);\r\n                for(let index = 0; index < initialDataArray.length; index = index + this.numberOfCellVariables) {\r\n                    //one index + numberOfCellVariables covers 1 cell data\r\n                    let labels = this.cellsData[index / this.numberOfCellVariables].labels;\r\n                    let voltageSeries = this.cellsData[index / this.numberOfCellVariables].voltage;\r\n                    // let currentSeries = this.cellsData[index / this.numberOfCellVariables].current;\r\n                    let balancingSeries = this.cellsData[index / this.numberOfCellVariables].balancing;\r\n                    let tempSeries = this.cellsData[index / this.numberOfCellVariables].temp;\r\n                    let socSeries = this.cellsData[index / this.numberOfCellVariables].soc;\r\n                    labels.push(this.passedSeconds)\r\n\r\n                    // for voltage data\r\n                    switch(this.state.units.systemVoltageUnits) {\r\n                        case \"\\u00b5V\":\r\n                            voltageSeries.push(normalToMicro(initialDataArray[index]))\r\n                            break;\r\n                        case \"mV\":\r\n                            voltageSeries.push(normalToMili(initialDataArray[index]))\r\n                            break;\r\n                        case \"V\":\r\n                            voltageSeries.push(initialDataArray[index])\r\n                            break;\r\n                    }\r\n                    // for current data\r\n                    // switch(this.state.units.systemCurrentUnits) {\r\n                    //     case \"\\u00b5A\":\r\n                    //         currentSeries.push(normalToMicro(initialDataArray[index + 1]))\r\n                    //         break;\r\n                    //     case \"mA\":\r\n                    //         currentSeries.push(normalToMili(initialDataArray[index + 1]))\r\n                    //         break;\r\n                    //     case \"A\":\r\n                    //         currentSeries.push(initialDataArray[index + 1])\r\n                    //         break;\r\n                    // }\r\n                    balancingSeries.push(initialDataArray[index + 1])\r\n                    // for temp data\r\n                    switch(this.state.units.systemTempUnits) {\r\n                        case \"\\u00b0C\":\r\n                            tempSeries.push(initialDataArray[index + 2])\r\n                            break;\r\n                        case \"\\u00b0F\":\r\n                            tempSeries.push(celsiusToFahrenheit(initialDataArray[index + 2]))\r\n                            break;\r\n                        case \"K\":\r\n                            tempSeries.push(celsiusToKelvin(initialDataArray[index + 2]))\r\n                            break;\r\n                    }\r\n\r\n                    socSeries.push(initialDataArray[index + 3])\r\n                    if(voltageSeries.length > this.maxSavedGraphDataPoints) {\r\n                        labels.splice(0, labels.length - this.maxSavedGraphDataPoints)\r\n                        voltageSeries.splice(0, voltageSeries.length - this.maxSavedGraphDataPoints)\r\n                        // currentSeries.splice(0, currentSeries.length - this.maxSavedGraphDataPoints)\r\n                        balancingSeries.splice(0, balancingSeries.length - this.maxSavedGraphDataPoints)\r\n                        tempSeries.splice(0, tempSeries.length - this.maxSavedGraphDataPoints)\r\n                        socSeries.splice(0, socSeries.length - this.maxSavedGraphDataPoints)\r\n                    }\r\n                }\r\n\r\n                // for voltage data\r\n                switch(this.state.units.systemVoltageUnits) {\r\n                    case \"\\u00b5V\":\r\n                        this.packVoltage.push(normalToMicro(result[0].data))\r\n                        break;\r\n                    case \"mV\":\r\n                        this.packVoltage.push(normalToMili(result[0].data))\r\n                        break;\r\n                    case \"V\":\r\n                        this.packVoltage.push(result[0].data)\r\n                        break;\r\n                }\r\n                // for current data\r\n                switch(this.state.units.systemCurrentUnits) {\r\n                    case \"\\u00b5A\":\r\n                        this.packCurrent.push(normalToMicro(result[1].data))\r\n                        break;\r\n                    case \"mA\":\r\n                        this.packCurrent.push(normalToMili(result[1].data))\r\n                        break;\r\n                    case \"A\":\r\n                        this.packCurrent.push(result[1].data)\r\n                        break;\r\n                }\r\n                // for temp data\r\n                switch(this.state.units.systemTempUnits) {\r\n                    case \"\\u00b0C\":\r\n                        this.packTemperature.push(result[2].data) // in Celsius,\r\n                        break;\r\n                    case \"\\u00b0F\":\r\n                        this.packTemperature.push(celsiusToFahrenheit(result[2].data))\r\n                        break;\r\n                    case \"K\":\r\n                        this.packTemperature.push(celsiusToKelvin(result[2].data))\r\n                        break;\r\n                }\r\n\r\n                this.packSoC.push(result[3].data)\r\n                this.labels.push(this.passedSeconds)\r\n                if(this.packVoltage.length > this.maxSavedGraphDataPoints) {\r\n                    this.packVoltage.splice(0, this.packVoltage.length - this.maxSavedGraphDataPoints)\r\n                    this.packCurrent.splice(0, this.packCurrent.length - this.maxSavedGraphDataPoints)\r\n                    this.packTemperature.splice(0, this.packTemperature.length - this.maxSavedGraphDataPoints)\r\n                    this.packSoC.splice(0, this.packSoC.length - this.maxSavedGraphDataPoints)\r\n                    this.labels.splice(0, this.labels.length - this.maxSavedGraphDataPoints)\r\n                }\r\n                this.setState((prevState) => ({\r\n                    labels: this.labels,\r\n                    packVoltage: this.packVoltage,\r\n                    packCurrent: this.packCurrent,\r\n                    packTemperature: this.packTemperature,\r\n                    packSoC: this.packSoC,\r\n                    cellsData: this.cellsData,\r\n                    indicators: this.proccesFaults(prevState, result)\r\n                }))\r\n                this.passedSeconds++;\r\n                this.readVarsTimeout = setTimeout(this.readVariables, this.updateRate)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n                toast.error(\" Reading the variables failed.\")\r\n                clearTimeout(this.readVarsTimeout);\r\n                this.setState(() => ({boardConnected: false}));\r\n                this.setUpDesktopConnectionCheck()\r\n            })\r\n    }\r\n\r\n    proccesFaults(prevState, result) {\r\n        let date = new Date;\r\n        let timeStamp = (date.getHours() < 10 ? '0' : '') + date.getHours() + \":\" + (date.getMinutes() < 10 ? '0' : '') + date.getMinutes() + \":\" + (date.getSeconds() < 10 ? '0' : '') + date.getSeconds()\r\n        let currentFaults = [...Array(8).keys()].map(elem => elem + 4).map(i => result[i].data)\r\n        let changedFaults = prevState.indicators.blinkingStatus.map((indicator, index) => {\r\n            if(indicator !== currentFaults[index]) {\r\n                return 1\r\n            } else {\r\n                return 0\r\n            }\r\n        })\r\n        let newFaultsChanges = []\r\n        changedFaults.forEach((change, index) => {\r\n            if(change) {\r\n                newFaultsChanges.push({\r\n                    time: timeStamp,\r\n                    from: prevState.indicators.blinkingStatus[index],\r\n                    to: currentFaults[index],\r\n                    name: this.indicatorsNames[index]\r\n                })\r\n            }\r\n        })\r\n        return {\r\n            blinkingStatus: currentFaults,\r\n            history: [...prevState.indicators.history, ...newFaultsChanges]\r\n        }\r\n    }\r\n\r\n    defineDEMOVars(newCellsNumber) {\r\n        this.cellsData = [];\r\n        for(let cellIndex = 0; cellIndex < newCellsNumber; cellIndex++) {\r\n            this.cellsData.push({\r\n                labels: [],\r\n                voltage: [],\r\n                balancing: [],\r\n                current: [],\r\n                temp: [],\r\n                soc: []\r\n            })\r\n        }\r\n    }\r\n\r\n    readDEMOvars() {\r\n        for(let cellIndex = 0; cellIndex < this.state.cellsNumber; cellIndex++) {\r\n            let variables = {\r\n                cellVoltage: (Math.random() * (5 - 0) + 0) * 1000000, // in uV\r\n                cellCurrent: (Math.random() * (2 + 2) - 2) * 1000, // in mA\r\n                cellTemp: Math.random() * (70 + 40) -40, // in Celsius\r\n                // cellVoltage: 2000000, // in uV\r\n                // cellCurrent: 2000, // in mA\r\n                // cellTemp: 30, // in Celsius\r\n                cellSOC: Math.random(), // %\r\n                cellBalancing: Math.round(Math.random()) // 0 or 1\r\n            }\r\n            // for voltage data\r\n            switch(this.state.units.systemVoltageUnits) {\r\n                case \"\\u00b5V\":\r\n                    variables.cellVoltage = variables.cellVoltage\r\n                    break;\r\n                case \"mV\":\r\n                    variables.cellVoltage = microToMili(variables.cellVoltage)\r\n                    break;\r\n                case \"V\":\r\n                    variables.cellVoltage = microToNormal(variables.cellVoltage)\r\n                    break;\r\n            }\r\n            // for current data\r\n            switch(this.state.units.systemCurrentUnits) {\r\n                case \"\\u00b5A\":\r\n                    variables.cellCurrent = miliToMicro(variables.cellCurrent)\r\n                    break;\r\n                case \"mA\":\r\n                    variables.cellCurrent = variables.cellCurrent\r\n                    break;\r\n                case \"A\":\r\n                    variables.cellCurrent = miliToNormal(variables.cellCurrent)\r\n                    break;\r\n            }\r\n            // for temp data\r\n            switch(this.state.units.systemTempUnits) {\r\n                case \"\\u00b0C\":\r\n                    variables.cellTemp = variables.cellTemp\r\n                    break;\r\n                case \"\\u00b0F\":\r\n                    variables.cellTemp = celsiusToFahrenheit(variables.cellTemp)\r\n                    break;\r\n                case \"K\":\r\n                    variables.cellTemp = celsiusToKelvin(variables.cellTemp)\r\n                    break;\r\n            }\r\n            this.cellsData[cellIndex].labels.push(this.passedSeconds)\r\n            this.cellsData[cellIndex].voltage.push(variables.cellVoltage)\r\n            this.cellsData[cellIndex].current.push(variables.cellCurrent)\r\n            this.cellsData[cellIndex].balancing.push(variables.cellBalancing)\r\n            this.cellsData[cellIndex].temp.push(variables.cellTemp)\r\n            this.cellsData[cellIndex].soc.push(variables.cellSOC)\r\n\r\n            if(this.cellsData[cellIndex].labels.length > this.maxSavedGraphDataPoints) {\r\n                this.cellsData[cellIndex].labels.splice(0, this.cellsData[cellIndex].labels.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].voltage.splice(0, this.cellsData[cellIndex].voltage.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].current.splice(0, this.cellsData[cellIndex].current.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].balancing.splice(0, this.cellsData[cellIndex].balancing.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].temp.splice(0, this.cellsData[cellIndex].temp.length - this.maxSavedGraphDataPoints)\r\n                this.cellsData[cellIndex].soc.splice(0, this.cellsData[cellIndex].soc.length - this.maxSavedGraphDataPoints)\r\n            }\r\n        }\r\n\r\n        // for voltage data\r\n        switch(this.state.units.systemVoltageUnits) {\r\n            case \"\\u00b5V\":\r\n                this.packVoltage.push((Math.random() * (5 - 0) + 0) * 1000000) // in uV,\r\n                break;\r\n            case \"mV\":\r\n                this.packVoltage.push(microToMili((Math.random() * (5 - 0) + 0) * 1000000))\r\n                break;\r\n            case \"V\":\r\n                this.packVoltage.push(microToNormal((Math.random() * (5 - 0) + 0) * 1000000))\r\n                break;\r\n        }\r\n        // for current data\r\n        switch(this.state.units.systemCurrentUnits) {\r\n            case \"\\u00b5A\":\r\n                this.packCurrent.push(miliToMicro((Math.random() * (2 + 2) - 2) * 1000))\r\n                break;\r\n            case \"mA\":\r\n                this.packCurrent.push((Math.random() * (2 + 2) - 2) * 1000) // in mA,\r\n                break;\r\n            case \"A\":\r\n                this.packCurrent.push(miliToNormal((Math.random() * (2 + 2) - 2) * 1000))\r\n                break;\r\n        }\r\n        // for temp data\r\n        switch(this.state.units.systemTempUnits) {\r\n            case \"\\u00b0C\":\r\n                this.packTemperature.push(Math.random() * (70 + 40) -40) // in Celsius,\r\n                break;\r\n            case \"\\u00b0F\":\r\n                this.packTemperature.push(celsiusToFahrenheit(Math.random() * (70 + 40) -40))\r\n                break;\r\n            case \"K\":\r\n                this.packTemperature.push(celsiusToKelvin(Math.random() * (70 + 40) -40))\r\n                break;\r\n        }\r\n\r\n        this.packSoC.push(Math.random()) // %,\r\n        this.labels.push(this.passedSeconds)\r\n        if(this.packVoltage.length > this.maxSavedGraphDataPoints) {\r\n            this.packVoltage.splice(0, this.packVoltage.length - this.maxSavedGraphDataPoints)\r\n            this.packCurrent.splice(0, this.packCurrent.length - this.maxSavedGraphDataPoints)\r\n            this.packTemperature.splice(0, this.packTemperature.length - this.maxSavedGraphDataPoints)\r\n            this.packSoC.splice(0, this.packSoC.length - this.maxSavedGraphDataPoints)\r\n            this.labels.splice(0, this.labels.length - this.maxSavedGraphDataPoints)\r\n        }\r\n        this.setState((prevState) => ({\r\n            labels: this.labels,\r\n            packVoltage: this.packVoltage,\r\n            packCurrent: this.packCurrent,\r\n            packTemperature: this.packTemperature,\r\n            packSoC: this.packSoC,\r\n            cellsData: this.cellsData,\r\n            indicators: this.proccesFaults(prevState, [...Array(12).keys()].map(elem => elem === 4 ? {data: Math.round(Math.random())} : {data: 0}))\r\n        }))\r\n        this.passedSeconds++;\r\n        this.readDEMOVarsTimeout = setTimeout(this.readDEMOvars, 900)\r\n    }\r\n\r\n    onClickDisconnect() {\r\n        let pcm = this.state.pcm\r\n        clearTimeout(this.readVarsTimeout);\r\n        pcm.StopComm()\r\n            .then(() => {\r\n                toast.success(\" Disconnected.\")\r\n                this.setState(() => ({boardConnected: false, pcm: null}));\r\n                this.setUpDesktopConnectionCheck()\r\n            })\r\n            .catch(() => {\r\n                toast.error(\" Stopping the communication failed.\")\r\n            })\r\n    }\r\n\r\n    onClickConnect(options) {\r\n        if(this.state.loading) {\r\n            return\r\n        }\r\n        //if demo mode is active do not allow the user to connect to a board\r\n        if(this.state.demoModeActive) {\r\n            toast.error(\" Disable demo mode before connecting to the board.\")\r\n            return;\r\n        }\r\n        \r\n        var liteServer = options?.liteServer || this.state.liteConnection.liteServerUrl\r\n        var connString = options?.connString || this.state.liteConnection.connString\r\n        \r\n        const on_connect = () => {\r\n            let pcm = this.state.pcm;\r\n            // console.log(\"Go!\")\r\n            \r\n            if(this.state.freemasterVersion === \"desktop\") { //case for desktop freemaster\r\n                pcm.StartComm(\"preset\") // \"preset\" is used for the default connection built in the freemaster app\r\n                    .then(() => {\r\n                        toast.success(\" Successfully connected.\")\r\n                        this.passedSeconds = 0\r\n                        this.labels = [];\r\n                        this.cellsData = [];\r\n                        this.packVoltage = [];\r\n                        this.packCurrent = [];\r\n                        this.packTemperature = [];\r\n                        this.packSoC = [];\r\n                        for(let cellIndex = 0; cellIndex < this.state.cellsNumber; cellIndex++) {\r\n                            this.cellsData.push({\r\n                                labels: [],\r\n                                voltage: [],\r\n                                balancing: [],\r\n                                current: [],\r\n                                temp: [],\r\n                                soc: []\r\n                            })\r\n                        }\r\n                        this.readVariables()\r\n                        this.setState(() => ({boardConnected: true, loading: false}));\r\n                    })\r\n            } else {\r\n                pcm.StartComm(connString)\r\n                    .then(pcm.IsBoardDetected)\r\n                    .then((response) => {\r\n                        if(response.data === true) {\r\n                            return pcm.GetDetectedBoardInfo()\r\n                        } else {\r\n                            throw new Error(\"Board not detected!\")\r\n                        }\r\n                    })\r\n                    .then((response) => {\r\n                        // console.log(\"Board information: \", response.data)\r\n                        return pcm.ReadELF(this.state.elfPath)\r\n                        // return pcm.ReadTSA()\r\n                    })\r\n                    .then(() => {\r\n                        toast.success(\" Successfully connected.\")\r\n                        this.defineVariables(this.state.cellsNumber)\r\n                            .then(() => {\r\n                                this.passedSeconds = 0\r\n                                this.readVariables()\r\n                                this.setState(() => ({boardConnected: true, loading: false}));\r\n                            })\r\n                    })\r\n                    .catch((error) => {\r\n                        console.log(error)\r\n                        toast.error(\" An error has occurred, check the connection parameters.\")\r\n                        this.setState(() => ({loading: false}));\r\n                    })\r\n            }  \r\n        }\r\n\r\n        const on_close = () => {\r\n            toast.error(\" Connection Closed.\")\r\n            clearTimeout(this.readVarsTimeout);\r\n            this.setState(() => ({boardConnected: false, loading: false}));\r\n        }\r\n\r\n        const on_error = () => {\r\n            toast.error(\" An error has occurred, check the connection.\")\r\n            clearTimeout(this.readVarsTimeout);\r\n            this.setState(() => ({boardConnected: false, loading: false}));\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n        this.state.pcm = new PCM(liteServer, on_connect, on_close, on_error);\r\n        this.setState(() => ({loading: true}));\r\n    }\r\n\r\n    setUpDesktopConnectionCheck() {\r\n        let checkForDesktopConnection = () => {\r\n            if(this.state.boardConnected === false) {\r\n                let on_connect = () => {\r\n                    testConnection.IsCommPortOpen()\r\n                        .then((response) => {\r\n                            if(response.data === true) {\r\n                                this.onClickConnect()\r\n                            } else {\r\n                                setTimeout(checkForDesktopConnection, 1000)\r\n                            }\r\n                        })\r\n                }\r\n                let testConnection = new PCM(\"localhost:41000\", on_connect)\r\n            }\r\n        }\r\n        checkForDesktopConnection()\r\n    }\r\n\r\n    componentDidMount() {\r\n        //init bootstrap tooltips\r\n        window.$('[data-toggle=\"tooltip\"]').tooltip();\r\n\r\n        this.setUpDesktopConnectionCheck()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.readVarsTimeout);\r\n        clearTimeout(this.readDEMOVarsTimeout);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"content-area\">\r\n                    <div className=\"container-fluid\">\r\n                        <div id=\"main-container\" className=\"mt-3\">\r\n\r\n                            <div id=\"header-container\" className=\"row\">\r\n                                <div className=\"col-lg-12\">\r\n\r\n                                    <div className=\"row\">\r\n                                        <h2 className=\"ml-3\">Battery Management System { this.state.demoModeActive ? \"(Demo mode active)\" : \"\" }</h2>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <HeaderButton text=\"Dashboard\" active=\"true\" controls=\"#dashboard-container\" icon=\"fa fa-sliders\" disabled={false}></HeaderButton>\r\n                                        <HeaderButton buttonRef={this.cellsPackButton} text=\"Cells Pack\" controls=\"#cell-pack-container\" icon=\"fa fa-list\" disabled={false}></HeaderButton>\r\n                                        <HeaderButton text=\"Raw Data\" controls=\"#raw-data-container\" icon=\"fa fa-table\" disabled={false}></HeaderButton>\r\n                                        <HeaderButton text=\"System Configuration\" controls=\"#chemistry-container\" icon=\"fa fa-flask\" disabled={false}></HeaderButton>\r\n\r\n                                        <a className=\"btn btn-large white-text-button btn-primary\" style={{position:\"absolute\", right: \"15px\"}} role=\"button\"\r\n                                            onClick={this.state.boardConnected ? this.onClickDisconnect : this.onClickConnect}>\r\n                                                {   (this.state.boardConnected === false && this.state.loading === true) &&\r\n                                                        <React.Fragment>\r\n                                                        <span className=\"spinner-grow mr-2\" style={{width: \"1.4rem\", height: \"1.4rem\"}} role=\"status\" aria-hidden=\"true\"></span>\r\n                                                            Connecting\r\n                                                        </React.Fragment>\r\n                                                }\r\n                                                {   (this.state.boardConnected === true && this.state.loading === false) &&\r\n                                                        <React.Fragment>\r\n                                                            <i className=\"fa fa-exchange mr-2\" style={{width: \"1.4rem\", height: \"1.4rem\"}}></i>\r\n                                                            Disconnect\r\n                                                        </React.Fragment>\r\n                                                }\r\n                                                {   (this.state.boardConnected === false && this.state.loading === false) &&\r\n                                                        <React.Fragment>\r\n                                                            <i className=\"fa fa-exchange mr-2\" style={{width: \"1.4rem\", height: \"1.4rem\"}}></i>\r\n                                                            Connect\r\n                                                        </React.Fragment>\r\n                                                }\r\n\r\n                                        </a>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n                            <ContentContainer active=\"true\" id=\"dashboard-container\" dataParent=\"#main-container\">\r\n                                <MainDashboard\r\n                                    cellsNumber={this.state.cellsNumber}\r\n                                    data={{\r\n                                        labels: this.state.labels,\r\n                                        packVoltage: this.state.packVoltage,\r\n                                        packCurrent: this.state.packCurrent,\r\n                                        packTemperature: this.state.packTemperature,\r\n                                        packSoC: this.state.packSoC\r\n                                    }}\r\n                                    indicatorsNames={this.indicatorsNames}\r\n                                    blinkingStatus={this.state.indicators.blinkingStatus}\r\n                                    indicatorsHistory={this.state.indicators.history}\r\n                                    clickCellsPackTab={() => {\r\n                                        this.cellsPackButton.current.click()\r\n                                    }}\r\n                                    boardConnected={this.state.boardConnected}\r\n                                    demoModeActive={this.state.demoModeActive}\r\n                                    units={this.state.units}\r\n                                    theme={this.state.theme}\r\n                                    graphSettings={this.state.graphSettings}\r\n                                />\r\n                            </ContentContainer>\r\n\r\n                            <ContentContainer id=\"cell-pack-container\" dataParent=\"#main-container\">\r\n                                <BatteryPack cellsNumber={this.state.cellsNumber}\r\n                                    cellsData={this.state.cellsData}\r\n                                    passedSeconds={this.passedSeconds}\r\n                                    numberOfCellVariables={this.numberOfCellVariables}\r\n                                    units={this.state.units}\r\n                                    theme={this.state.theme}\r\n                                    graphSettings={this.state.graphSettings} />\r\n                            </ContentContainer>\r\n\r\n                            <ContentContainer id=\"raw-data-container\" dataParent=\"#main-container\">\r\n                                <RawData cellsNumber={this.state.cellsNumber}\r\n                                    cellsData={this.state.cellsData}\r\n                                    units={this.state.units}\r\n                                    theme={this.state.theme} />\r\n                            </ContentContainer>\r\n\r\n                            <ContentContainer id=\"chemistry-container\" dataParent=\"#main-container\">\r\n                                <SystemConfiguration\r\n                                    boardConnected={this.state.boardConnected}\r\n                                    demoModeActive={this.state.demoModeActive}\r\n                                    liteConnection={this.state.liteConnection}\r\n                                    changeLiteConnection={(options) => {\r\n                                        this.setState(() => ({\r\n                                            liteConnection: {\r\n                                                liteServerUrl: options.liteServerUrl || this.state.liteConnection.liteServerUrl,\r\n                                                connString: options.connString || this.state.liteConnection.connString\r\n                                            }\r\n                                        }))\r\n                                    }}\r\n                                    onSelectedFreemasterVersion={(selectedVerion) => {\r\n                                        this.setState(() => ({\r\n                                            freemasterVersion: selectedVerion\r\n                                        }))\r\n                                    }}\r\n                                    elfPath={this.state.elfPath}\r\n                                    changeElfPath={(newPath) => {\r\n                                        this.setState(() => ({\r\n                                            elfPath: newPath\r\n                                        }))\r\n                                    }}\r\n                                    onToggleAutoScaling={() => {\r\n                                        this.setState((prevState) => ({\r\n                                            graphSettings: {\r\n                                                ...prevState.graphSettings,\r\n                                                graphAutoscaling: !prevState.graphSettings.graphAutoscaling\r\n                                            }\r\n                                        }))\r\n                                    }}\r\n                                    onToggleAnimations={() => {\r\n                                        this.setState((prevState) => ({\r\n                                            graphSettings: {\r\n                                                ...prevState.graphSettings,\r\n                                                graphAnimations: !prevState.graphSettings.graphAnimations\r\n                                            }\r\n                                        }))\r\n                                    }}\r\n                                    onChangeMaxOnGraphDataPoints={(newMaxOnGraphDataPoints) => {\r\n                                        this.setState((prevState) => ({\r\n                                            graphSettings: {\r\n                                                ...prevState.graphSettings,\r\n                                                maxOnGraphDataPoints: newMaxOnGraphDataPoints\r\n                                            }\r\n                                        }))\r\n                                    }}\r\n                                    changeCellsNumber={(newCellsNumber) => {\r\n                                        toast.info(\" Cells number changed to \" + newCellsNumber, {autoClose: 3000})\r\n                                        if(this.state.pcm) {\r\n                                            this.defineVariables(newCellsNumber)\r\n                                            .then(() => {\r\n                                                this.setState(() => ({cellsNumber: newCellsNumber}))\r\n                                            })\r\n                                        } else { //in demo mode\r\n                                            this.defineDEMOVars(newCellsNumber)\r\n                                            this.setState(() => ({cellsNumber: newCellsNumber}))\r\n                                        }\r\n                                    }}\r\n                                    cellsNumber={this.state.cellsNumber}\r\n                                    cellsData={this.state.cellsData}\r\n                                    data={{\r\n                                        labels: this.state.labels,\r\n                                        packVoltage: this.state.packVoltage,\r\n                                        packCurrent: this.state.packCurrent,\r\n                                        packTemperature: this.state.packTemperature,\r\n                                        packSoC: this.state.packSoC\r\n                                    }}\r\n                                    triggerDemoMode={() => {\r\n                                        this.labels = [];\r\n                                        this.cellsData = [];\r\n                                        this.packVoltage = [];\r\n                                        this.packCurrent = [];\r\n                                        this.packTemperature = [];\r\n                                        this.packSoC = [];\r\n                                        this.passedSeconds = 0;\r\n                                        if(this.state.demoModeActive === false) {\r\n                                            this.defineDEMOVars(this.state.cellsNumber)\r\n                                            this.readDEMOvars()\r\n                                            toast.info(\" Demo mode switched ON.\", {autoClose: 3000})\r\n                                        } else {\r\n                                            clearTimeout(this.readDEMOVarsTimeout);\r\n                                            toast.info(\" Demo mode switched OFF.\", {autoClose: 3000})\r\n                                        }\r\n                                        this.setState((prevState) => ({demoModeActive: !prevState.demoModeActive}))\r\n                                    }}\r\n                                    changeUnit={this.changeUnit}\r\n                                    units={this.state.units}\r\n                                    theme={this.state.theme}\r\n                                    changeApplicationTheme={(selectedTheme) => {\r\n                                        this.setState(() => ({theme: selectedTheme}))\r\n                                    }}\r\n                                />\r\n                            </ContentContainer>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12 mt-2 text-center\">\r\n                            &copy; 2020 NXP\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <ToastContainer />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}